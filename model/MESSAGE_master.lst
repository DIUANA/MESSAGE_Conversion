GAMS 24.7.4  r58773 Released Sep 19, 2016 WEX-WEI x86 64bit/MS Windows 10/25/21 16:21:21 Page 1
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


   2  $ONDOLLAR
   3  $ONTEXT
       
         Copyright 2018 IIASA Energy Program
       
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
       
             http://www.apache.org/licenses/LICENSE-2.0
       
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
      .
         See the License for the specific language governing permissions and
         limitations under the License.
       
      This is the GAMS implementation of the integrated assessment and system op
      timization model MESSAGEix
      For the most recent version of the framework, please visit `github.com/iia
      sa/message_ix`.
      For a comprehensive documentation of the latest release of the MESSAGEix f
      ramework
      and the ix modeling platform, please visit `MESSAGEix.iiasa.ac.at/`.
       
      When using the MESSAGEix framework, please cite as:
       
         Daniel Huppmann, Matthew Gidden, Oliver Fricko, Peter Kolp, Clara Ortho
      fer,
         Michael Pimmer, Nikolay Kushin, Adriano Vinca, Alessio Mastrucci,
         Keywan Riahi, and Volker Krey.
         "The |MESSAGEix| Integrated Assessment Model and the ix modeling platfo
      rm".
         Environmental Modelling & Software 112:143-156, 2019.
         doi: 10.1016/j.envsoft.2018.11.012
         electronic pre-print available at pure.iiasa.ac.at/15157/
       
      Please review the NOTICE at `MESSAGEix.iiasa.ac.at/notice.html`
      and included in the GitHub repository for further user guidelines.
      The community forum and mailing list is hosted at `groups.google.com/d/for
      um/message_ix`.
       
  38  $OFFTEXT
  39   
  40  * activate dollar commands on a global level
  41  $ONGLOBAL
  42   
  43  *-------------------------------------------------------------------------
      ---------------------------------------------*
  44  * model setup, data set selection, scenario selection, other settings     
                                                   *
  45  *-------------------------------------------------------------------------
      ---------------------------------------------*
  46   
  47  ** scenario/case selection - this must match the name of the MsgData_<%%%>
      .gdx input data file **
  48  $SETGLOBAL data "MsgData_BLUES_Brasil_1.99_IX_79_15C_wCost"
  49   
  50  ** MACRO mode
  51  * "none": MESSAGEix is run in stand-alone mode
  52  * "linked": MESSAGEix-MACRO is run in iterative mode **
  53  $SETGLOBAL macromode "none"
  54   
  55  ** define the time horizon over which the model optimizes (perfect foresig
      ht, myopic or rolling horizon) **
  56  * perfect foresight - 0
  57  * myopic optimization (period-by-period, recursive-dynamic without any for
      esight) - 1
  58  * rolling horizon (period-by-period, recursive-dynamic with limited foresi
      ght - 'number of years of foresight'
  59  $SETGLOBAL foresight "0"
  60   
  61  ** add a comment and name extension for model report files (e.g. run-speci
      fic info, calibration notes) - optional **
  62  $SETGLOBAL comment ""
  63   
  64  ** specify optional calibration output **
  65  $SETGLOBAL calibration ""
  66  * mark as "*" to include detailed calibration information in outputs and g
      et a longer listing file
  67   
  68  *-------------------------------------------------------------------------
      ---------------------------------------------*
  69  * debugging mode settings for support and assistance during model developm
      ent and calibration                          *
  70  *-------------------------------------------------------------------------
      ---------------------------------------------*
  71  * mark as "*" to deactivate, mark as "" to activate
  72   
  73  * set auxiliary upper/lower bounds on the actitivity variables to prevent 
      unbounded rays during model development
  74  $SETGLOBAL AUX_BOUNDS "*"
  75  $SETGLOBAL AUX_BOUND_VALUE "1e9"
  76   
  77  * include relaxations for specific constraint blocks to identify infeasibi
      lities during model development/calibration
  78  * by adding 'slack' variables in the constraints and associated penalty fa
      ctors in the objective function
  79  $SETGLOBAL SLACK_COMMODITY_EQUIVALENCE "*"
  80   
  81  $SETGLOBAL SLACK_CAP_NEW_BOUND_UP "*"
  82  $SETGLOBAL SLACK_CAP_NEW_BOUND_LO "*"
  83  $SETGLOBAL SLACK_CAP_TOTAL_BOUND_UP "*"
  84  $SETGLOBAL SLACK_CAP_TOTAL_BOUND_LO "*"
  85  $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_UP "*"
  86  $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_LO "*"
  87   
  88  $SETGLOBAL SLACK_ACT_BOUND_UP "*"
  89  $SETGLOBAL SLACK_ACT_BOUND_LO "*"
  90  $SETGLOBAL SLACK_ACT_DYNAMIC_UP "*"
  91  $SETGLOBAL SLACK_ACT_DYNAMIC_LO "*"
  92   
  93  $SETGLOBAL SLACK_LAND_SCEN_UP "*"
  94  $SETGLOBAL SLACK_LAND_SCEN_LO "*"
  95  $SETGLOBAL SLACK_LAND_TYPE_UP "*"
  96  $SETGLOBAL SLACK_LAND_TYPE_LO "*"
  97   
  98  $SETGLOBAL SLACK_RELATION_BOUND_UP "*"
  99  $SETGLOBAL SLACK_RELATION_BOUND_LO "*"
 100   
 101  $SETGLOBAL SLACK_RELATION_BOUND_UP2 "*"
 102  $SETGLOBAL SLACK_RELATION_BOUND_LO2 "*"
 103   
 104  $SETGLOBAL SLACK_MUF "*"
 105  $SETGLOBAL SLACK_MUF_TIME "*"
 106  $SETGLOBAL SLACK_CAP_CON "*"
 107  $SETGLOBAL SLACK_CAP_LAND "*"
 108  $SETGLOBAL SLACK_EMISSION "*"
 109  $SETGLOBAL SLACK_EXT_BOUND_UP "*"
 110  *-------------------------------------------------------------------------
      ---------------------------------------------*
 111  * launch the MESSAGEix or MESSAGEix-MACRO run file with the settings as de
      fined above                                      *
 112  *-------------------------------------------------------------------------
      ---------------------------------------------*
 113   
 114  $SETGLOBAL in "data/MsgData_BLUES_Brasil_1.99_IX_79_15C_wCost.gdx"
 115  $IFTHEN ==""
 116  $SETGLOBAL out "output/MsgOutput_MsgData_BLUES_Brasil_1.99_IX_79_15C_wCost
      .gdx"
 117  $SETGLOBAL iter "output/MsgIterationReport_MsgData_BLUES_Brasil_1.99_IX_79
      _15C_wCost.gdx"
 118  $ENDIF
 119   
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE_run.gms
 120  $INCLUDE MESSAGE_run.gms
 121  $TITLE The MESSAGEix Integrated Assessment Model
 122  $ONDOLLAR
 123  $ONTEXT
       
         Copyright 2018 IIASA Energy Program
       
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
       
             http://www.apache.org/licenses/LICENSE-2.0
       
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
      .
         See the License for the specific language governing permissions and
         limitations under the License.
       
      This is the GAMS implementation of the integrated assessment and system op
      timization model MESSAGEix
      For the most recent version of the framework, please visit `github.com/iia
      sa/message_ix`.
      For a comprehensive documentation of the latest release of the MESSAGEix f
      ramework
      and the ix modeling platform, please visit `MESSAGEix.iiasa.ac.at/`.
       
      When using the MESSAGEix framework, please cite as:
       
         Daniel Huppmann, Matthew Gidden, Oliver Fricko, Peter Kolp, Clara Ortho
      fer,
         Michael Pimmer, Nikolay Kushin, Adriano Vinca, Alessio Mastrucci,
         Keywan Riahi, and Volker Krey.
         "The |MESSAGEix| Integrated Assessment Model and the ix modeling platfo
      rm".
         Environmental Modelling & Software 112:143-156, 2019.
         doi: 10.1016/j.envsoft.2018.11.012
         electronic pre-print available at pure.iiasa.ac.at/15157/
       
      Please review the NOTICE at `MESSAGEix.iiasa.ac.at/notice.html`
      and included in the GitHub repository for further user guidelines.
      The community forum and mailing list is hosted at `groups.google.com/d/for
      um/message_ix`.
       
 158  $OFFTEXT
 159   
 160  ***
 161  * Run script for |MESSAGEix| (stand-alone)
 162  * ========================================
 163  *
 164  * This is |MESSAGEix| version |version|. The version number must match the
       version number
 165  * of the ``ixmp`` ``MESSAGE``-scheme specifications used for exporting dat
      a and importing results.
 166  *
 167  * This file contains the workflow of a |MESSAGEix|-standalone run. It can 
      be called:
 168  *
 169  * - Via the scientific programming API's using the packages/libraries ``ix
      mp`` and ``message_ix``,
 170  *   calling the method ``solve()`` of the ``message_ix.Scenario`` class (s
      ee the tutorials).
 171  * - using the file ``MESSAGE_master.gms`` with the option ``$SETGLOBAL mac
      romode "none"``,
 172  *   where the input data file name and other options are stated explicitly
      , or
 173  * - directly from the command line, with the input data file name
 174  *   and other options specific as command line parameters, e.g.::
 175  *
 176  *   ``gams MESSAGE_run.gms --in="<data-file>" [--out="<output-file>"]``
 177  *
 178  * By default, the data file (in gdx format) should be located in the ``mod
      el/data`` folder
 179  * and be named in the format ``MsgData_<name>.gdx``. Upon completion of th
      e GAMS execution,
 180  * a results file ``<output-file>`` will be written
 181  * (or ``model\output\MsgOutput.gdx`` if ``--out`` is not provided).
 182  ***
 183   
 184  $EOLCOM #
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE/model_se
           tup.gms
 185  $INCLUDE MESSAGE/model_setup.gms
 186  *-------------------------------------------------------------------------
      ---------------------------------------------*
 187  * sanity check of model run parameters, set defaults if not specified     
                                                   *
 188  *-------------------------------------------------------------------------
      ---------------------------------------------*
 189   
 190  * set # as end-of-line comment; all text after # is ignored
 191  * (for proper display in GAMS IDE, this needs to be specified in the optio
      ns, too)
 192   
 193  *-------------------------------------------------------------------------
      ---------------------------------------------*
 194  * sanity check of model run parameters, set defaults if not specified     
                                                   *
 195  *-------------------------------------------------------------------------
      ---------------------------------------------*
 196   
 197  * a datastructure name is mandatory to load the gdx file - abort the run i
      f not specified or file does not exist
 198  $IF NOT SET in       $ABORT "no input data file provided!"
 199  $IF NOT EXIST 'data/MsgData_BLUES_Brasil_1.99_IX_79_15C_wCost.gdx' $ABORT 
      "input GDX file 'data/MsgData_BLUES_Brasil_1.99_IX_79_15C_wCost.gdx' does 
      not exist!"
 200  $IF NOT SET iter     $SETGLOBAL iter "output/MsgIterationReport"
 201  $IF NOT SET out      $SETGLOBAL out "output/MsgOutput.gdx"
 202   
 203  ** define the time horizon over which the model optimizes (perfect foresig
      ht, myopic or rolling horizon) **
 204  * perfect foresight - 0 (assumed as default if not specified
 205  * myopic optimization (period-by-period, recursive-dynamic without any for
      esight) - 1
 206  * rolling horizon (period-by-period, recursive-dynamic with limited foresi
      ght - 'number of years of foresight'
 207  $IF NOT SET foresight   $SETGLOBAL foresight "0"
 208   
 209  ** specify optional additional calibration output **
 210  $IF NOT SET calibration $SETGLOBAL calibration ""
 211  * mark with * to include detailed calibration information in outputs and g
      et an extended GAMS listing (.lst) file
 212   
 213  ** debugging mode settings for support and assistance during model develop
      ment and calibration **
 214  * assume that all debugging options are deactivated by default
 215  * mark as "*" to deactivate, mark as "" to activate
 216   
 217  * set auxiliary upper and lower bounds on the actitivity variables to prev
      ent unbounded models
 218  $IF NOT SET AUX_BOUNDS               $SETGLOBAL AUX_BOUNDS "*"
 219  $IF NOT SET AUX_BOUND_VALUE          $SETGLOBAL AUX_BOUND_VALUE "1e9"
 220   
 221  * include relaxations for specific constraint blocks to identify infeasibi
      lities during model development/calibration
 222  * by adding 'slack' variables in the constraints and associated penalty fa
      ctors in the objective function
 223  $IF NOT SET SLACK_COMMODITY_EQUIVALENCE  $SETGLOBAL SLACK_COMMODITY_EQUIVA
      LENCE "*"
 224   
 225  $IF NOT SET SLACK_CAP_NEW_BOUND_UP   $SETGLOBAL SLACK_CAP_NEW_BOUND_UP "*"
 226  $IF NOT SET SLACK_CAP_NEW_BOUND_LO   $SETGLOBAL SLACK_CAP_NEW_BOUND_LO "*"
 227  $IF NOT SET SLACK_CAP_TOTAL_BOUND_UP $SETGLOBAL SLACK_CAP_TOTAL_BOUND_UP "
      *"
 228  $IF NOT SET SLACK_CAP_TOTAL_BOUND_LO $SETGLOBAL SLACK_CAP_TOTAL_BOUND_LO "
      *"
 229  $IF NOT SET SLACK_CAP_NEW_DYNAMIC_UP $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_UP "
      *"
 230  $IF NOT SET SLACK_CAP_NEW_DYNAMIC_LO $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_LO "
      *"
 231   
 232  $IF NOT SET SLACK_ACT_BOUND_UP       $SETGLOBAL SLACK_ACT_BOUND_UP "*"
 233  $IF NOT SET SLACK_ACT_BOUND_LO       $SETGLOBAL SLACK_ACT_BOUND_LO "*"
 234  $IF NOT SET SLACK_ACT_DYNAMIC_UP     $SETGLOBAL SLACK_ACT_DYNAMIC_UP "*"
 235  $IF NOT SET SLACK_ACT_DYNAMIC_LO     $SETGLOBAL SLACK_ACT_DYNAMIC_LO "*"
 236   
 237  $IF NOT SET SLACK_LAND_SCEN_UP       $SETGLOBAL SLACK_LAND_SCEN_UP "*"
 238  $IF NOT SET SLACK_LAND_SCEN_LO       $SETGLOBAL SLACK_LAND_SCEN_LO "*"
 239  $IF NOT SET SLACK_LAND_TYPE_UP       $SETGLOBAL SLACK_LAND_TYPE_UP "*"
 240  $IF NOT SET SLACK_LAND_TYPE_LO       $SETGLOBAL SLACK_LAND_TYPE_LO "*"
 241   
 242  $IF NOT SET SLACK_RELATION_BOUND_UP  $SETGLOBAL SLACK_RELATION_BOUND_UP "*
      "
 243  $IF NOT SET SLACK_RELATION_BOUND_LO  $SETGLOBAL SLACK_RELATION_BOUND_LO "*
      "
 244   
 245  *-------------------------------------------------------------------------
      ---------------------------------------------*
 246  * initialize sets, mappings, parameters, load data, do pre-processing     
                                                   *
 247  *-------------------------------------------------------------------------
      ---------------------------------------------*
 248   
 249  ** load auxiliary settings from include file (solver options, resource/tim
      e limits, prefered solvers) **
 250  * recommended only for advanced users
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE/auxiliar
           y_settings.gms
 251  $INCLUDE MESSAGE/auxiliary_settings.gms
 252  *-------------------------------------------------------------------------
      ---------------------------------------------*
 253  * auxiliary settings and defintions                                       
                                                   *
 254  *-------------------------------------------------------------------------
      ---------------------------------------------*
 255   
 256  * initialise logfile settings - this allows to write status messages to th
      e logfile
 257  file logfile / '' / ;
 258  put logfile ;
 259   
 260  * get yourself a short listing file
 261  option limrow = 20000 ;     # number of rows (equations) reported in lst f
      ile -> 0 is the original value
 262  option limcol = 5000 ;     # number of columns reported in lst file -> 0 i
      s the original value
 263  option solprint = on ; # solver's solution output printed
 264  option savepoint = 0 ;  # creates a result gdx file after every solve
 265  * this is done manually in this code to have the database name in the gdx 
      file name and to save the file in a sub-folder
 266   
 267  option ITERLIM = 1e8 ;  # iteration limit
 268  option RESLIM = 3e5 ;   # resource limit (in seconds; 1e6 is approximately
       11 days; 2e5 2,3 days, 3e5 --> 3,4 days)
 269  * solver comments for QCP and PATH:
 270  * - GUROBI, CPLEX and MINOS are fast
 271  * - CONOPT is slower, but (in non-linear problems) usually more helpful to
       identify the feasibility problems
 272  * general comment: sometimes, first using one solver and then another (usi
      ng the previous solution as starting point)
 273  * helps even if the previous run did not solve to optimality
 274  option LP = CPLEX ;
 275  option NLP = CONOPT ;
 276  option MCP = PATH ;
 277   
 278  *option solveopt=clear ;# remove results of previous runs in memory
 279  option solveopt=merge ; # keep results of previous runs in memory
 280  $SETENV GdxCompress 1   # reduces the size of the gdx export file
 281   
 282  $ONTEXT
      $ONLISTING
      option limrow = 20000 ;   # number of rows (equations) reported in lst fil
      e
      option limcol = 9e6 ;   # number of columns reported in lst file
      option solprint = on ;  # solver's solution output printed
      $ONTEXT
 288  $OFFTEXT
 289   
 290  * check that the version of MESSAGEix and the ixToolbox used for exporting
       the data to gdx match
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\version.gms
 291  $INCLUDE version.gms
 292  * GDX scheme version
 293  *
 294  * !!! DO NOT CHANGE VALUES IN THIS FILE MANUALLY !!!
 295  * Instead, update message_ix and ixmp as described in the documentation.
 296  *
 297  * Technical details:
 298  *
 299  * These numbers describe the contents of the GDX file written by the Java 
      code
 300  * in ixmp.jar. The Java code automatically generates some contents, e.g., 
      set
 301  * elements, in a way that cannot be controlled or overriden by Python ixmp
       or
 302  * message_ix.
 303  *
 304  * Formerly, these numbers were incremented in ixmp_source, ixmp.jar, and t
      his
 305  * file, with every release. Currently, they will be incremented if (and *o
      nly*
 306  * if) there are changes in the behaviour of the Java code that must be syn
      ced
 307  * with corresponding changes in the GAMS source files in this directory.
 308  *
 309  * Eventually, all automatic behaviour will be moved from ixmp_source (Java
      ) to
 310  * ixmp (Python); see https://github.com/iiasa/message_ix/issues/254. At th
      at
 311  * point, both this file and MESSAGE/version_check.gms can be removed.
 312   
 313  $SETGLOBAL VERSION_MAJOR "2"
 314  $SETGLOBAL VERSION_MINOR "0"
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE/version_
           check.gms
 315  $INCLUDE MESSAGE/version_check.gms
 316  * Version check                                                           
                                            *
 317  *
 318  * See technical description in ../version.gms.
 319   
 320  Parameter MESSAGE_ix_version(*);
 321   
GDXIN   D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\data/MsgData_BLUES_
        Brasil_1.99_IX_79_15C_wCost.gdx
 322  $GDXIN 'data/MsgData_BLUES_Brasil_1.99_IX_79_15C_wCost.gdx'
--- LOAD  MESSAGE_ix_version = 1:MESSAGE_ix_version
 323  $LOAD MESSAGE_IX_version
 324  $GDXIN
 325   
 326  IF ( NOT ( MESSAGE_IX_version("major") = 2 AND MESSAGE_IX_version("minor")
       = 0 ),
 327      logfile.nw = 1;
 328      logfile.nd = 0;
 329   
 330      put_utility 'log' / '***';
 331      put_utility 'log' / '*** ABORT';
 332      put_utility 'log' / '*** GDX file was written by an ixmp.jar incompati
      ble with this version of MESSAGEix:';
 333      put_utility 'log' / '***   data/MsgData_BLUES_Brasil_1.99_IX_79_15C_wC
      ost.gdx';
 334      put_utility 'log' / '***   ...has version ' MESSAGE_IX_version("major"
      ) '.' MESSAGE_IX_version("minor")
 335        ' while version.gms has 2.0';
 336      put_utility 'log' / '***';
 337   
 338      abort "GDX file incompatible with current version of MESSAGEix";
 339  ) ;
 340   
 341  ** initialize sets, mappings, parameters
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE/sets_map
           s_def.gms
 342  $INCLUDE MESSAGE/sets_maps_def.gms
 343  ***
 344  * .. _sets_maps_def:
 345  *
 346  * Sets and mappings definition
 347  * =============================
 348  *
 349  * This file contains the definition of all sets and mappings used in |MESS
      AGEix|.
 350  * The short mathematical notation in the **Notation** column of the tables
       below is used
 351  * in the mathematical description relative to the GAMS code.
 352  ***
 353   
 354  * IMPORTANT
 355  * indices to mapping sets will always be in the following order:
 356  * lvl_spatial, lvl_temporal,
 357  * node_location, tec, year_vintage, year_actual, mode, commodity, level, g
      rade,
 358  * node_origin/destination, emission, time_actual), time_origin/destination
      , rating
 359   
 360  * allows sets to be empty
 361  $ONEMPTY
 362   
 363  *-------------------------------------------------------------------------
      ---------------------------------------------*
 364  * Set definitions                                                         
                                                   *
 365  *-------------------------------------------------------------------------
      ---------------------------------------------*
 366   
 367  ***
 368  * Sets in the |MESSAGEix| implementation
 369  * --------------------------------------
 370  *
 371  * .. list-table::
 372  *    :widths: 20 12 68
 373  *    :header-rows: 1
 374  *
 375  *    * - Set name
 376  *      - Notation
 377  *      - Explanatory comments
 378  *    * - node [#node]_
 379  *      - :math:`n \in N`
 380  *      - Regions, countries, grid cells
 381  *    * - commodity
 382  *      - :math:`c \in C`
 383  *      - Resources, electricity, water, land availability, etc.
 384  *    * - level
 385  *      - :math:`l \in L`
 386  *      - Levels of the reference energy system or supply chain (primary, s
      econdary, ... , useful)
 387  *    * - grade
 388  *      - :math:`g \in G`
 389  *      - Grades of resource quality in the extraction & mining sector
 390  *    * - technology [tec]
 391  *      - :math:`t \in T`
 392  *      - | Technologies that use input commodities to produce outputs;
 393  *        | the short-hand notation "tec" is used in the GAMS implementatio
      n
 394  *    * - mode [#mode]_
 395  *      - :math:`m \in M`
 396  *      - Modes of operation for specific technologies
 397  *    * - emission
 398  *      - :math:`e \in E`
 399  *      - Greenhouse gases, pollutants, etc.
 400  *    * - land_scenario
 401  *      - :math:`s \in S`
 402  *      - Scenarios of land use (for land-use model emulator)
 403  *    * - land_type
 404  *      - :math:`u \in U`
 405  *      - Land-use types (e.g., field, forest, pasture)
 406  *    * - year [year_all] [#year_all]_ [#period_year]_
 407  *      - :math:`y \in Y`
 408  *      - Model horizon (including historical periods for vintage structure
       of installed capacity
 409  *        and dynamic constraints)
 410  *    * - time [#time]_
 411  *      - :math:`h \in H`
 412  *      - Subannual time periods (seasons, days, hours)
 413  *    * - shares [#shares]_
 414  *      - :math:`p \in P`
 415  *      - Set of constraints on shares of technologies and commodities
 416  *    * - relation [#relations]_
 417  *      - :math:`r \in R`
 418  *      - Set of generic relations (linear constraints)
 419  *    * - lvl_spatial
 420  *      -
 421  *      - Set of spatial hierarchy levels (global, region, country, grid ce
      ll)
 422  *    * - lvl_temporal
 423  *      -
 424  *      - Set of temporal hierarchy levels (year, season, day, hour)
 425  *    * - rating
 426  *      - :math:`q \in Q`
 427  *      - Identifies the 'quality' of the renewable energy potential (ratin
      g of non-dispatchable
 428  *        technologies relative to aggregate commodity use)
 429  *
 430  * .. [#node] The set ``node`` includes spatial units across all levels of 
      spatial disaggregation
 431  *    (global, regions, countries, basins, grid cells).
 432  *    The hierarchical mapping is implemented via the mapping set ``map_spa
      tial_hierarchy``.
 433  *    This set always includes an element 'World' when initializing a ``MES
      SAGE``-scheme :class:`message_ix.Scenario`.
 434  *
 435  * .. [#mode] For example, high electricity or high heat production modes o
      f operation for combined heat and power plants.
 436  *
 437  * .. [#year_all] In the |MESSAGEix| implementation in GAMS, the set ``year
      _all`` denotes the "superset"
 438  *    of the entire horizon (historical and model horizon), and the set ``y
      ear`` is a dynamic subset of ``year_all``.
 439  *    This facilitates an efficient implementation of the historical capaci
      ty build-up and
 440  *    the (optional) recursive-dynamic solution approach.
 441  *    When working with a :class:`message_ix.Scenario` via the scientific p
      rogramming API, the set of all periods is
 442  *    called ``year`` for a more concise notation.
 443  *    The specification of the model horizon is implemented using the mappi
      ng set ``cat_year``
 444  *    and the type "firstmodelyear".
 445  *
 446  * .. _period_year_footnote:
 447  *
 448  * .. [#period_year] In |MESSAGEix|, the key of an element in set ``year`` 
      identifies *the last year* of the period,
 449  *    i.e., in a set :math:`year = [2000, 2005, 2010, 2015]`,
 450  *    the period '2010' comprises the years :math:`[2006, .. ,2010]`.
 451  *
 452  * .. [#time] The set ``time`` collects all sub-annual temporal units acros
      s all levels of temporal disaggregation.
 453  *    In a ``MESSAGE``-scheme :class:`ixmp.Scenario`, this set always inclu
      des an element "year",
 454  *    and the duration of that element is 1 (:math:`duration\_time_{'year'}
       = 1`).
 455  *
 456  * .. [#shares] A generic formulation of share constraints is implemented i
      n |MESSAGEix|,
 457  *    see :ref:`share_constraints`.
 458  *
 459  * .. [#relations] A generic formulation of linear constraints is implement
      ed in |MESSAGEix|,
 460  *    see :ref:`section_of_generic_relations`. These constraints can be use
      d for testing and development,
 461  *    but specific new features should be implemented by specific equations
       and parameters.
 462  ***
 463   
 464  Sets
 465      node            world - regions - countries - grid cells
 466      commodity       resources - electricity - water - land availability - 
      etc.
 467      level           levels of the reference energy system or supply chain 
      ( primary - secondary - ... - useful )
 468      sector          sectors (for integration with MACRO)
 469      grade           grades of extraction of raw materials
 470      tec             technologies
 471      mode            modes of operation
 472      emission        greenhouse gases - pollutants - etc.
 473      land_scenario   scenarios of land use (for land-use model emulator)
 474      land_type       types of land use
 475      year_all        years (over entire model horizon)
 476      year (year_all) years included in a model instance (for myopic or roll
      ing-horizon optimization)
 477      time            subannual time periods (seasons - days - hours)
 478      shares          share constraint relations
 479      relation        generic linear relations
 480      lvl_spatial     hierarchical levels of spatial resolution
 481      lvl_temporal    hierarchical levels of temporal resolution
 482      rating          identifies the 'quality' of the renewable energy poten
      tial (bins acc. to Sullivan)
 483  ;
 484   
 485  * definition of aliases
 486  Alias(node,location);
 487  Alias(node,node2);
 488  Alias(node,node_share);
 489  Alias(tec,tec2);
 490  Alias(commodity,commodity2);
 491  Alias(level,level2);
 492  Alias(emission,emission2);
 493  Alias(year_all,vintage);
 494  Alias(year_all,year_all2);
 495  Alias(year_all,year_all3);
 496  Alias(year,year2);
 497  Alias(year,year3);
 498  Alias(time,time2);
 499  Alias(time,time3);
 500  Alias(time,time_act);
 501  Alias(time,time_od);
 502  Alias(mode,mode2);
 503  Alias(commodity,commodity2);
 504   
 505  *-------------------------------------------------------------------------
      ---------------------------------------------*
 506  * Category types and mappings                                             
                                                                *
 507  *-------------------------------------------------------------------------
      ---------------------------------------------*
 508   
 509  ***
 510  *
 511  * .. _mapping-sets:
 512  *
 513  * Category types and mappings
 514  * ---------------------------
 515  *
 516  * This feature is used to easily implement aggregation across groups of se
      t elements.
 517  * For example, by setting an upper bound over an emission type, the constr
      aint enforces
 518  * that the sum over all emission species mapped to that type via the mappi
      ng set ``cat_emission``
 519  * satisfies that upper bound.
 520  *
 521  * .. list-table::
 522  *    :widths: 25 15 60
 523  *    :header-rows: 1
 524  *
 525  *    * - Set name
 526  *      - Notation
 527  *      - Explanatory comments
 528  *    * - level_resource (level) [#level_res]_
 529  *      - :math:`l \in L^{RES} \subseteq L`
 530  *      - Levels related to `fossil resources` representation
 531  *    * - level_renewable (level) [#level_res]_
 532  *      - :math:`l \in L^{REN} \subseteq L`
 533  *      - Levels related to `renewables` representation
 534  *    * - type_node [#type_node]_
 535  *      - :math:`\widehat{n} \in \widehat{N}`
 536  *      - Category types for nodes
 537  *    * - cat_node (type_node,node)
 538  *      - :math:`n \in N(\widehat{n})`
 539  *      - Category mapping between node types and nodes (all nodes that are
       subnodes of node :math:`\widehat{n}`)
 540  *    * - type_tec [#type_tec]_
 541  *      - :math:`\widehat{t} \in \widehat{T}`
 542  *      - Category types for technologies
 543  *    * - cat_tec (type_tec,tec) [#type_tec]_
 544  *      - :math:`t \in T(\widehat{t})`
 545  *      - Category mapping between tec types and technologies (all technolo
      gies mapped to the category ``type_tec`` :math:`\widehat{t}`)
 546  *    * - inv_tec (tec) [#inv_tec]_
 547  *      - :math:`t \in T^{INV} \subseteq T`
 548  *      - Specific subset of investment technologies (all technologies with
       investment decisions and capacity constraints)
 549  *    * - renewable_tec (tec) [#renewable_tec]_
 550  *      - :math:`t \in T^{REN} \subseteq T`
 551  *      - Specific subset of renewable-energy technologies (all technologie
      s which draw their input from the renewable level)
 552  *    * - addon(tec)
 553  *      - :math:`t^a \in T^{A} \subseteq T`
 554  *      - Specific subset of technologies that are an add-on to other (pare
      nt) technologies
 555  *    * - type_addon
 556  *      - :math:`\widehat{t^a} \in \widehat{T^A}`
 557  *      - Category types for add-on technologies (that can be applied mutua
      lly exclusive)
 558  *    * - cat_addon(type_addon,addon)
 559  *      - :math:`t^a \in T^A(\widehat{t^a})`
 560  *      - Category mapping add-on technologies to respective add-on technol
      ogy types (all add-on technologies mapped to the category ``type_addon`` :
      math:`\widehat{t}`)
 561  *    * - type_year
 562  *      - :math:`\widehat{y} \in \widehat{Y}`
 563  *      - Category types for year aggregations
 564  *    * - cat_year(type_year,year_all)
 565  *      - :math:`y \in Y(\widehat{y})`
 566  *      - Category mapping years to respective categories (all years mapped
       to the category ``type_year`` :math:`\widehat{y}`)
 567  *    * - type_emission
 568  *      - :math:`\widehat{e} \in \widehat{E}`
 569  *      - Category types for emissions (greenhouse gases, pollutants, etc.)
 570  *    * - cat_emission (type_emission,emission)
 571  *      - :math:`e \in E(\widehat{e})`
 572  *      - Category mapping between emission types and emissions (all emissi
      ons mapped to the category ``type_emission`` :math:`\widehat{e}`)
 573  *    * - type_tec_land (type_tec) [#type_tec_land]_
 574  *      - :math:`\widehat{t} \in \widehat{T}^{LAND} \subseteq \widehat{T}`
 575  *      - Mapping set of technology types and land use
 576  *    * - balance_equality (commodity,level)
 577  *      - :math:`c \in C, l \in L`
 578  *      - Commodities and level related to :ref:`commodity_balance_lt`
 579  *    * - level_storage(level)
 580  *      - :math:`l \in L^{STOR} \subseteq L`
 581  *      - Levels related to `storage` representation (excluded from :ref:`c
      ommodity_balance_lt`)
 582  *    * - storage_tec(tec)
 583  *      - :math:`t \in T^{STOR} \subseteq T`
 584  *      - Set of `storage` container technologies (reservoirs)
 585  *
 586  * .. [#level_res] The constraint :ref:`extraction_equivalence` is active o
      nly for the levels included in this set,
 587  *    and the constraint :ref:`commodity_balance` is deactivated for these 
      levels.
 588  *
 589  * .. [#type_node] The element "economy" is added by default as part of the
       ``MESSAGE``-scheme :class:`ixmp.Scenario`.
 590  *
 591  * .. [#type_tec] The element "all" in ``type_tec`` and the associated mapp
      ing to all technologies in the set ``cat_tec``
 592  *    are added by default as part of the ``MESSAGE``-scheme :class:`messag
      e_ix.Scenario`.
 593  *
 594  * .. [#inv_tec] The auxiliary set ``inv_tec`` (subset of ``technology``) i
      s a short-hand notation for all technologies
 595  *    with defined investment costs. This activates the investment cost par
      t in the objective function and the
 596  *    constraints for all technologies where investment decisions are relev
      ant.
 597  *    It is added by default when exporting ``MESSAGE``-scheme :class:`mess
      age_ix.Scenario` to gdx.
 598  *
 599  * .. [#renewable_tec] The auxiliary set ``renewable_tec`` (subset of ``tec
      hnology``) is a short-hand notation
 600  *    for all technologies with defined parameters relevant for the equatio
      ns in the "Renewable" section.
 601  *    It is added by default when exporting ``MESSAGE``-scheme :class:`mess
      age_ix.Scenario` to gdx.
 602  *
 603  * .. [#type_tec_land] The mapping set ``type_tec_land`` is a dynamic subse
      t of ``type_tec`` and specifies whether
 604  *    emissions from the land-use model emulator module are included when a
      ggregrating over a specific technology type.
 605  *    The element "all" is added by default in a ``MESSAGE``-scheme :class:
      `message_ix.Scenario`.
 606  ***
 607   
 608  * category types and mappings
 609  Sets
 610      level_resource (level)                  subset of 'level' to mark all 
      levels related to make hfossil resources
 611      level_renewable(level)                  subset of 'level' to mark all 
      levels related to renewable resources
 612      type_node                               types of nodes
 613      cat_node(type_node,node)                mapping of nodes to respective
       categories
 614      type_tec                                types of technologies
 615      cat_tec(type_tec,tec)                   mapping of technologies to res
      pective categories
 616      inv_tec(tec)                            technologies that have explici
      t investment and capacity decision variables
 617  *    no_er_tec(tec)
 618      renewable_tec(tec)                      technologies that use renewabl
      e energy potentials
 619      addon(tec)                              technologies that are an add-o
      n to other (parent) technologies
 620      type_addon                              types of add-on technologies (
      that can be applied mutually exclusive)
 621      cat_addon(type_addon,addon)             mapping of add-on technologies
       to respective add-on technology types
 622      type_year                               types of year aggregations
 623      cat_year(type_year,year_all)            mapping of years to respective
       categories
 624      type_emission                           types of emission aggregations
 625      cat_emission(type_emission,emission)    mapping of emissions to respec
      tive categories
 626      type_tec_land(type_tec)                 dynamic set whether emissions 
      from land use are included in type_tec
 627      balance_equality(commodity,level)       mapping of commodities-level w
      here the supply-demand balance must be maintained with equality
 628  * storage_tec and level_storage are defined at the bottom of this file.
 629  * New sets fro BLUES
 630      BLUES_land_tec(tec)
 631      BLUES_sec_land_tec(tec)                       technologies used for la
      nd use as secondary level
 632      BLUES_type_land_tec                           types of land technologi
      es
 633      BLUES_cat_land_tec(BLUES_type_land_tec, BLUES_sec_land_tec)        map
      ping of land technologies to respective land categories
 634      map_BLUES_land_rel(node, tec,BLUES_type_land_tec)                mappi
      ng of types of land technologies to the underlying parent technology
 635      relation2        generic linear relations
 636      map_relation2(relation2,node,year_all)             mapping of generic 
      (user-defined) relations to nodes and years
 637      is_relation_upper2(relation2,node,year_all)     flag whether upper bou
      nds exists for generic relation
 638      is_relation_lower2(relation2,node,year_all)     flag whether lower bou
      nds exists for generic relation
 639  ;
 640   
 641  Alias(type_tec,type_tec_share);
 642  Alias(type_tec,type_tec_total);
 643   
 644  *-------------------------------------------------------------------------
      ---------------------------------------------*
 645  * Mapping sets                                                            
                                                   *
 646  *-------------------------------------------------------------------------
      ---------------------------------------------*
 647   
 648  ***
 649  * Mappings sets
 650  * -------------
 651  *
 652  * .. note::
 653  *
 654  *    These sets are **generated automatically** when exporting a ``MESSAGE
      ``-scheme :class:`ixmp.Scenario` to gdx using the API.
 655  *    They are used in the GAMS model to reduce model size by excluding non
      -relevant variables and equations
 656  *    (e.g., activity of a technology outside of its technical lifetime). T
      hese are **not** meant to be
 657  *    edited through the API when editing scenarios. Not all the ``Mapping 
      sets`` are shown in the list below, to access
 658  *    the full list of mapping sets, please refer to the documentation file
       found in ``message_ix\model\MESSAGE\sets_maps_def.gms``.
 659  *
 660  * .. list-table::
 661  *    :widths: 40 60
 662  *    :header-rows: 1
 663  *
 664  *    * - Set name
 665  *      - Explanatory comments
 666  *    * - map_node(node,location)
 667  *      - Mapping of nodes across hierarchy levels (location is in node)
 668  *    * - map_time(time,time2)
 669  *      - Mapping of time periods across hierarchy levels (time2 is in time
      )
 670  *    * - map_time_period(year_all,lvl_temporal,time,time2)
 671  *      - Mapping of the sequence of sub-annual timesteps (used in `storage
      ` equations)
 672  *    * - map_resource(node,commodity,grade,year_all)
 673  *      - Mapping of resources and grades to node over time
 674  *    * - map_ren_grade(node,commodity,grade,year_all)
 675  *      - Mapping of renewables and grades to node over time
 676  *    * - map_ren_com(node,tec,commodity,year_all)
 677  *      - Mapping of technologies to renewable energy source as input
 678  *    * - map_rating(node,tec,commodity,level,rating,year_all)
 679  *      - Mapping of technologues to ratings bin assignment
 680  *    * - map_commodity(node,commodity,level,year_all,time)
 681  *      - Mapping of commodity-level to node and time
 682  *    * - map_stocks(node,commodity,level,year_all)
 683  *      - Mapping of commodity-level to node and time
 684  *    * - map_tec(node,tec,year_all)
 685  *      - Mapping of technology to node and years
 686  *    * - map_tec_time(node,tec,year_all,time)
 687  *      - Mapping of technology to temporal dissagregation (time)
 688  *    * - map_tec_mode(node,tec,year_all,mode)
 689  *      - Mapping of technology to modes
 690  *    * - map_tec_storage(node,tec,tec2,level,commodity)
 691  *      - Mapping of charge-discharge technologies ``tec`` to their storage
       container ``tec2``, and ``level`` and ``commodity`` of storage
 692  ***
 693   
 694  Sets
 695      map_node(node,location)                     mapping of nodes across hi
      erarchy levels (location is in node)
 696      map_time(time,time2)                        mapping of time periods ac
      ross hierarchy levels (time2 is in time)
 697  * map_time_period and map_tec_storage are defined at the bottom of this fi
      le.
 698   
 699      map_resource(node,commodity,grade,year_all)  mapping of resources and 
      grades to node over time
 700      map_ren_grade(node,commodity,grade,year_all) mapping of renewables and
       grades to node over time
 701      map_ren_com(node,tec,commodity,year_all)     mapping of technologies t
      o renewable energy source as input
 702      map_rating(node,tec,commodity,level,rating,year_all) mapping of techno
      logies to ratings bin assignment
 703   
 704      map_commodity(node,commodity,level,year_all,time)    mapping of commod
      ity-level to node and time
 705      map_stocks(node,commodity,level,year_all)    mapping of commodity-leve
      l to node and time
 706   
 707      map_tec(node,tec,year_all)                   mapping of technology to 
      node and years
 708      map_tec_time(node,tec,year_all,time)         mapping of technology to 
      temporal dissagregation (time)
 709      map_tec_mode(node,tec,year_all,mode)         mapping of technology to 
      modes
 710      map_tec_act(node,tec,year_all,mode,time)     mapping of technology to 
      modes AND temporal dissagregation
 711      map_tec_addon(tec,type_addon)                mapping of types of add-o
      n technologies to the underlying parent technology
 712   
 713      map_spatial_hierarchy(lvl_spatial,node,node)    mapping of spatial res
      olution to nodes (last index is 'parent')
 714      map_temporal_hierarchy(lvl_temporal,time,time)  mapping of temporal re
      solution to time (last index is 'parent')
 715   
 716      map_shares_commodity_share(shares,node,
 717          node,type_tec,mode,commodity,level)   mapping for commodity share 
      constraints (numerator)
 718      map_shares_commodity_total(shares,node,
 719          node,type_tec,mode,commodity,level)   mapping for commodity share 
      constraints (denominator)
 720   
 721      map_land(node,land_scenario,year_all)            mapping of land-use m
      odel emulator scenarios to nodes and years
 722      map_relation(relation,node,year_all)             mapping of generic (u
      ser-defined) relations to nodes and years
 723  *New map tecs
 724      map_tec_vtg(node,tec,vintage)                   mapping of technology 
      to node and years
 725      map_tec_vtg_act(node,tec,vintage, year_all)                   mapping 
      of technology to node and years
 726  ;
 727   
 728  * additional sets created in GAMS to make notation more concise
 729  Sets
 730      map_tec_lifetime(node,tec,vintage,year_all)  mapping of technologies t
      o periods within technical lifetime
 731  ;
 732   
 733  *-------------------------------------------------------------------------
      ---------------------------------------------*
 734  * Mapping sets (flags) for bounds                                         
                                                          *
 735  *-------------------------------------------------------------------------
      ---------------------------------------------*
 736   
 737  ***
 738  * Mapping sets (flags) for bounds
 739  * -------------------------------
 740  *
 741  * There are a number of mappings sets generated when exporting a :class:`m
      essage_ix.Scenario` to gdx.
 742  * They are used as 'flags' to indicate whether a constraint is active.
 743  * The names of these sets follow the format ``is_<constraint>_<dir>``.
 744  *
 745  * Such mapping sets are necessary because GAMS does not distinguish betwee
      n 0 and 'no value assigned',
 746  * i.e., it cannot differentiate between a bound of 0 and 'no bound assigne
      d'.
 747  *
 748  * .. note::
 749  *
 750  *    These sets are also **automatically generated**. To see the full list
       of mapping sets for bounds, please refer to the documentation
 751  *    file found in ``message_ix\model\MESSAGE\sets_maps_def.gms``.
 752  ***
 753   
 754  Sets
 755      is_bound_extraction_up(node,commodity,grade,year_all) flag whether upp
      er bound exists for extraction of commodity
 756      is_bound_new_capacity_up(node,tec,year_all)      flag whether upper bo
      und exists for new capacity
 757      is_bound_new_capacity_lo(node,tec,year_all)      flag whether lower bo
      und exists for new capacity
 758      is_bound_total_capacity_up(node,tec,year_all)    flag whether upper bo
      und exists for total installed capacity
 759      is_bound_total_capacity_lo(node,tec,year_all)    flag whether lower bo
      und exists for total installed capacity
 760      is_bound_activity_up(node,tec,year_all,mode,time) flag whether upper b
      ound exists for a technology activity
 761  *   is_bound_activity_lo(node,tec,year_all,mode,time) flag whether lower b
      ound exists for a technology activity
 762  * this last flag is not required because the lower bound defaults to zero 
      unless explicitly specified otherwise
 763   
 764      is_dynamic_new_capacity_up(node,tec,year_all)    flag whether upper dy
      namic constraint exists for new capacity (investment)
 765      is_dynamic_new_capacity_lo(node,tec,year_all)    flag whether lower dy
      namic constraint exists for new capacity (investment)
 766      is_dynamic_activity_up(node,tec,year_all,time)   flag whether upper dy
      namic constraint exists for a technology (activity)
 767      is_dynamic_activity_lo(node,tec,year_all,time)   flag whether lower dy
      namic constraint exists for a technology (activity)
 768   
 769      is_bound_emission(node,type_emission,type_tec,type_year) flag whether 
      emissions bound exists
 770   
 771      is_dynamic_land_scen_up(node,land_scenario,year_all)   flag whether dy
      namic upper constraint on land-scenario change exists
 772      is_dynamic_land_scen_lo(node,land_scenario,year_all)   flag whether dy
      namic lower constraint on land-scenario change exists
 773      is_dynamic_land_up(node,year_all,land_type)   flag whether dynamic upp
      er constraint on land-type use change exists
 774      is_dynamic_land_lo(node,year_all,land_type)   flag whether dynamic low
      er constraint on land-type use change exists
 775   
 776      is_relation_upper(relation,node,year_all)     flag whether upper bound
      s exists for generic relation
 777      is_relation_lower(relation,node,year_all)     flag whether lower bound
      s exists for generic relation
 778  *is relation 2 sets are defined earlier in the file
 779  ;
 780   
 781  *-------------------------------------------------------------------------
      ---------------------------------------------*
 782  * Mapping sets (flags) for fixed variables                                
                                                   *
 783  *-------------------------------------------------------------------------
      ---------------------------------------------*
 784   
 785  ***
 786  * Mapping sets (flags) for fixed variables
 787  * ----------------------------------------
 788  *
 789  * Similar to the mapping sets for bounds, there are mapping sets to indica
      te whether decision variables
 790  * are pre-defined to a specific value, usually taken from a solution of an
      other model instance.
 791  * This can be used to represent imperfect foresight where a policy shift o
      r parameter change is introduced in later
 792  * years. The names of these sets follow the format ``is_fixed_<variable>``
      .
 793  *
 794  * .. note::
 795  *
 796  *    These sets are also **automatically generated**. To see the full list
       of mapping sets for fixed variables, please refere to the documentation
 797  *    file found in ``message_ix\model\MESSAGE\sets_maps_def.gms``.
 798  ***
 799   
 800  Sets
 801      is_fixed_extraction(node,commodity,grade,year_all)     flag whether ex
      traction variable is fixed
 802      is_fixed_stock(node,commodity,level,year_all)          flag whether st
      ock variable is fixed
 803      is_fixed_new_capacity(node,tec,year_all)               flag whether ne
      w capacity variable is fixed
 804      is_fixed_capacity(node,tec,vintage,year_all)           flag whether ma
      intained capacity variable is fixed
 805      is_fixed_activity(node,tec,vintage,year_all,mode,time) flag whether ac
      tivity variable is fixed
 806      is_fixed_land(node,land_scenario,year_all)             flag whether la
      nd level is fixed
 807  ;
 808   
 809  *-------------------------------------------------------------------------
      ---------------------------------------------*
 810  * Storage sets and mappings                                               
                                    *
 811  *-------------------------------------------------------------------------
      ---------------------------------------------*
 812   
 813  Sets
 814      level_storage(level)                                        level of s
      torage technologies (excluded from commodity balance)
 815      map_tec_storage(node,tec,tec2,level,commodity)              mapping of
       charge-discharging technologies to their respective storage container tec
       and level-commodity
 816      storage_tec(tec)                                            storage co
      ntainer technologies (reservoir)
 817      map_time_period(year_all,lvl_temporal,time,time2)           mapping of
       the sequence of sub-annual timesteps (used in storage equations)
 818      map_time_commodity_storage(node,tec,level,commodity,mode,year_all,time
      )              mapping of storage containers to their input commodity-leve
      l (not commodity-level of stored media)
 819  ;
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE/paramete
           r_def.gms
 820  $INCLUDE MESSAGE/parameter_def.gms
 821  ***
 822  * .. _parameter_def:
 823  *
 824  * Parameter definition
 825  * ====================
 826  *
 827  * This file contains the definition of all parameters used in |MESSAGEix|.
 828  *
 829  * In |MESSAGEix|, all parameters are understood as yearly values, not as p
      er (multi-year) period.
 830  * This provides flexibility when changing the resolution of the model hori
      zon (i.e., the set ``year``).
 831  ***
 832   
 833  ***
 834  * General parameters of the |MESSAGEix| implementation
 835  * ----------------------------------------------------
 836  *
 837  * .. caution::
 838  *
 839  *    Parameters written in **bold** are auxiliary parameters
 840  *    that are either generated automatically when exporting a :class:`mess
      age_ix.Scenario` to gdx
 841  *    or that are computed during the *pre-processing* stage in GAMS (see t
      he footnotes for more
 842  *    individual details). These are **not** meant to be edited through the
       API when editing scenarios.
 843  *
 844  * .. list-table::
 845  *    :widths: 25 20 55
 846  *    :header-rows: 1
 847  *
 848  *    * - Parameter name
 849  *      - Index dimensions
 850  *      - Explanatory comments
 851  *    * - interestrate
 852  *      - ``year``
 853  *      - Economy-wide interest rate or social discount rate
 854  *    * - duration_time
 855  *      - ``time``
 856  *      - Duration of sub-annual time slices (relative to 1) [#duration_tim
      e_year]_
 857  *    * - **duration_period** (:math:`|y|`) [#short_dur]_
 858  *      - ``year``
 859  *      - Duration of multi-year period (in number of years) [#year_auto]_
 860  *    * - **duration_period_sum**
 861  *      - ``year`` | ``year``
 862  *      - Number of years between two periods [#df_auto]_
 863  *    * - **duration_time_rel**
 864  *      - ``time`` | ``time``
 865  *      - Relative duration between sub-annual time slices [#df_auto]_
 866  *    * - **df_period**
 867  *      - ``year``
 868  *      - Cumulative discount factor over period duration [#df_auto]_
 869  *    * - **df_year**
 870  *      - ``year``
 871  *      - Discount factor of the last year in the period [#df_auto]_
 872  *
 873  * .. [#duration_time_year] The element 'year' in the set of subannual time
       slices ``time`` has the value of 1.
 874  *    This value is assigned by default when creating a new :class:`ixmp.Sc
      enario` based on the ``MESSAGE`` scheme.
 875  *
 876  * .. [#short_dur] The short-hand notation :math:`|y|` is used for the para
      meters :math:`duration\_period_y`
 877  *    in the mathematical model documentation for exponents.
 878  *
 879  * .. [#year_auto] The values for this parameter are computed automatically
       when exporting a ``MESSAGE``-scheme
 880  *    :class:`ixmp.Scenario` to gdx.
 881  *    Note that in |MESSAGEix|, the elements of the ``year`` set are unders
      tood to be the last year in a period,
 882  *    see :ref:`this footnote <period_year_footnote>`.
 883  *
 884  * .. [#df_auto] These parameters are computed during the GAMS execution.
 885  ***
 886   
 887  Parameters
 888  * general parameters
 889      interestrate(year_all)         interest rate (to compute discount fact
      or)
 890      duration_time(time)            duration of one time slice (relative to
       1)
 891      duration_period(year_all)      duration of one multi-year period (in y
      ears)
 892      duration_period2(year_all)      duration of one multi-year period (in 
      years)
 893      emission_duration_period(year_all)      duration of one multi-year per
      iod (in years)
 894      duration_period_sum(year_all,year_all2)  number of years between two p
      eriods ('year_all' must precede 'year_all2')
 895      duration_time_rel(time,time2)  relative duration of subannual time per
      iod ('time2' relative to parent 'time')
 896      df_period(year_all)            cumulative discount factor over period 
      duration
 897      df_year(year_all)              discount factor of the last year in the
       period
 898      EMISSV(node,emission,type_tec,year_all)       aggregate emissions by t
      echnology type and land-use model emulator
 899  ;
 900   
 901  ***
 902  * Parameters of the `Resources` section
 903  * -------------------------------------
 904  *
 905  * In |MESSAGEix|, the volume of resources at the start of the model horizo
      n is defined by ``resource_volume``. The quantity of the
 906  * resources that are extracted per year is dependent on two parameters. Th
      e first is ``bound_extraction_up``, which constraints
 907  * the maximum extraction of the resources (by grade) in a year. The second
       is ``resource_remaining``, which is the maximum
 908  * extraction of the remaining resources in a certain year, as a percentage
      . Extraction costs for resources are represented by
 909  * ``resource_cost`` parameter.
 910  *
 911  * .. list-table::
 912  *    :widths: 25 75
 913  *    :header-rows: 1
 914  *
 915  *    * - Parameter name
 916  *      - Index dimensions
 917  *    * - resource_volume
 918  *      - ``node`` | ``commodity`` | ``grade``
 919  *    * - resource_cost
 920  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 921  *    * - resource_remaining
 922  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 923  *    * - bound_extraction_up
 924  *      - ``node`` | ``commodity`` | ``level`` | ``year``
 925  *    * - commodity_stock [#stock]_
 926  *      - ``node`` | ``commodity`` | ``level`` | ``year``
 927  *    * - historical_extraction [#hist]_
 928  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 929  *
 930  * .. [#stock] Commodity stock refers to an exogenous (initial) quantity of
       commodity in stock. This parameter allows
 931  *    (exogenous) additions to the commodity stock over the model horizon, 
      e.g., precipitation that replenishes the water table.
 932  *
 933  * .. [#hist] Historical values of new capacity and activity can be used fo
      r parametrising the vintage structure
 934  *    of existing capacity and implement dynamic constraints in the first m
      odel period.
 935  *
 936  ***
 937   
 938  Parameter
 939  * resource and commodity parameters
 940      resource_volume(node,commodity,grade)               volume of resource
      s in-situ at start of the model horizon
 941      resource_cost(node,commodity,grade,year_all)        extraction costs f
      or resource
 942      resource_remaining(node,commodity,grade,year_all)   maximum extraction
       relative to remaining resources (by year)
 943      bound_extraction_up(node,commodity,grade,year_all)  upper bound on ext
      raction of resources by grade
 944      commodity_stock(node,commodity,level,year_all)      exogenous (initial
      ) quantity of commodity in stock
 945      historical_extraction(node,commodity,grade,year_all) historical extrac
      tion
 946  ;
 947   
 948  ***
 949  * Parameters of the `Demand` section
 950  * ----------------------------------
 951  *
 952  * .. list-table::
 953  *    :widths: 30 70
 954  *    :header-rows: 1
 955  *
 956  *    * - Parameter name
 957  *      - Index dimensions
 958  *    * - demand [demand_fixed] [#demand]_
 959  *      - ``node`` | ``commodity`` | ``level`` | ``year`` | ``time``
 960  *    * - peak_load_factor [#peakload]_
 961  *      - ``node`` | ``commodity`` | ``year``
 962  *
 963  * .. [#demand] The parameter ``demand`` in a ``MESSAGE``-scheme ``ixmp.Sce
      nario`` is translated
 964  *    to the parameter ``demand_fixed`` in the |MESSAGEix| implementation i
      n GAMS. The variable ``DEMAND`` is introduced
 965  *    as an auxiliary reporting variable; it equals ``demand_fixed`` in a `
      MESSAGE`-standalone run and reports
 966  *    the final demand including the price response in an iterative `MESSAG
      E-MACRO` solution.
 967  *
 968  * .. [#peakload] The parameters ``peak_load_factor`` (maximum peak load fa
      ctor for reliability constraint of firm capacity) and
 969  *    ``reliability_factor`` (reliability of a technology (per rating)) are
       based on the formulation proposed by Sullivan et al., 2013 :cite:`sulliva
      n_VRE_2013`.
 970  *    It is used in :ref:`reliability_constraint`.
 971  *
 972  ***
 973   
 974  Parameter
 975      demand_fixed(node,commodity,level,year_all,time)     exogenous demand 
      levels
 976      peak_load_factor(node,commodity,level,year_all,time) maximum peak load
       factor for reliability constraint of firm capacity
 977  ;
 978   
 979  ***
 980  * .. _params-tech:
 981  *
 982  * Parameters of the `Technology` section
 983  * --------------------------------------
 984  *
 985  * Input/output mapping, costs and engineering specifications
 986  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 987  *
 988  * .. list-table::
 989  *    :widths: 25 60
 990  *    :header-rows: 1
 991  *
 992  *    * - Parameter name
 993  *      - Index dimensions
 994  *    * - input [#tecvintage]_
 995  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
 996  *        ``node_origin`` | ``commodity`` | ``level`` | ``time`` | ``time_o
      rigin``
 997  *    * - output [#tecvintage]_
 998  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
 999  *        ``node_dest`` | ``commodity`` | ``level`` | ``time`` | ``time_des
      t``
1000  *    * - inv_cost [#tecvintage]_
1001  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1002  *    * - fix_cost [#tecvintage]_
1003  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
1004  *    * - var_cost [#tecvintage]_
1005  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
       ``time``
1006  *    * - levelized_cost [#levelizedcost]_
1007  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``time``
1008  *    * - construction_time [#construction]_
1009  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1010  *    * - technical_lifetime
1011  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1012  *    * - capacity_factor [#tecvintage]_
1013  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``time``
1014  *    * - operation_factor [#tecvintage]_
1015  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
1016  *    * - min_utilization_factor [#tecvintage]_
1017  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
1018  *    * - rating_bin [#rating]_
1019  *      - ``node`` | ``tec`` | ``year_act`` | ``commodity`` | ``level`` | `
      `time`` | ``rating``
1020  *    * - reliability_factor [#peakload]_
1021  *      - ``node`` | ``tec`` | ``year_act`` | ``commodity`` | ``level`` | `
      `time`` | ``rating``
1022  *    * - flexibility_factor [#flexfactor]_
1023  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
       ``commodity`` | ``level`` | ``time`` | ``rating``
1024  *    * - renewable_capacity_factor [#renewables]_
1025  *      - ``node_loc`` | ``commodity`` | ``grade`` | ``level`` | ``year``
1026  *    * - renewable_potential [#renewables]_
1027  *      - ``node`` | ``commodity`` | ``grade`` | ``level`` | ``year``
1028  *    * - emission_factor
1029  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
       ``emission``
1030  *
1031  * .. [#tecvintage] Fixed and variable cost parameters and technical specif
      ications are indexed over both
1032  *    the year of construction (vintage) and the year of operation (actual)
      .
1033  *    This allows to represent changing technology characteristics dependin
      g on the age of the plant.
1034  *
1035  * .. [#levelizedcost] The parameter ``levelized_cost`` is computed in the 
      GAMS pre-processing under the assumption of
1036  *    full capacity utilization until the end of the technical lifetime.
1037  *
1038  * .. [#construction] The construction time only has an effect on the inves
      tment costs; in |MESSAGEix|,
1039  *    each unit of new-built capacity is available instantaneously at the b
      eginning of the model period.
1040  *
1041  * .. [#rating] Maximum share of technology in commodity use per rating. Th
      e upper bound of a contribution by any technology to the constraints on sy
      stem reliability
1042  *    (:ref:`reliability_constraint`) and flexibility (:ref:`flexibility_co
      nstraint`) can depend on the share of the technology output in the total c
      ommodity use at
1043  *    a specific level.
1044  *
1045  * .. [#flexfactor] Contribution of technologies towards operation flexibil
      ity constraint. It is used in :ref:`flexibility_constraint`.
1046  *
1047  * .. [#renewables] ``renewable_capacity_factor`` refers to the quality of 
      renewable potential by grade and ``renewable_potential`` refers to the siz
      e of the renewable potential per grade.
1048  *
1049  ***
1050   
1051  Parameters
1052  * technology input-output mapping and costs parameters
1053      input(node,tec,vintage,year_all,mode,node,commodity,level,time,time)  
      relative share of input per unit of activity
1054      output(node,tec,vintage,year_all,mode,node,commodity,level,time,time) 
      relative share of output per unit of activity
1055      main_output_val(node,tec,vintage,year_all,mode,time)
1056      main_input_val(node,tec,vintage,year_all,mode,time)
1057  *    main_rel_val(relation2, node,tec,year_all,mode,time)
1058      inv_cost(node,tec,year_all)                         investment costs (
      per unit of new capacity)
1059      fix_cost(node,tec,vintage,year_all)                 fixed costs per ye
      ar (per unit of capacity maintained)
1060      var_cost(node,tec,vintage,year_all,mode,time)       variable costs of 
      operation (per unit of capacity maintained)
1061      var_cost2(node,tec,vintage,year_all,mode)       variable costs of oper
      ation (per unit of capacity maintained)
1062      levelized_cost(node,tec,year_all,time)              levelized costs (p
      er unit of new capacity)
1063   
1064  * engineering parameters
1065      construction_time(node,tec,vintage)                     duration of co
      nstruction of new capacity (in years)
1066      technical_lifetime(node,tec,vintage)                    maximum techni
      cal lifetime (from year of construction)
1067      capacity_factor(node,tec,vintage,year_all,time)         capacity facto
      r by subannual time slice
1068      operation_factor(node,tec,vintage,year_all)             yearly total o
      peration factor
1069      min_utilization_factor(node,tec,vintage,year_all)       yearly minimum
       utilization factor
1070      min_utilization_time_factor(node,inv_tec,vintage,year_all,time) time m
      inimum utilization factor
1071      rating_bin(node,tec,year_all,commodity,level,time,rating) maximum shar
      e of technology in commodity use per rating
1072      reliability_factor(node,tec,year_all,commodity,level,time,rating) reli
      ability of a technology (per rating)
1073      flexibility_factor(node,tec,vintage,year_all,mode,commodity,level,time
      ,rating) contribution of technologies towards operation flexibility constr
      aint
1074      renewable_capacity_factor(node,commodity,grade,level,year_all) quality
       of renewable potential grade (>= 1)
1075      renewable_potential(node,commodity,grade,level,year_all) size of renew
      able potential per grade
1076      emission_factor(node,tec,year_all,year_all,mode,emission) emission int
      ensity of activity
1077  ;
1078   
1079  ***
1080  * Bounds on capacity and activity
1081  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1082  *
1083  * The following parameters specify upper and lower bounds on new capacity,
       total installed capacity, and activity. The bounds
1084  * on activity are implemented as the aggregate over all vintages in a spec
      ific period (:ref:`activity_bound_up` and :ref:`activity_bound_lo`).
1085  *
1086  * .. list-table::
1087  *    :widths: 25 60
1088  *    :header-rows: 1
1089  *
1090  *    * - Parameter name
1091  *      - Index names
1092  *    * - bound_new_capacity_up
1093  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1094  *    * - bound_new_capacity_lo
1095  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1096  *    * - bound_total_capacity_up
1097  *      - ``node_loc`` | ``tec`` | ``year_act``
1098  *    * - bound_total_capacity_lo
1099  *      - ``node_loc`` | ``tec`` | ``year_act``
1100  *    * - bound_activity_up
1101  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
1102  *    * - bound_activity_lo
1103  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
1104  *
1105  ***
1106   
1107  Parameters
1108      bound_new_capacity_up(node,tec,year_all)         upper bound on new ca
      pacity
1109      bound_new_capacity_lo(node,tec,year_all)         lower bound on new ca
      pacity
1110      bound_total_capacity_up(node,tec,year_all)       upper bound on total 
      installed capacity
1111      bound_total_capacity_lo(node,tec,year_all)       lower bound on total 
      installed capacity
1112      bound_activity_up(node,tec,year_all,mode,time)   upper bound on activi
      ty (aggregated over all vintages)
1113      bound_activity_lo(node,tec,year_all,mode,time)   lower bound on activi
      ty
1114  ;
1115   
1116  ***
1117  * Dynamic constraints on capacity and activity
1118  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1119  *
1120  * The following parameters specify constraints on the growth of new capaci
      ty and activity, i.e., market penetration. The implementation of |MESSAGEi
      x|
1121  * includes the functionality for 'soft' relaxations of dynamic constraints
       on new-built capacity and activity (see Keppo and Strubegger, 2010
1122  * :cite:`keppo_short_2010`). For more information, please refer to the equ
      ations in section :ref:`dynamic_constraints` of the mathematical formulati
      on.
1123  *
1124  * .. list-table::
1125  *    :widths: 30 70
1126  *    :header-rows: 1
1127  *
1128  *    * - Parameter name
1129  *      - Index names
1130  *    * - initial_new_capacity_up
1131  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1132  *    * - growth_new_capacity_up [#mpx]_
1133  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1134  *    * - soft_new_capacity_up [#mpx]_
1135  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1136  *    * - initial_new_capacity_lo
1137  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1138  *    * - growth_new_capacity_lo [#mpx]_
1139  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1140  *    * - soft_new_capacity_lo [#mpx]_
1141  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1142  *    * - initial_activity_up [#mpa]_
1143  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1144  *    * - growth_activity_up [#mpx]_ [#mpa]_
1145  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1146  *    * - soft_activity_up [#mpx]_
1147  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1148  *    * - initial_activity_lo [#mpa]_
1149  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1150  *    * - growth_activity_lo [#mpx]_ [#mpa]_
1151  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1152  *    * - soft_activity_lo [#mpx]_
1153  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1154  *
1155  * .. [#mpx] All parameters related to the dynamic constraints are understo
      od as the bound on the rate
1156  *    of growth/decrease, not as in percentage points and not as (1+growth 
      rate).
1157  *
1158  * .. [#mpa] The dynamic constraints are not indexed over modes in the |MES
      SAGEix| implementation.
1159  *
1160  ***
1161   
1162  Parameters
1163      initial_new_capacity_up(node,tec,year_all)     dynamic upper bound on 
      new capacity (fixed initial term)
1164      growth_new_capacity_up(node,tec,year_all)      dynamic upper bound on 
      new capacity (growth rate)
1165      soft_new_capacity_up(node,tec,year_all)        soft relaxation of dyna
      mic upper bound on new capacity (growth rate)
1166   
1167      initial_new_capacity_lo(node,tec,year_all)     dynamic lower bound on 
      new capacity (fixed initial term)
1168      growth_new_capacity_lo(node,tec,year_all)      dynamic lower bound on 
      new capacity (growth rate)
1169      soft_new_capacity_lo(node,tec,year_all)        soft relaxation of dyna
      mic lower bound on new capacity (growth rate)
1170   
1171      initial_activity_up(node,tec,year_all,time)    dynamic upper bound on 
      activity (fixed initial term)
1172      growth_activity_up(node,tec,year_all,time)     dynamic upper bound on 
      activity (growth rate)
1173      soft_activity_up(node,tec,year_all,time)       soft relaxation of dyna
      mic upper bound on activity (growth rate)
1174   
1175      initial_activity_lo(node,tec,year_all,time)    dynamic lower bound on 
      activity (fixed initial term)
1176      growth_activity_lo(node,tec,year_all,time)     dynamic lower bound on 
      activity (growth rate)
1177      soft_activity_lo(node,tec,year_all,time)       soft relaxation of dyna
      mic lower bound on activity (growth rate)
1178  ;
1179   
1180  *-------------------------------------------------------------------------
      ---------------------------------------------*
1181  * Add-on technology parameters                                            
                                                   *
1182  *-------------------------------------------------------------------------
      ---------------------------------------------*
1183   
1184  ***
1185  * Parameters for the add-on technologies
1186  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1187  *
1188  * The implementation of |MESSAGEix| includes the functionality to introduc
      e "add-on technologies" that are specifically
1189  * linked to parent technologies. This feature can be used to model mitigat
      ion options (scrubber, cooling). Upper and
1190  * lower bounds of add-on technologies are defined relative to the parent: 
      ``addon_up`` and ``addon_lo``, respectively.
1191  *
1192  * .. note::
1193  *    No default ``addon_conversion`` factor (conversion factor between add
      -on and parent technology activity) is set.
1194  *    This is to avoid default conversion factors of 1 being set for techno
      logies with multiple modes, of which only a
1195  *    single mode should be linked to the add-on technology.
1196  *
1197  * .. list-table::
1198  *    :widths: 20 80
1199  *    :header-rows: 1
1200  *
1201  *    * - Parameter name
1202  *      - Index names
1203  *    * - addon_conversion
1204  *      - ``node`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``t
      ime`` | ``type_addon``
1205  *    * - addon_up
1206  *      - ``node`` | ``tec`` | ``year_act`` | ``mode`` | ``time`` | ``type_
      addon``
1207  *    * - addon_lo
1208  *      - ``node`` | ``tec`` | ``year_act`` | ``mode`` | ``time`` | ``type_
      addon``
1209  *
1210  ***
1211   
1212  Parameters
1213      addon_conversion(node,tec,vintage,year_all,mode,time,type_addon) conve
      rsion factor between add-on and parent technology activity
1214      addon_up(node,tec,year_all,mode,time,type_addon)    upper bound of add
      -on technologies relative to parent technology
1215      addon_lo(node,tec,year_all,mode,time,type_addon)    lower bound of add
      -on technologies relative to parent technology
1216  ;
1217   
1218  *-------------------------------------------------------------------------
      ---------------------------------------------*
1219  * Storage parameters
1220  *-------------------------------------------------------------------------
      ---------------------------------------------*
1221   
1222  ***
1223  * Parameters for representing storage solutions
1224  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1225  *
1226  * The |MESSAGEix| formulation includes "storage" solutions to model sub-an
      nual, inter-temporal storage of commodities in each period.
1227  * This feature can be used to model electricity storage (pumped hydro, bat
      teries, compressed air energy storage, etc.), thermal energy storage,
1228  * demand side management, and in general any technology for storing commod
      ities (gas, hydrogen, water, etc.) over sub-annual timesteps.
1229  * The user defines the chronological order of sub-annual time steps by ass
      igning a number to them in parameter ``time_order``.
1230  * This order is used by storage equations to shift the stored commodity in
       a correct timeline, e.g., from Jan through to Dec, and not vice versa.
1231  * The last sub-annual timestep is linked to the first one to close the loo
      p of the year. Parameter ``storage_initial`` is to set an initial amount
1232  * for the content of storage in any desirable timestep (optionally). This 
      initial value is a cost-free stored media that storage can discharge
1233  * in the same or following timesteps. ``storage_self_discharge`` represent
      s the self-discharge (loss) of storage as % of the level of stored media
1234  * in each timestep. This allows to model time-related losses in storage se
      parately, in addition to charging and discharging losses.
1235  *
1236  * .. list-table::
1237  *    :widths: 20 80
1238  *    :header-rows: 1
1239  *
1240  *    * - Parameter name
1241  *      - Index names
1242  *    * - storage_initial
1243  *      - ``node`` | ``tec`` | ``level`` | ``commodity`` | ``year_act`` | `
      `time``
1244  *    * - storage_self_discharge
1245  *      - ``node`` | ``tec`` | ``level`` | ``commodity`` | ``year_act`` | `
      `time``
1246  *    * - time_order
1247  *      - ``lvl_temporal`` | ``time``
1248  *
1249  ***
1250   
1251  Parameters
1252      storage_initial(node,tec,level,commodity,year_all,time)               
              initial content of storage
1253      storage_self_discharge(node,tec,level,commodity,year_all,time)        
              self-discharge (loss) of storage as % of storage level in each tim
      estep
1254      time_order(lvl_temporal,time)                                         
              sequence of subannual timesteps
1255  ;
1256   
1257  *-------------------------------------------------------------------------
      ---------------------------------------------*
1258  * Soft relaxations of dynamic constraints                                 
                                                   *
1259  *-------------------------------------------------------------------------
      ---------------------------------------------*
1260   
1261  ***
1262  * Cost parameters for 'soft' relaxations of dynamic constraints
1263  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1264  *
1265  * The implementation of |MESSAGEix| includes the functionality for 'soft' 
      relaxations of dynamic constraints on
1266  * new-built capacity and activity (see Keppo and Strubegger, 2010 :cite:`k
      eppo_short_2010`).
1267  * Refer to the section :ref:`dynamic_constraints`. Absolute cost and level
      ized cost multipliers are used
1268  * for the relaxation of upper and lower bounds.
1269  *
1270  * .. list-table::
1271  *    :widths: 20 80
1272  *    :header-rows: 1
1273  *
1274  *    * - Parameter name
1275  *      - Index names
1276  *    * - abs_cost_new_capacity_soft_up
1277  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1278  *    * - abs_cost_new_capacity_soft_lo
1279  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1280  *    * - level_cost_new_capacity_soft_up
1281  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1282  *    * - level_cost_new_capacity_soft_lo
1283  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1284  *    * - abs_cost_activity_soft_up
1285  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1286  *    * - abs_cost_activity_soft_lo
1287  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1288  *    * - level_cost_activity_soft_up
1289  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1290  *    * - level_cost_activity_soft_lo
1291  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1292  *
1293  ***
1294   
1295  Parameters
1296      abs_cost_new_capacity_soft_up(node,tec,year_all) absolute cost of dyna
      mic new capacity constraint relaxation (upwards)
1297      abs_cost_new_capacity_soft_lo(node,tec,year_all) absolute cost of dyna
      mic new capacity constraint relaxation (downwards)
1298      level_cost_new_capacity_soft_up(node,tec,year_all) levelized cost mult
      iplier of dynamic new capacity constraint relaxation (upwards)
1299      level_cost_new_capacity_soft_lo(node,tec,year_all) levelized cost mult
      iplier of dynamic new capacity constraint relaxation (downwards)
1300   
1301      abs_cost_activity_soft_up(node,tec,year_all,time)  absolute cost of dy
      namic activity constraint relaxation (upwards)
1302      abs_cost_activity_soft_lo(node,tec,year_all,time)  absolute cost of dy
      namic activity constraint relaxation (downwards)
1303      level_cost_activity_soft_up(node,tec,year_all,time) levelized cost mul
      tiplier of dynamic activity constraint relaxation (upwards)
1304      level_cost_activity_soft_lo(node,tec,year_all,time) levelized cost mul
      tiplier of dynamic activity constraint relaxation (downwards)
1305  ;
1306   
1307  ***
1308  * Historical capacity and activity values
1309  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1310  *
1311  * Historical data on new capacity and activity levels are included in |MES
      SAGEix| for
1312  * correct accounting of the vintage portfolio and a seamless implementatio
      n of dynamic constraints from
1313  * historical years to model periods.
1314  *
1315  * .. list-table::
1316  *    :widths: 35 65
1317  *    :header-rows: 1
1318  *
1319  *    * - Parameter name
1320  *      - Index names
1321  *    * - historical_new_capacity [#hist]_
1322  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1323  *    * - historical_activity [#hist]_
1324  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
1325  *
1326  ***
1327   
1328  Parameters
1329      historical_new_capacity(node,tec,year_all)           historical new ca
      pacity
1330      historical_activity(node,tec,year_all,mode,time)     historical activi
      ty
1331  ;
1332   
1333  ***
1334  * Auxiliary investment cost parameters and multipliers
1335  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1336  *
1337  * Auxiliary investment cost parameters include the remaining technical lif
      etime at the end of model horizon (``beyond_horizon_lifetime``) in additio
      n to the
1338  * different scaling factors and multipliers as listed below. These factors
       account for remaining capacity (``remaining_capacity``) or construction t
      ime of new capacity (``construction_time_factor``),
1339  * the value of investment at the end of model horizon (``end_of_horizon_fa
      ctor``) or the discount factor of remaining lifetime beyond model horizon 
      (``beyond_horizon_factor``).
1340  *
1341  * .. list-table::
1342  *    :widths: 35 50
1343  *    :header-rows: 1
1344  *
1345  *    * - Parameter name
1346  *      - Index names
1347  *    * - construction_time_factor
1348  *      - ``node`` | ``tec`` | ``year``
1349  *    * -  remaining_capacity
1350  *      - ``node`` | ``tec`` | ``year``
1351  *    * - end_of_horizon_factor
1352  *      - ``node`` | ``tec`` | ``year``
1353  *    * - beyond_horizon_lifetime
1354  *      - ``node`` | ``tec`` | ``year``
1355  *    * - beyond_horizon_factor
1356  *      - ``node`` | ``tec`` | ``year``
1357  *
1358  *
1359  ***
1360   
1361  Parameters
1362      construction_time_factor(node,tec,year_all) scaling factor to account 
      for construction time of new capacity
1363      remaining_capacity(node,tec,year_all,year_all) scaling factor to accou
      nt for remaining capacity in period
1364      end_of_horizon_factor(node,tec,year_all)    multiplier for value of in
      vestment at end of model horizon
1365      beyond_horizon_lifetime(node,tec,year_all)  remaining technical lifeti
      me at the end of model horizon
1366      beyond_horizon_factor(node,tec,year_all)    discount factor of remaini
      ng lifetime beyond model horizon
1367  ;
1368   
1369  *-------------------------------------------------------------------------
      ---------------------------------------------*
1370  * Emissions                                                               
                                                   *
1371  *-------------------------------------------------------------------------
      ---------------------------------------------*
1372   
1373  ***
1374  * Parameters of the `Emission` section
1375  * ------------------------------------
1376  *
1377  * The implementation of |MESSAGEix| includes a flexible and versatile acco
      unting of emissions across different
1378  * categories and species, with the option to define upper bounds and taxes
       on various (aggregates of) emissions
1379  * and pollutants, (sets of) technologies, and (sets of) years.
1380  *
1381  * .. list-table::
1382  *    :widths: 25 75
1383  *    :header-rows: 1
1384  *
1385  *    * - Parameter name
1386  *      - Index dimensions
1387  *    * - historical_emission [#hist]_
1388  *      - ``node`` | ``emission`` | ``type_tec`` | ``year``
1389  *    * - emission_scaling [#em_scaling]_
1390  *      - ``type_emission`` | ``emission``
1391  *    * - bound_emission
1392  *      - ``node`` | ``type_emission`` | ``type_tec`` | ``type_year``
1393  *    * - tax_emission
1394  *      - ``node`` | ``type_emission`` | ``type_tec`` | ``type_year``
1395  *
1396  * .. [#em_scaling] The parameter ``emission_scaling`` is the scaling facto
      r to harmonize bounds or taxes across types of
1397  *    emissions. It allows to efficiently aggregate different emissions/pol
      lutants and set bounds or taxes on various categories.
1398  *
1399  ***
1400   
1401  Parameters
1402      historical_emission(node,emission,type_tec,year_all)    historical emi
      ssions by technology type (including land)
1403      emission_scaling(type_emission,emission)                scaling factor
       to harmonize bounds or taxes across types
1404      bound_emission(node,type_emission,type_tec,type_year)   upper bound on
       emissions
1405      tax_emission(node,type_emission,type_tec,type_year)     emission tax
1406  ;
1407   
1408  *-------------------------------------------------------------------------
      ---------------------------------------------*
1409  * Land-use model emulator                                                 
                                                   *
1410  *-------------------------------------------------------------------------
      ---------------------------------------------*
1411   
1412  ***
1413  * Parameters of the `Land-Use model emulator` section
1414  * ---------------------------------------------------
1415  *
1416  * The implementation of |MESSAGEix| includes a land-use model emulator, wh
      ich draws on exogenous land-use scenarios
1417  * (provided by another model) to derive supply of commodities (e.g., bioma
      ss) and emissions
1418  * from agriculture and forestry. The parameters listed below refer to the 
      assigned land scenario.
1419  *
1420  * .. list-table::
1421  *    :widths: 25 75
1422  *    :header-rows: 1
1423  *
1424  *    * - Parameter name
1425  *      - Index dimensions
1426  *    * - historical_land [#hist]_
1427  *      - ``node`` | ``land_scenario`` | ``year``
1428  *    * - land_cost
1429  *      - ``node`` | ``land_scenario`` | ``year``
1430  *    * - land_input
1431  *      - ``node`` | ``land_scenario`` | ``year`` | ``commodity`` | ``level
      `` | ``time``
1432  *    * - land_output
1433  *      - ``node`` | ``land_scenario`` | ``year`` | ``commodity`` | ``level
      `` | ``time``
1434  *    * - land_use
1435  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1436  *    * - land_emission
1437  *      - ``node`` | ``land_scenario`` | ``year`` | ``emission``
1438  *    * - initial_land_scen_up
1439  *      - ``node`` | ``land_scenario`` | ``year``
1440  *    * - growth_land_scen_up
1441  *      - ``node`` | ``land_scenario`` | ``year``
1442  *    * - initial_land_scen_lo
1443  *      - ``node`` |  ``land_scenario`` | ``year``
1444  *    * - growth_land_scen_lo
1445  *      - ``node`` | ``land_scenario`` | ``year``
1446  *    * - initial_land_up
1447  *      - ``node`` | ``year`` | ``land_type``
1448  *    * - dynamic_land_up
1449  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1450  *    * - growth_land_up
1451  *      - ``node`` | ``year`` | ``land_type``
1452  *    * - initial_land_lo
1453  *      - ``node`` | ``year`` | ``land_type``
1454  *    * - dynamic_land_lo
1455  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1456  *    * - growth_land_lo
1457  *      - ``node`` | ``year`` | ``land_type``
1458  *
1459  ***
1460   
1461  Parameters
1462      historical_land(node,land_scenario,year_all)            historical lan
      d scenario assignment
1463      land_cost(node,land_scenario,year_all)                  costs of land-
      use scenario
1464      land_input(node,land_scenario,year_all,commodity,level,time) commodity
       input requirement of land-use scenario
1465      land_output(node,land_scenario,year_all,commodity,level,time) commodit
      y output (yield) of land-use scenario
1466      land_use(node,land_scenario,year_all,land_type)         land type used
       in specific scenario
1467      land_emission(node,land_scenario,year_all,emission)     emissions from
       land-use scenario
1468      initial_land_scen_up(node,land_scenario,year_all)       initial bound 
      on land-scenario change (upwards)
1469      growth_land_scen_up(node,land_scenario,year_all)        relative bound
       on land-scenario change (upwards)
1470      initial_land_scen_lo(node,land_scenario,year_all)       initial bound 
      on land-scenario change (downwards)
1471      growth_land_scen_lo(node,land_scenario,year_all)        relative bound
       on land-scenario change (downwards)
1472      initial_land_up(node,year_all,land_type)                initial bound 
      on land-type use change (upwards)
1473      dynamic_land_up(node,land_scenario,year_all,land_type)  absolute bound
       on land-type use change (upwards)
1474      growth_land_up(node,year_all,land_type)                 relative bound
       on land-type use change (upwards)
1475      initial_land_lo(node,year_all,land_type)                initial bound 
      on land-type use change (downwards)
1476      dynamic_land_lo(node,land_scenario,year_all,land_type)  absolute bound
       on land-type use change (upwards)
1477      growth_land_lo(node,year_all,land_type)                 relative bound
       on land-type use change (downwards)
1478  ;
1479   
1480  *-------------------------------------------------------------------------
      ---------------------------------------------*
1481  * Share constraints                                                       
                                                   *
1482  *-------------------------------------------------------------------------
      ---------------------------------------------*
1483   
1484  ***
1485  * Parameters of the `Share Constraints` section
1486  * ---------------------------------------------
1487  *
1488  * Share constraints define the share of a given commodity/mode to be activ
      e on a certain level. For the mathematical
1489  * formulation, refer to :ref:`share_constraints`.
1490  *
1491  * .. list-table::
1492  *    :widths: 25 75
1493  *    :header-rows: 1
1494  *
1495  *    * - Parameter name
1496  *      - Index dimensions
1497  *    * - share_commodity_up
1498  *      - ``shares`` | ``node_share`` | ``year_act`` | ``time``
1499  *    * - share_commodity_lo
1500  *      - ``shares`` | ``node`` | ``year_act`` | ``time``
1501  *    * - share_mode_up
1502  *      - ``shares`` | ``node_loc`` | ``technology`` | ``mode`` | ``year_ac
      t`` | ``time``
1503  *    * - share_mode_lo
1504  *      - ``shares`` | ``node_loc`` | ``technology`` | ``mode`` | ``year_ac
      t`` | ``time``
1505  *
1506  ***
1507   
1508  Parameters
1509      share_commodity_up(shares,node,year_all,time)    upper bound of commod
      ity share constraint
1510      share_commodity_lo(shares,node,year_all,time)    lower bound of commod
      ity share constraint
1511      share_mode_up(shares,node,tec,mode,year_all,time)    upper bound of mo
      de share constraint
1512      share_mode_lo(shares,node,tec,mode,year_all,time)    lower bound of mo
      de share constraint
1513  ;
1514   
1515  *-------------------------------------------------------------------------
      ---------------------------------------------*
1516  * Generic linear relations                                                
                                             *
1517  *-------------------------------------------------------------------------
      ---------------------------------------------*
1518   
1519  ***
1520  * Parameters of the `Relations` section
1521  * -------------------------------------
1522  *
1523  * Generic linear relations are implemented in |MESSAGEix|. This feature is
       intended for development and testing only - all new features
1524  * should be implemented as specific new mathematical formulations and asso
      ciated *sets* & *parameters*. For the formulation of the relations,
1525  * refer to :ref:`section_of_generic_relations`.
1526  *
1527  * .. list-table::
1528  *    :widths: 25 75
1529  *    :header-rows: 1
1530  *
1531  *    * - Parameter name
1532  *      - Index dimensions
1533  *    * - relation_upper
1534  *      - ``relation`` | ``node_rel`` | ``year_rel``
1535  *    * - relation_lower
1536  *      - ``relation`` | ``node_rel`` | ``year_rel``
1537  *    * - relation_cost
1538  *      - ``relation`` | ``node_rel`` | ``year_rel``
1539  *    * - relation_new_capacity
1540  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``tec``
1541  *    * - relation_total_capacity
1542  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``tec``
1543  *    * - relation_activity
1544  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``node_loc`` | ``tec
      `` | ``year_act`` | ``mode``
1545  *
1546  ***
1547   
1548  Parameters
1549      relation_upper(relation,node,year_all)    upper bound of generic relat
      ion
1550      relation_lower(relation,node,year_all)    lower bound of generic relat
      ion
1551      relation_cost(relation,node,year_all)     cost of investment and activ
      ities included in generic relation
1552      relation_new_capacity(relation,node,year_all,tec)   new capacity facto
      r (multiplier) of generic relation
1553      relation_total_capacity(relation,node,year_all,tec) total capacity fac
      tor (multiplier) of generic relation
1554      relation_activity(relation,node,year_all,node,tec,year_all,mode) activ
      ity factor (multiplier) of generic relation
1555  *new relation parameters
1556      relation_upper2(relation2,node,year_all)    upper bound of generic rel
      ation
1557      relation_lower2(relation2,node,year_all)    lower bound of generic rel
      ation
1558      relation_cost2(relation2,node,year_all)     cost of investment and act
      ivities included in generic relation
1559      relation_new_capacity2(relation2,node,year_all,tec)   new capacity fac
      tor (multiplier) of generic relation
1560      relation_total_capacity2(relation2,node,year_all,tec) total capacity f
      actor (multiplier) of generic relation
1561      relation_activity2(relation2,node,year_all,node,tec,year_all,mode) act
      ivity factor (multiplier) of generic relation
1562  ;
1563   
1564  *-------------------------------------------------------------------------
      ---------------------------------------------*
1565  * Fixed variable values                                                   
                                                   *
1566  *-------------------------------------------------------------------------
      ---------------------------------------------*
1567   
1568  ***
1569  * Fixed variable values
1570  * ---------------------
1571  *
1572  * The following parameters allow to set variable values to a specific valu
      e.
1573  * The value is usually taken from a solution of another model instance
1574  * (e.g., scenarios where a shock sets in later to mimic imperfect foresigh
      t).
1575  *
1576  * The fixed values do not override any upper or lower bounds that may be d
      efined,
1577  * so fixing variables to values outside of that range will yield an infeas
      ible model.
1578  *
1579  * .. list-table::
1580  *    :widths: 25 75
1581  *    :header-rows: 1
1582  *
1583  *    * - Parameter name
1584  *      - Index dimensions
1585  *    * - fixed_extraction
1586  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
1587  *    * - fixed_stock
1588  *      - ``node`` | ``commodity`` | ``level`` | ``year``
1589  *    * - fixed_new_capacity
1590  *      - ``node`` | ``technology`` | ``year_vtg``
1591  *    * - fixed_capacity
1592  *      - ``node`` | ``technology`` | ``year_vtg`` | ``year_act``
1593  *    * - fixed_activity
1594  *      - ``node`` | ``technology`` | ``year_vtg`` | ``year_act`` | ``mode`
      ` | ``time``
1595  *    * - fixed_land
1596  *      - ``node`` | ``land_scenario`` | ``year``
1597  *
1598  * Note that the variable :math:`STOCK\_CHG` is determined implicitly by th
      e :math:`STOCK` variable
1599  * and therefore does not need to be explicitly fixed.
1600  ***
1601   
1602  Parameters
1603      fixed_extraction(node,commodity,grade,year_all)     fixed extraction l
      evel
1604      fixed_stock(node,commodity,level,year_all)          fixed stock level
1605      fixed_new_capacity(node,tec,year_all)               fixed new-built ca
      pacity
1606      fixed_capacity(node,tec,vintage,year_all)           fixed maintained c
      apacity
1607      fixed_activity(node,tec,vintage,year_all,mode,time) fixed activity lev
      el
1608      fixed_land(node,land_scenario,year_all)             fixed land level
1609  ;
1610   
1611  *-------------------------------------------------------------------------
      ---------------------------------------------*
1612  * Auxiliary reporting parameters                                          
                                                   *
1613  *-------------------------------------------------------------------------
      ---------------------------------------------*
1614   
1615  ***
1616  * Auxiliary reporting parameters
1617  * ------------------------------
1618  *
1619  * The following parameters are used for reporting (post-processing) solved
       models. They assign monetary value to
1620  * the `net` total system costs from trading and emission taxes (``total_co
      st``). Morevoer, they also assign a value
1621  * to the `total` trade of commodities (the difference between the revenues
       from exports and the costs of imports,
1622  * ``trade_cost``) and to the costs from importing (``import_cost``) and th
      e revenues from exporting (``export_cost``)
1623  * in each node and year.
1624  *
1625  * .. list-table::
1626  *    :widths: 25 75
1627  *    :header-rows: 1
1628  *
1629  *    * - Parameter name
1630  *      - Index dimensions
1631  *    * - total_cost
1632  *      - ``node`` | ``year``
1633  *    * - trade_cost
1634  *      - ``node`` | ``year``
1635  *    * - import_cost
1636  *      - ``node`` | ``commodity`` | ``year``
1637  *    * - export_cost
1638  *      - ``node`` | ``commodity`` | ``year``
1639  ***
1640   
1641  Parameters
1642      trade_cost(node, year_all)              net of commodity import costs 
      and commodity export revenues by node and year
1643      import_cost(node, commodity, year_all)  import costs by commodity and 
      node and year
1644      export_cost(node, commodity, year_all)  export revenues by commodity a
      nd node and year
1645  ;
1646   
1647  *-------------------------------------------------------------------------
      ---------------------------------------------*
1648  * Auxiliary parameters for GAMS workflow                                  
                                                   *
1649  *-------------------------------------------------------------------------
      ---------------------------------------------*
1650   
1651  Parameters
1652      ctr               counter parameter for loops
1653      status(*,*)       model solution status parameter for log writing
1654  ;
1655   
1656  ** load data from gdx, run processing scripts of auxiliary parameters
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE/data_loa
           d.gms
1657  $INCLUDE MESSAGE/data_load.gms
1658   
1659  *-------------------------------------------------------------------------
      ---------------------------------------------*
1660  * load sets and parameters from dataset gdx                               
                                                   *
1661  *-------------------------------------------------------------------------
      ---------------------------------------------*
1662   
1663  put_utility 'log' /"+++ Importing data from 'data/MsgData_BLUES_Brasil_1.9
      9_IX_79_15C_wCost.gdx'... +++ " ;
1664   
1665  * all sets and general parameters from the gdx file
GDXIN   D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\data/MsgData_BLUES_
        Brasil_1.99_IX_79_15C_wCost.gdx
1666  $GDXIN 'data/MsgData_BLUES_Brasil_1.99_IX_79_15C_wCost.gdx'
--- LOAD  node = 3:node
--- LOAD  tec = 4:technology
--- LOAD  year_all = 2:year
--- LOAD  commodity = 20:commodity
--- LOAD  level = 19:level
--- LOAD  grade = 18:grade
--- LOAD  mode = 17:mode
--- LOAD  time = 10:time
--- LOAD  rating = 21:rating
1667  $LOAD node, tec=technology, year_all=year, commodity, level, grade, mode, 
      time, rating
--- LOAD  emission = 6:emission
--- LOAD  land_scenario = 7:land_scenario
--- LOAD  land_type = 8:land_type
--- LOAD  relation = 5:relation
1668  $LOAD emission, land_scenario, land_type, relation
--- LOAD  level_resource = 38:level_resource
--- LOAD  level_renewable = 39:level_renewable
1669  $LOAD level_resource, level_renewable
--- LOAD  lvl_spatial = 9:lvl_spatial
--- LOAD  lvl_temporal = 11:lvl_temporal
--- LOAD  map_spatial_hierarchy = 28:map_spatial_hierarchy
--- LOAD  map_temporal_hierarchy = 30:map_temporal_hierarchy
1670  $LOAD lvl_spatial, lvl_temporal, map_spatial_hierarchy, map_temporal_hiera
      rchy
--- LOAD  map_node = 29:map_node
--- LOAD  map_time = 31:map_time
--- LOAD  map_commodity = 59:map_commodity
--- LOAD  map_resource = 57:map_resource
--- LOAD  map_stocks = 58:map_stocks
--- LOAD  map_tec = 60:map_tec
--- LOAD  map_tec_time = 62:map_tec_time
--- LOAD  map_tec_mode = 61:map_tec_mode
1671  $LOAD map_node, map_time, map_commodity, map_resource, map_stocks, map_tec
      , map_tec_time, map_tec_mode
--- LOAD  map_land = 64:map_land
--- LOAD  map_relation = 63:map_relation
1672  $LOAD map_land, map_relation
--- LOAD  type_tec = 13:type_tec
--- LOAD  cat_tec = 33:cat_tec
--- LOAD  type_year = 14:type_year
--- LOAD  cat_year = 34:cat_year
--- LOAD  type_emission = 15:type_emission
--- LOAD  cat_emission = 35:cat_emission
--- LOAD  type_tec_land = 36:type_tec_land
1673  $LOAD type_tec, cat_tec, type_year, cat_year, type_emission, cat_emission,
       type_tec_land
--- LOAD  inv_tec = 65:inv_tec
--- LOAD  renewable_tec = 66:renewable_tec
1674  $LOAD inv_tec, renewable_tec
1675  *$LOAD inv_tec, renewable_tec, no_er_tec
--- LOAD  balance_equality = 46:balance_equality
1676  $LOAD balance_equality
--- LOAD  shares = 22:shares
1677  $LOAD shares
--- LOAD  addon = 43:addon
--- LOAD  type_addon = 23:type_addon
--- LOAD  cat_addon = 44:cat_addon
--- LOAD  map_tec_addon = 45:map_tec_addon
1678  $LOAD addon, type_addon, cat_addon, map_tec_addon
--- LOAD  storage_tec = 25:storage_tec
--- LOAD  level_storage = 24:level_storage
--- LOAD  map_tec_storage = 47:map_tec_storage
1679  $LOAD storage_tec, level_storage, map_tec_storage
1680  * loading new parameters and sets
--- LOAD  BLUES_land_tec = 53:BLUES_land_tec
--- LOAD  BLUES_sec_land_tec = 54:BLUES_sec_land_tec
--- LOAD  BLUES_type_land_tec = 27:BLUES_type_land_tec
--- LOAD  BLUES_cat_land_tec = 55:BLUES_cat_land_tec
--- LOAD  map_BLUES_land_rel = 56:map_BLUES_land_rel
1681  $LOAD BLUES_land_tec, BLUES_sec_land_tec, BLUES_type_land_tec, BLUES_cat_l
      and_tec, map_BLUES_land_rel
--- LOAD  relation2 = 26:relation2
1682  $LOAD relation2
--- LOAD  map_relation2 = 48:map_relation2
--- LOAD  map_tec_vtg_act = 52:map_tec_vtg_act
--- LOAD  map_tec_vtg = 51:map_tec_vtg
1683  $LOAD map_relation2, map_tec_vtg_act, map_tec_vtg
1684  $GDXIN
1685   
1686  Execute_load 'data/MsgData_BLUES_Brasil_1.99_IX_79_15C_wCost.gdx'
1687  * general parameters
1688  duration_period, duration_period2, duration_time, interestrate, emission_d
      uration_period
1689  * resources parameters
1690  resource_volume, resource_cost, is_bound_extraction_up, bound_extraction_u
      p, resource_remaining,
1691  * technology technical-engineering parameters and economic costs
1692  input, output, construction_time, technical_lifetime,
1693  main_output_val,
1694  main_input_val,
1695  *main_rel_val,
1696  min_utilization_time_factor,
1697  capacity_factor, operation_factor, min_utilization_factor,  inv_cost, fix_
      cost, var_cost, var_cost2,
1698  * upper and lower bounds on new capacity investment, total installed capac
      ity and activity (including mapping sets)
1699  is_bound_new_capacity_up, is_bound_new_capacity_lo, bound_new_capacity_up,
       bound_new_capacity_lo,
1700  is_bound_total_capacity_up, is_bound_total_capacity_lo, bound_total_capaci
      ty_up, bound_total_capacity_lo,
1701  is_bound_activity_up, bound_activity_up, bound_activity_lo,
1702  * dynamic constraints on new capacity investment and activity of technolog
      ies
1703  is_dynamic_new_capacity_up, initial_new_capacity_up, growth_new_capacity_u
      p,
1704  is_dynamic_new_capacity_lo, initial_new_capacity_lo, growth_new_capacity_l
      o,
1705  is_dynamic_activity_up, initial_activity_up, growth_activity_up,
1706  is_dynamic_activity_lo, initial_activity_lo, growth_activity_lo,
1707  * parameters for soft relaxation of dynamic constraints
1708  abs_cost_new_capacity_soft_up, abs_cost_new_capacity_soft_lo, level_cost_n
      ew_capacity_soft_up, level_cost_new_capacity_soft_lo,
1709  abs_cost_activity_soft_up, abs_cost_activity_soft_lo, level_cost_activity_
      soft_up, level_cost_activity_soft_lo,
1710  soft_new_capacity_up, soft_new_capacity_lo, soft_activity_up, soft_activit
      y_lo,
1711  * share constraints
1712  map_shares_commodity_share,map_shares_commodity_total,share_commodity_up,s
      hare_commodity_lo
1713  share_mode_up,share_mode_lo,
1714  * addon technologies
1715  addon_conversion, addon_up, addon_lo
1716  * parameters for reliability, flexibility and renewable potential constrai
      nts
1717  rating_bin, reliability_factor, peak_load_factor, flexibility_factor
1718  renewable_capacity_factor, renewable_potential
1719  * emission factors, bounds and taxes on emissions (including mapping sets)
1720  historical_emission, emission_factor, emission_scaling, is_bound_emission,
       bound_emission, tax_emission,
1721  * historical values of new capacity investment, activity and extraction
1722  historical_new_capacity, historical_activity, historical_extraction
1723  * parameters for land-use model emulator
1724  historical_land, land_cost, land_input, land_output, land_use, land_emissi
      on,
1725  is_dynamic_land_scen_up, initial_land_scen_up, growth_land_scen_up,
1726  is_dynamic_land_scen_lo, initial_land_scen_lo, growth_land_scen_lo,
1727  is_dynamic_land_up, initial_land_up, dynamic_land_up, growth_land_up,
1728  is_dynamic_land_lo, initial_land_lo, dynamic_land_lo, growth_land_lo, grow
      th_land_lo,
1729  * parameters for generic relations (linear constraints)
1730  is_relation_upper, is_relation_lower, relation_upper, relation_lower,
1731  relation_cost, relation_total_capacity, relation_new_capacity, relation_ac
      tivity,
1732  * parameters for generic relations 2 (linear constraints)
1733  is_relation_upper2, is_relation_lower2, relation_upper2, relation_lower2,
1734  relation_cost2, relation_total_capacity2, relation_new_capacity2, relation
      _activity2,
1735  * energy stocks
1736  commodity_stock,
1737  * demand parameters
1738  demand_fixed=demand
1739  * fixing variables to pre-specified values
1740  is_fixed_extraction, is_fixed_stock, is_fixed_new_capacity, is_fixed_capac
      ity, is_fixed_activity, is_fixed_land
1741  fixed_extraction, fixed_stock, fixed_new_capacity, fixed_capacity, fixed_a
      ctivity, fixed_land
1742  * storage parameters
1743  storage_initial, storage_self_discharge, time_order
1744  ;
1745   
1746   
1747  *-------------------------------------------------------------------------
      ---------------------------------------------*
1748  * ensure that each node is mapped to itself                               
                                                   *
1749  *-------------------------------------------------------------------------
      ---------------------------------------------*
1750   
1751  map_node(node,node) = yes ;
1752   
1753  *-------------------------------------------------------------------------
      ---------------------------------------------*
1754  * auxiliary mappings for the implementation of bounds over all modes and s
      ystem reliability/flexibility constraints    *
1755  *-------------------------------------------------------------------------
      ---------------------------------------------*
1756   
1757  Set all_modes (mode) ;
1758  all_modes('all') = yes ;
1759   
1760  Set rating_unfirm(rating) ;
1761  rating_unfirm(rating) = yes ;
1762  rating_unfirm('firm') = no ;
1763   
1764  Set rating_unrated(rating) ;
1765  rating_unrated(rating) = yes ;
1766  rating_unrated('unrated') = no ;
1767   
1768  *-------------------------------------------------------------------------
      ---------------------------------------------*
1769  * assignment and computation of MESSAGE-specific auxiliary parameters     
                                                   *
1770  *-------------------------------------------------------------------------
      ---------------------------------------------*
1771   
1772  * get assignment of auxiliary parameter for period mappings and duration
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\includes/period_
           parameter_assignment.gms
1773  $INCLUDE includes/period_parameter_assignment.gms
1774  *-------------------------------------------------------------------------
      ---------------------------------------------*
1775  * assignment and computation of auxiliary parameters                      
                                                   *
1776  *-------------------------------------------------------------------------
      ---------------------------------------------*
1777   
1778  * additional sets and parameters created in GAMS to make notation more con
      cise for myopic/rolling-horizon optimization
1779  Sets
1780      historical(year_all)             set of periods prior to the start of 
      the model horizon
1781      model_horizon(year_all)          set of periods included in the model 
      horizon
1782      macro_horizon(year_all)          set of periods included in the MACRO 
      model horizon
1783      seq_period(year_all,year_all2)    mapping of one period ('year_all') t
      o the next ('year_all2')
1784      map_period(year_all,year_all2)    mapping of one period ('year_all') t
      o itself and all subsequent periods ('year_all2')
1785      map_first_period(type_year, year_all) mapping of a 'type_year' to the 
      first 'year'
1786      first_period(year_all)           flag for first period in model horizo
      n
1787      last_period(year_all)            flag for last period in model horizon
1788      macro_initial_period(year_all)   flag for period in model horizon in w
      hich to initialize model parameters in (period prior to first model period
      ) - used in MACRO
1789      macro_base_period(year_all)      flag for base year period in model ho
      rizon (period prior to first model period) - used in MACRO
1790  ;
1791   
1792  Parameter
1793      duration_period_sum(year_all,year_all2) number of years between two pe
      riods ('year_all' must precede 'year_all2')
1794      duration_time_rel(time,time2)         relative duration of subannual t
      ime period ('time2' relative to parent 'time')
1795      elapsed_years(year_all)    elapsed years since the start of the model 
      horizon (not including 'year_all' period)
1796      remaining_years(year_all)  remaining years until the end of the model 
      horizon (including last period)
1797      year_order(year_all)       order for members of set 'year_all'
1798  ;
1799  *-------------------------------------------------------------------------
      ---------------------------------------------*
1800  * assignment auxiliary dynamic sets                                       
                                                   *
1801  *-------------------------------------------------------------------------
      ---------------------------------------------*
1802   
1803  ** treatment of periods **
1804   
1805  * sanity checks to ensure that not more than one period is assigned to the
       first- and lastyear categories
1806  if ( sum(year_all$( cat_year("firstmodelyear",year_all) ), 1 ) > 1 ,
1807      abort "There is more than one period assigned as category 'firstmodely
      ear'!" ) ;
1808  if ( sum(year_all$( cat_year("lastmodelyear",year_all) ), 1 ) > 1 ,
1809      abort "There is more than one period assigned as category 'lastmodelye
      ar'!" ) ;
1810  if ( sum(year_all$( cat_year("initializeyear_macro",year_all) ), 1 ) > 1 ,
1811      abort "There is more than one period assigned as category 'initializey
      ear_macro'!" ) ;
1812   
1813  * mapping of sequence of periods over the model horizon
1814  seq_period(year_all,year_all2)$( ORD(year_all) + 1 = ORD(year_all2) ) = ye
      s ;
1815  map_period(year_all,year_all2)$( ORD(year_all) <= ORD(year_all2) ) = yes ;
1816   
1817  display seq_period
1818   
1819  * dynamic sets (singleton) with first and last periods in model horizon of
       MESSAGEix (for easier reference)
1820  if ( sum(year_all$( cat_year("firstmodelyear",year_all) ), 1 ),
1821      first_period(year_all)$( cat_year("firstmodelyear",year_all) ) = yes ;
1822  else
1823      first_period(year_all)$( ORD(year_all) eq 1 ) = yes ;
1824  ) ;
1825  if ( sum(year_all$( cat_year("lastmodelyear",year_all) ), 1 ),
1826      last_period(year_all)$( cat_year("lastmodelyear",year_all) ) = yes;
1827  else
1828      last_period(year_all)$( ORD(year_all) = CARD(year_all) ) = yes ;
1829  ) ;
1830   
1831  * dynamic sets for MACRO initialization and base periods
1832  macro_initial_period(year_all) = no ;
1833  macro_initial_period(year_all)$( cat_year("initializeyear_macro",year_all)
       ) = yes ;
1834  macro_base_period(year_all) = no ;
1835  macro_base_period(year_all)$( ORD(year_all) = sum(year_all2$( first_period
      (year_all2) ), ORD(year_all2) - 1 ) )  = yes ;
1836   
1837  * assign set of historical years, the model horizon and the MACRO hoizon (
      includes 'macro_base_period')
1838  historical(year_all)$( ORD(year_all) < sum(year_all2$cat_year("firstmodely
      ear",year_all2), ORD(year_all2) ) ) = yes ;
1839  model_horizon(year_all) = no ;
1840  model_horizon(year_all)$( ORD(year_all) >= sum(year_all2$first_period(year
      _all2), ORD(year_all2) )
1841      AND ORD(year_all) <= sum(year_all2$last_period(year_all2), ORD(year_al
      l2) ) ) = yes ;
1842  macro_horizon(year_all) = no ;
1843  macro_horizon(year_all)$macro_base_period(year_all) = yes;
1844  macro_horizon(year_all)$model_horizon(year_all) = yes;
1845   
1846  *-------------------------------------------------------------------------
      ---------------------------------------------*
1847  * assignment of (cumulative) discount factors over time                   
                                                   *
1848  *-------------------------------------------------------------------------
      ---------------------------------------------*
1849   
1850  * simple method to compute discount factor (but this approach implicitly a
      ssumes a constant interest rate)
1851  *df_year(year_all) = POWER( 1 / ( 1+interestrate(year_all) ), sum(year_all
      2$( ORD(year_all2) < ORD(year_all) ),
1852  *    duration_period2(year_all2) ) ) ;
1853   
1854  * compute per-year discount factor (using a recursive method) - set to 1 b
      y default (interest rate = 0)
1855  df_year(year_all) = 1 ;
1856   
1857  * recursively compute the per-year discount factor
1858  loop(year_all$( ORD(year_all) > 1 ),
1859      df_year(year_all) =
1860          sum(year_all2$( seq_period(year_all2,year_all) ), df_year(year_all
      2)
1861              * POWER( 1 / ( 1 + interestrate(year_all) ), duration_period2(
      year_all) ) ) ;
1862  ) ;
1863   
1864  * multiply per-year discount factor by discounted period duration
1865  *df_period(year_all) =
1866  *    round(df_year(year_all) * (
1867  * multiply the per-year discount factor by the geometric series of over th
      e duration of the period
1868  *        ( ( 1 - POWER( 1 / ( 1 + interestrate(year_all) ), duration_perio
      d2(year_all) ) )
1869  *      / ( 1 - 1 / ( 1 + interestrate(year_all) ) ) )$( interestrate(year_
      all) )
1870  * if interest rate = 0, multiply by the number of years in that period
1871  *        + ( duration_period2(year_all) )$( interestrate(year_all) eq 0 ) 
      ), 6)
1872  *;
1873   
1874  * multiply per-year discount factor by discounted period duration
1875  df_period(year_all) =
1876      df_year(year_all) * (
1877  * multiply the per-year discount factor by the geometric series of over th
      e duration of the period
1878          ( ( POWER( 1 + interestrate(year_all) , duration_period2(year_all)
       ) - 1 )
1879          / interestrate(year_all) )$( interestrate(year_all) )
1880  * if interest rate = 0, multiply by the number of years in that period
1881          + ( duration_period2(year_all) )$( interestrate(year_all) eq 0 ) )
1882  ;
1883  *display duration_period;
1884  *display df_period;
1885   
1886  *-------------------------------------------------------------------------
      ---------------------------------------------*
1887  * assignment of auxiliary first-period-per-category mapping and parameters
       for duration of periods                     *
1888  *-------------------------------------------------------------------------
      ---------------------------------------------*
1889   
1890  * define order of set 'year_all' (to use as equivalent of ORD operator on 
      the dynamic set year (subset of 'year_all') )
1891  year_order(year_all) = ORD(year_all) ;
1892   
1893  * assign the first year of each category to a specific mapping set for use
       in computing emissions prices
1894  map_first_period(type_year,year_all)$( cat_year(type_year,year_all)
1895      AND year_order(year_all) = SMIN(year_all2$( cat_year(type_year,year_al
      l2) ), year_order(year_all2) ) ) = yes ;
1896   
1897  * auxiliary parameters for duration between periods (years) - not includin
      g the final period 'year_all2'
1898  *  the original ORD(year_all) <= ORD(year_all3) AND ORD(year_all3) < ORD(y
      ear_all2)
1899  duration_period_sum(year_all,year_all2) =
1900      SUM(year_all3$( ORD(year_all) <= ORD(year_all3) AND ORD(year_all3) < O
      RD(year_all2) ) , duration_period2(year_all3) ) ;
1901  * the above one is the original the below one is the mod
1902  *    SUM(year_all3$( ORD(year_all) <= ORD(year_all3) AND ORD(year_all3) < 
      ORD(year_all2) ) , duration_period2(year_all3) ) ;
1903  *display duration_period_sum;
1904   
1905  * auxiliary parameter for duration since the first year of the model horiz
      on - not including the period 'year_all'
1906  elapsed_years(year_all) = sum(first_period, duration_period_sum(first_peri
      od,year_all) ) ;
1907  *display elapsed_years;
1908  *display last_period;
1909   
1910  * auxiliary parameter for duration until the end of the model horizon - in
      cluding the last period
1911  *the original value is <=
1912  remaining_years(year_all) = SUM(year_all2$( ORD(year_all) <= ORD(year_all2
      ) ) , duration_period2(year_all2) ) ;
1913  *remaining_years(last_period) = duration_period2(last_period);
1914  *remaining_years(last_period) = 0;
1915  *display remaining_years;
1916  *display interestrate;
1917   
1918  * compute auxiliary parameters for relative duration of subannual time per
      iods
1919  duration_time_rel(time,time2)$( map_time(time,time2) ) = duration_time(tim
      e2) / duration_time(time) ;
1920   
1921  * assign an additional mapping set for technologies to nodes, modes and su
      bannual time slices (for shorter reference)
1922  map_tec_act(node,tec,year_all,mode,time)$( map_tec_time(node,tec,year_all,
      time) AND
1923     map_tec_mode(node,tec,year_all,mode) ) = yes ;
1924   
1925  * mapping of technology lifetime to all 'current' periods (for all non-inv
      estment technologies)
1926  *map_tec_lifetime(node,tec,vintage,year_all)$( map_tec_vtg_act(node,tec,vi
      ntage,year_all) ) = yes ;
1927  *the equation above was manually modified the one below is the original on
      e
1928  map_tec_lifetime(node,tec,year_all,year_all)$( map_tec(node,tec,year_all) 
      ) = yes ;
1929   
1930  * mapping of technology lifetime to all periods 'year_all' which are withi
      n the economic lifetime
1931  * (if built in period 'vintage')
1932  *map_tec_lifetime(node,tec,vintage,year_all)$( map_tec_vtg_act(node,tec,vi
      ntage,year_all)
1933  *the equation above was manually modified the one below is the original on
      e
1934  map_tec_lifetime(node,tec,vintage,year_all)$( map_tec(node,tec,vintage) AN
      D map_tec(node,tec,year_all)
1935      AND map_period(vintage,year_all)
1936      AND duration_period_sum(vintage,year_all) < technical_lifetime(node,te
      c,vintage) ) = yes ;
1937   
1938  * mapping of technology lifetime to all periods 'year_all' which were buil
      t prior to the beginning of the model horizon
1939  map_tec_lifetime(node,tec,historical,year_all)$( map_tec(node,tec,year_all
      ) AND map_period(historical,year_all)
1940      AND historical_new_capacity(node,tec,historical)
1941      AND duration_period_sum(historical,year_all)
1942  *        < sum(first_period, technical_lifetime(node,tec,first_period) ) )
       = yes ;
1943          <= technical_lifetime(node,tec,historical) ) = yes ;
1944   
1945  display map_tec;
1946  display map_period;
1947  display historical_new_capacity;
1948  display duration_period_sum;
1949  display first_period;
1950  display technical_lifetime;
1951  *Parameter aa(node,tec,year_all);
1952  *aa(node,tec,year_all)=sum(first_period, technical_lifetime(node,tec,first
      _period) );
1953   
1954   
1955  * mapping of renewable technologies to their input commodities
1956  map_ren_com(node,renewable_tec,commodity,year_all)$(
1957      SUM((node2,year_all2,mode,level_renewable,time_act,time),
1958          input(node2,renewable_tec,year_all,year_all2,mode,node,commodity,l
      evel_renewable,time_act,time) ) ) = yes;
1959   
1960  * mapping of renewable commodities to grades
1961  map_ren_grade(node,commodity,grade,year_all)$(
1962      SUM(level_renewable, renewable_potential(node,commodity,grade,level_re
      newable,year_all) ) ) = yes;
1963   
1964  * mapping of technologies to commodities and ratings
1965  map_rating(node,inv_tec,commodity,level,rating,year_all)$(
1966      SUM(time, reliability_factor(node,inv_tec,year_all,commodity,level,tim
      e,rating) ) ) = yes;
1967   
1968  * set the default capacity factor for technologies where no parameter valu
      e is provided in the input data
1969  capacity_factor(node,tec,year_all2,year_all,time)$( map_tec_time(node,tec,
      year_all,time)
1970      AND map_tec_lifetime(node,tec,year_all2,year_all) AND NOT capacity_fac
      tor(node,tec,year_all2,year_all,time) ) = 1 ;
1971   
1972  * assign the yearly average capacity factor (used in equation OPERATION_CO
      NSTRAINT)
1973  capacity_factor(node,tec,year_all2,year_all,'year') =
1974      sum(time$map_tec_time(node,tec,year_all,time), duration_time(time)
1975          * capacity_factor(node,tec,year_all2,year_all,time) ) ;
1976   
1977  * set the default operation factor for technologies where no parameter val
      ue is provided in the input data
1978  operation_factor(node,tec,year_all2,year_all)$( map_tec(node,tec,year_all)
1979      AND map_tec_lifetime(node,tec,year_all2,year_all) AND NOT operation_fa
      ctor(node,tec,year_all2,year_all) ) = 1 ;
1980   
1981  * set the upper bound on addon-technology activity to 1 by default
1982  addon_up(node,tec,year_all,mode,time,type_addon)$(
1983      map_tec_addon(tec,type_addon)
1984      AND map_tec_act(node,tec,year_all,mode,time)
1985      AND NOT addon_up(node,tec,year_all,mode,time,type_addon) ) = 1 ;
1986   
1987  * set the emission scaling parameter to 1 if only one emission is included
       in a category
1988  emission_scaling(type_emission,emission)$( cat_emission(type_emission,emis
      sion)
1989          and not emission_scaling(type_emission,emission) ) = 1 ;
1990   
1991  * mapping of storage technologies to their level and commodity (can be dif
      ferent from level and commodity of storage media)
1992  map_time_commodity_storage(node,tec,level,commodity,mode,year_all,time)$( 
      storage_tec(tec) AND
1993      SUM( (node2,year_all2,time_act), input(node2,tec,year_all,year_all2,mo
      de,node,commodity,level,time_act,time) ) ) = yes;
1994   
1995  * mapping of sequence of sub-annual timesteps in a period and temporal lev
      el
1996  map_time_period(year_all,lvl_temporal,time,time2)$( time_order(lvl_tempora
      l,time) AND
1997       time_order(lvl_temporal,time) + 1 = time_order(lvl_temporal,time2) ) 
      = yes;
1998   
1999  * mapping of sequence of the last sub-annual timestep to the first to crea
      te a close the order of timesteps
2000  map_time_period(year_all,lvl_temporal,time,time2)$( time_order(lvl_tempora
      l,time) AND
2001       time_order(lvl_temporal,time) = SMAX(time3,time_order(lvl_temporal,ti
      me3) ) AND time_order(lvl_temporal,time2) = 1 ) = yes;
2002  *-------------------------------------------------------------------------
      ---------------------------------------------*
2003  * sanity checks on the data set                                           
                                                   *
2004  *-------------------------------------------------------------------------
      ---------------------------------------------*
2005   
2006  Parameter check ;
2007   
2008  * check whether all relevant technology/vintage/year combinations have pos
      itove input/output values assigned
2009  *loop((node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year
      _all) ),
2010  *    if ( sum( (mode,node2,commodity,level,time,time2),
2011  *            input(node,tec,vintage,year_all,mode,node2,commodity,level,ti
      me,time2)
2012  *            + output(node,tec,vintage,year_all,mode,node2,commodity,level
      ,time,time2) ) eq 0 ,
2013  *        put_utility 'log'/" Warning: No input or output not defined for '
      "node.tl:0"|"tec.tl:0"|"vintage.tl:0"|"year_all.tl:0"' !" ;
2014  *    ) ;
2015  *) ;
2016   
2017  * check that the economic and technical lifetime are defined and consisten
      t for all investment technologies
2018  loop((node,inv_tec,year_all)$( map_tec_vtg(node,inv_tec,year_all ) ),
2019      if ( technical_lifetime(node,inv_tec,year_all) <= 0 ,
2020          put_utility 'log'/" Error: Technical lifetime not defined for '"no
      de.tl:0"|"inv_tec.tl:0"|"year_all.tl:0"' !" ;
2021          check = 1 ;
2022  *loop((node,inv_tec,model_horizon)$( map_tec(node,inv_tec,model_horizon) )
      ,
2023  *    if ( technical_lifetime(node,inv_tec,model_horizon) <= 0 ,
2024  *        put_utility 'log'/" Error: Technical lifetime not defined for '"n
      ode.tl:0"|"inv_tec.tl:0"|"model_horizon.tl:0"' !" ;
2025  *        check = 1 ;
2026      ) ;
2027  ) ;
2028  if (check,
2029      abort "There is a problem with the definition of the technical lifetim
      e!" ;
2030  ) ;
2031   
2032  * check for validity of temporal resolution
2033  *round was manually added
2034  loop(lvl_temporal,
2035      loop(time2$( sum(time, map_temporal_hierarchy(lvl_temporal,time,time2)
       ) ),
2036          check = 1$( round( sum( time$( map_temporal_hierarchy(lvl_temporal
      ,time,time2) ),
2037              duration_time(time) ), 4) ne duration_time(time2) ) ;
2038      ) ;
2039  ) ;
2040  if (check,
2041      abort "There is a problem in the definition of the temporal resolution
      !" ;
2042  );
2043   
2044  * check that the resources-remaining parameter is in the interval (0,1]
2045  loop( (node,commodity,grade,year_all)$( map_resource(node,commodity,grade,
      year_all)
2046          AND resource_remaining(node,commodity,grade,year_all) ),
2047      if( ( resource_remaining(node,commodity,grade,year_all) > 1
2048              or resource_remaining(node,commodity,grade,year_all) <= 0 ),
2049          put_utility 'log'/" Error: Inconsistent value of parameter 'resour
      ces_remaining' "
2050              "for '"node.tl:0"|"commodity.tl:0"|"grade.tl:0"|"year_all.tl:0
       "' !" ;
2051          check = 1 ;
2052      ) ;
2053  ) ;
2054  if (check,
2055      abort "There is a problem with the parameter 'resources_remaining'!" ;
2056  ) ;
2057   
2058  * check that the sum of rating bins (if used for firm-cacpacity or flexibi
      lity) is greater than 1
2059  loop( (node,tec,year_all,commodity,level,time)$(
2060      ( sum((vintage,rating_unfirm), reliability_factor(node,tec,year_all,co
      mmodity,level,time,rating_unfirm) )
2061      OR sum((vintage,mode,rating_unrated)$(
2062          flexibility_factor(node,tec,vintage,year_all,mode,commodity,level,
      time,rating_unrated) ), 1 ) )
2063      ),
2064      if ( ( sum( rating, rating_bin(node,tec,year_all,commodity,level,time,
      rating) ) < 1 ),
2065          put_utility 'log'/" Error: Insufficient rating bin assignment ' "
2066              "for '"node.tl:0"|"tec.tl:0"|"year_all.tl:0 "'" ;
2067          check = 1 ;
2068      ) ;
2069  ) ;
2070  if (check,
2071      abort "There is a problem with assignment of rating bins!" ;
2072  ) ;
2073   
2074  ** compute auxiliary parameters for capacity and investment cost accountin
      g
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE/scaling_
           investment_costs.gms
2075  $INCLUDE MESSAGE/scaling_investment_costs.gms
2076  ***
2077  * Auxiliary investment parameters
2078  * ===============================
2079  *
2080  ***
2081   
2082  * compute the scaling investment parameters for all periods in the model h
      orizon
2083  year(year_all)$( model_horizon(year_all) ) = yes ;
2084   
2085  * compute the technical lifetime remaining beyond the overall model horizo
      n
2086  beyond_horizon_lifetime(node,inv_tec,vintage)$( map_tec(node,inv_tec,vinta
      ge) ) =
2087      technical_lifetime(node,inv_tec,vintage) - remaining_years(vintage) ;
2088  beyond_horizon_lifetime(node,inv_tec,vintage)$( beyond_horizon_lifetime(no
      de,inv_tec,vintage) < 0 ) = 0 ;
2089   
2090  ***
2091  * Levelized capital costs
2092  * -----------------------
2093  * For the 'soft' relaxations of the dynamic constraints and the associated
       penalty factor in the objective function,
2094  * we need to compute the parameter :math:`levelized\_cost_{n,t,y}`.
2095  *
2096  * .. math::
2097  *    levelized\_cost_{n,t,m,y,h} := \
2098  *        & inv\_cost_{n,t,y} \cdot \frac{ interestrate_{y} \cdot \left( 1 
      + interestrate_{y} \right)^{|y|} }
2099  *                                      { \left( 1 + interestrate_{y} \righ
      t)^{|y|} - 1 } \\
2100  *        & + fix\_cost_{n,t,y,y} \cdot \frac{ 1 }{ \sum_{h'} duration\_tim
      e_{h'} \cdot capacity\_factor_{n,t,y,y,h'} } \\
2101  *        & + var\_cost_{n,t,y,y,m,h}
2102  *
2103  * where :math:`|y| = technical\_lifetime_{n,t,y}`. This formulation implic
      itly assumes constant fixed
2104  * and variable costs over time.
2105  *
2106  * **Warning:** All soft relaxations of the dynamic activity constraint are
2107  * disabled if the levelized costs are negative!
2108  ***
2109   
2110  levelized_cost(node,tec,year,time)$( map_tec_time(node,tec,year,time) AND 
      inv_tec(tec) ) =
2111      inv_cost(node,tec,year)
2112          * (
2113  * compute discounted annualized investment costs if interest rate > 0
2114              ( interestrate(year)
2115                  * ( 1 + interestrate(year) ) ** technical_lifetime(node,te
      c,year)
2116                  / ( ( 1 + interestrate(year) ) ** technical_lifetime(node,
      tec,year) - 1 )
2117                )$( interestrate(year) )
2118  * if interest rate = 0, annualized investment costs are total investment c
      osts divided by technical lifetime
2119              + ( 1 / technical_lifetime(node,tec,year) )$( interestrate(yea
      r) eq 0 )
2120            )
2121  * add (proportional) fixed and variable costs, assuming that these remain 
      constant over the technical lifetime
2122      + ( fix_cost(node,tec,year,year) /
2123            sum(time2$( map_tec_time(node,tec,year,time2) ),
2124               duration_time(time2) * capacity_factor(node,tec,year,year,tim
      e2) )
2125          )$( fix_cost(node,tec,year,year) )
2126  *    + sum(mode$( map_tec_act(node,tec,year,mode,time) ), var_cost(node,te
      c,year,year,mode,time))
2127      + sum(mode$( map_tec_act(node,tec,year,mode,time) ), var_cost(node,tec
      ,year,year,mode,time) *  duration_time(time) *  main_output_val(node,tec,y
      ear,year,mode,time)  )
2128  *    + sum(mode$( map_tec_act(node,tec,year,mode,time) ), var_cost2(node,t
      ec,year,year,mode) )
2129  ;
2130   
2131  * the soft relaxations of the dynamic activity constraints are disabled if
       the levelized costs are negative
2132  loop((node,tec,year,time)$( levelized_cost(node,tec,year,time) < 0
2133          AND ( soft_activity_up(node,tec,year,time) + soft_activity_lo(node
      ,tec,year,time) ) > 0 ),
2134      put_utility 'log' /'Remove relaxations for dynamic activity constraint
      s for ',node.tl,'|',tec.tl,'|',year.tl,'!' ;
2135      soft_activity_up(node,tec,year,time) = 0 ;
2136      soft_activity_lo(node,tec,year,time) = 0 ;
2137  ) ;
2138   
2139  ***
2140  * Construction time accounting
2141  * ----------------------------
2142  * If the construction of new capacity takes a significant amount of time,
2143  * investment costs have to be scaled up accordingly to account for the hig
      her capital costs.
2144  *
2145  * .. math::
2146  *    construction\_time\_factor_{n,t,y} = \left( 1 + interestrate_y \right
      )^{|y|}
2147  *
2148  * where :math:`|y| = construction\_time_{n,t,y}`. If no construction time 
      is specified, the default value of the
2149  * investment cost scaling factor defaults to 1. The model assumes that the
       construction time only plays a role
2150  * for the investment costs, i.e., each unit of new-built capacity is avail
      able instantaneously.
2151  *
2152  * **Comment:** This formulation applies the discount rate of the vintage y
      ear
2153  * (i.e., the year in which the new capacity becomes operational).
2154  ***
2155   
2156  * set default construction_time_factor to 1
2157  construction_time_factor(node,inv_tec,year)$( map_tec(node,inv_tec,year) )
       = 1;
2158   
2159  * compute the construction_time_factor
2160  construction_time_factor(node,inv_tec,year)$( map_tec(node,inv_tec,year) A
      ND construction_time(node,inv_tec,year) ) =
2161       ( 1 + interestrate(year) ) ** construction_time(node,inv_tec,year) ;
2162   
2163  ***
2164  * Investment costs beyond the model horizon
2165  * -----------------------------------------
2166  * If the technical lifetime of a technology exceeds the model horizon :mat
      h:`Y^{model}`, the model has to add
2167  * a scaling factor to the investment costs (:math:`end\_of\_horizon\_facto
      r_{n,t,y}`). Assuming a constant
2168  * stream of revenue (marginal value of the capacity constraint), this can 
      be computed by annualizing investment costs
2169  * from the condition that in an optimal solution, the investment costs mus
      t equal the discounted future revenues,
2170  * if the investment variable :math:`CAP\_NEW_{n,t,y} > 0`:
2171  *
2172  * .. math::
2173  *    inv\_cost_{n,t,y^V} = \sum_{y \in Y^{lifetime}_{n,t,y^V}} df\_year_{y
      } \cdot \beta_{n,t},
2174  *
2175  * Here, :math:`\beta_{n,t} > 0` is the dual variable to the capacity const
      raint (assumed constant over future periods)
2176  * and :math:`Y^{lifetime}_{n,t,y^V}` is the set of periods in the lifetime
       of a plant built in period :math:`y^V`.
2177  * Then, the scaling factor :math:`end\_of\_horizon\_factor_{n,t,y^V}` can 
      be derived as follows:
2178  *
2179  * .. math::
2180  *    end\_of\_horizon\_factor_{n,t,y^V} :=
2181  *    \frac{\sum_{y \in Y^{lifetime}_{n,t,y^V} \cap Y^{model}} df\_year_{y}
       }
2182  *        {\sum_{y' \in Y^{lifetime}_{n,t,y^V}} df\_year_{y'} + beyond\_hor
      izon\_factor_{n,t,y^V} }
2183  *    \in (0,1],
2184  *
2185  * where the parameter :math:`beyond\_horizon\_factor_{n,t,y^V}` accounts f
      or the discount factor beyond the
2186  * overall model horizon (the set :math:`Y` in contrast to the set :math:`Y
      ^{model} \subseteq Y` of the periods
2187  * included in the current model iteration (see the page on the recursive-d
      ynamic model solution approach).
2188  *
2189  * .. math::
2190  *    beyond\_horizon\_lifetime_{n,t,y^V} :=  \max \Big\{ 0,
2191  *        economic\_lifetime_{n,t,y^V} - \sum_{y' \geq y^V} duration\_perio
      d_{y'} \Big\}
2192  *
2193  * .. math::
2194  *    beyond\_horizon\_factor_{n,t,y^V} :=
2195  *        df\_year_{\widehat{y}} \cdot \frac{1}{ \left( 1 + interestrate_{\
      widehat{y}} \right)^{|\widehat{y}|} }
2196  *        \cdot \frac{ 1 - \left( \frac{1}{1 + interestrate_{\widehat{y}}} 
      \right)^{|\widetilde{y}|}}
2197  *                   { 1 - \frac{1}{1 + interestrate_{\widehat{y}}}}
2198  *
2199  * where :math:`\widehat{y}` is the last period included in the overall mod
      el horizon,
2200  * :math:`|\widehat{y}| = period\_duration\_period_{\widehat{y}}`
2201  * and :math:`|\widetilde{y}| = beyond\_horizon\_lifetime_{n,t,y^V}`.
2202  *
2203  * If the interest rate is zero, i.e., :math:`interestrate_{\widehat{y}} = 
      0`,
2204  * the parameter :math:`beyond\_horizon\_factor_{n,t,y^V}` equals the remai
      ning technical lifetime
2205  * beyond the model horizon and the parameter :math:`end\_of\_horizon\_fact
      or_{n,t,y^V}` equals
2206  * the share of technical lifetime within the model horizon.
2207  ***
2208   
2209  * compute the cumulative discount factor of the technical lifetime remaini
      ng beyond the model horizon
2210  beyond_horizon_factor(node,inv_tec,vintage)$( beyond_horizon_lifetime(node
      ,inv_tec,vintage) )
2211      = sum(last_period,
2212  * compute the discount factor of the very last year (not period) in the mo
      del horizon
2213          df_year(last_period) * POWER( 1 / ( 1 + interestrate(last_period) 
      ), duration_period2(last_period) ) * (
2214  * multiply this by the geometric series of remaining technical lifetime if
       interestrate of last model period > 0
2215              (
2216                  ( 1 - POWER( 1 / ( 1 + interestrate(last_period) ), beyond
      _horizon_lifetime(node,inv_tec,vintage) ) )
2217                  / ( 1 - 1 / ( 1 + interestrate(last_period) ) )
2218              )$( interestrate(last_period) )
2219  * if interest rate = 0, multiply by remaining technical lifetime
2220              + ( beyond_horizon_lifetime(node,inv_tec,vintage) )$( interest
      rate(last_period) eq 0 )
2221          )
2222      ) ;
2223   
2224  * deterine the parameter end_of_horizon_factor used for scaling investment
       costs to account for
2225  * technical lifetime beyond the model horizon
2226  end_of_horizon_factor(node,inv_tec,vintage)$( map_tec(node,inv_tec,vintage
      ) ) =
2227      sum(year_all$( map_tec_lifetime(node,inv_tec,vintage,year_all) ), df_p
      eriod(year_all)  )
2228      / ( sum(year_all$( map_tec_lifetime(node,inv_tec,vintage,year_all) ), 
      df_period(year_all) )
2229          + beyond_horizon_factor(node,inv_tec,vintage) ) ;
2230   
2231  ***
2232  * **Possible extension:** Instead of assuming :math:`\beta_{n,t}` to be co
      nstant over time, one could include
2233  * a simple (linear) projection of :math:`\beta_{n,t,y}` beyond the end of 
      the model horizon. However, this would likely
2234  * require to include the computation of dual variables endogenously, and t
      hus a mixed-complementarity formulation of
2235  * the model.
2236  ***
2237   
2238  ***
2239  * Remaining installed capacity
2240  * ----------------------------
2241  * The model has to take into account that the technical lifetime of a tech
      nology may not coincide with the cumulative
2242  * period duration. Therefore, the model introduces the parameter :math:`re
      maining\_capacity_{n,t,y^V,y}`
2243  * as a factor of remaining technical lifetime in the last period of operat
      ion divided by the duration of that period.
2244  *
2245  ***
2246   
2247  # set default to 1 (assume that the full capacity is available over the en
      tire period)
2248  remaining_capacity(node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,
      vintage,year_all) ) = 1 ;
2249   
2250  # if technical lifetime ends in the respective period, set remaining_capac
      ity factor as share of lifetime in that period
2251  remaining_capacity(node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,
      vintage,year_all)
2252          AND ( technical_lifetime(node,tec,vintage) - duration_period_sum(v
      intage,year_all) < duration_period2(year_all) )
2253          AND ( technical_lifetime(node,tec,vintage) - duration_period_sum(v
      intage,year_all) > 0 ) )
2254      = ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage
      ,year_all) ) / duration_period2(year_all) ;
2255   
2256  # set default to 1 (assume that the full capacity is available over the en
      tire period)
2257  remaining_capacity(node,tec,historical,first_period)$( map_tec_lifetime(no
      de,tec,historical,first_period) ) = 1 ;
2258   
2259   
2260  * unassign the dynamic set 'year'
2261  year(year_all) = no;
2262   
2263  *-------------------------------------------------------------------------
      ---------------------------------------------*
2264  * variable and equation definition, model declaration                     
                                                   *
2265  *-------------------------------------------------------------------------
      ---------------------------------------------*
2266   
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE/model_co
           re.gms
2267  $INCLUDE MESSAGE/model_core.gms
2268  ***
2269  * MESSAGE core formulation
2270  * ========================
2271  *
2272  * The |MESSAGEix| systems-optimization model minimizes total costs
2273  * while satisfying given demand levels for commodities/services
2274  * and considering a broad range of technical/engineering constraints and s
      ocietal restrictions
2275  * (e.g. bounds on greenhouse gas emissions, pollutants, system reliability
      ).
2276  * Demand levels are static (i.e. non-elastic), but the demand response can
       be integrated by linking |MESSAGEix|
2277  * to the single sector general-economy MACRO model included in this framew
      ork.
2278  *
2279  * For the complete list of sets, mappings and parameters,
2280  * refer to the auto-documentation pages :ref:`sets_maps_def` and :ref:`par
      ameter_def`.
2281  * The mathematical notation that is used to represent sets and mappings in
       the equations below
2282  * can also be found in the tables in :ref:`sets_maps_def`.
2283  ***
2284   
2285  *-------------------------------------------------------------------------
      ---------------------------------------------*
2286  * Variable definitions                                                    
                                                   *
2287  *-------------------------------------------------------------------------
      ---------------------------------------------*
2288   
2289  ***
2290  * Variable definitions
2291  * --------------------
2292  *
2293  * Decision variables
2294  * ^^^^^^^^^^^^^^^^^^
2295  * ======================================================== ===============
      =====================================================================
2296  * Variable                                                 Explanatory tex
      t
2297  * ======================================================== ===============
      =====================================================================
2298  * :math:`OBJ \in \mathbb{R}`                               Objective value
       of the optimization program
2299  * :math:`EXT_{n,c,g,y} \in \mathbb{R}_+`                   Extraction of n
      on-renewable/exhaustible resources from reserves
2300  * :math:`STOCK_{n,c,l,y} \in \mathbb{R}_+`                 Quantity in sto
      ck (storage) at start of period :math:`y`
2301  * :math:`STOCK\_CHG_{n,c,l,y,h} \in \mathbb{R}`            Input or output
       quantity into intertemporal commodity stock (storage)
2302  * :math:`COST\_NODAL_{n,y} \in \mathbb{R}`                 System costs at
       the node level over time
2303  * :math:`REN_{n,t,c,g,y,h} \in \mathbb{R}_+`               Activity of ren
      ewable technologies per grade
2304  * :math:`CAP\_NEW_{n,t,y} \in \mathbb{R}_+`                Newly installed
       capacity (yearly average over period duration)
2305  * :math:`CAP_{n,t,y^V,y} \in \mathbb{R}_+`                 Maintained capa
      city in year :math:`y` of vintage :math:`y^V`
2306  * :math:`CAP\_FIRM_{n,t,c,l,y,q} \in \mathbb{R}_+`         Capacity counti
      ng towards firm (dispatchable)
2307  * :math:`ACT_{n,t,y^V,y,m,h} \in \mathbb{R}`               Activity of a t
      echnology (by vintage, mode, subannual time)
2308  * :math:`ACT\_RATING_{n,t,y^V,y,c,l,h,q} \in \mathbb{R}_+` Auxiliary varia
      ble for activity attributed to a particular rating bin [#ACT_RATING]_
2309  * :math:`CAP\_NEW\_UP_{n,t,y} \in \mathbb{R}_+`            Relaxation of u
      pper dynamic constraint on new capacity
2310  * :math:`CAP\_NEW\_LO_{n,t,y} \in \mathbb{R}_+`            Relaxation of l
      ower dynamic constraint on new capacity
2311  * :math:`ACT\_UP_{n,t,y,h} \in \mathbb{R}_+`               Relaxation of u
      pper dynamic constraint on activity [#ACT_BD]_
2312  * :math:`ACT\_LO_{n,t,y,h} \in \mathbb{R}_+`               Relaxation of l
      ower dynamic constraint on activity [#ACT_BD]_
2313  * :math:`LAND_{n,s,y} \in [0,1]`                           Relative share 
      of land-use scenario (for land-use model emulator)
2314  * :math:`EMISS_{n,e,\widehat{t},y} \in \mathbb{R}`         Auxiliary varia
      ble for aggregate emissions by technology type
2315  * :math:`REL_{r,n,y} \in \mathbb{R}`                       Auxiliary varia
      ble for left-hand side of relations (linear constraints)
2316  * :math:`COMMODITY\_USE_{n,c,l,y} \in \mathbb{R}`          Auxiliary varia
      ble for amount of commodity used at specific level
2317  * :math:`COMMODITY\_BALANCE_{n,c,l,y,h} \in \mathbb{R}`    Auxiliary varia
      ble for right-hand side of :ref:`commodity_balance`
2318  * :math:`STORAGE_{n,t,l,c,y,h} \in \mathbb{R}`             State of charge
       or content of storage at each sub-annual timestep
2319  * :math:`STORAGE\_CHARGE_{n,t,l,c,y,h} \in \mathbb{R}`     Charging of sto
      rage in each sub-annual timestep (negative for discharging)
2320  * ======================================================== ===============
      =====================================================================
2321  *
2322  * The index :math:`y^V` is the year of construction (vintage) wherever it 
      is necessary to
2323  * clearly distinguish between year of construction and the year of operati
      on.
2324  *
2325  * All decision variables are by year, not by (multi-year) period, except :
      math:`STOCK_{n,c,l,y}`.
2326  * In particular, the new capacity variable :math:`CAP\_NEW_{n,t,y}` has to
       be multiplied by the number of years
2327  * in a period :math:`|y| = duration\_period_{y}` to determine the availabl
      e capacity in subsequent periods.
2328  * This formulation gives more flexibility when it comes to using periods o
      f different duration
2329  * (more intuitive comparison across different periods).
2330  *
2331  * The current model framework allows both input or output normalized formu
      lation.
2332  * This will affect the parametrization, see Section :ref:`efficiency_outpu
      t` for more details.
2333  *
2334  * .. [#ACT_RATING] The auxiliary variable :math:`ACT\_RATING_{n,t,y^V,y,c,
      l,h,q}` is defined in terms of input or
2335  *    output of the technology.
2336  *
2337  * .. [#ACT_BD] The dynamic activity constraints are implemented as summed 
      over all modes;
2338  *    therefore, the variables for the relaxation are not indexed over the 
      set ``mode``.
2339  *
2340  ***
2341   
2342  Variables
2343      OBJ objective value of the optimisation problem
2344  ;
2345   
2346  Positive Variables
2347  * resource production/extraction variable
2348      EXT(node,commodity,grade,year_all)   extraction of fossil resources
2349  * commodity in inter-temporal stock
2350      STOCK(node,commodity,level,year_all) total quantity in intertemporal s
      tock (storage)
2351  * use of renewable resources
2352      REN(node, tec, commodity, grade, year_all, time)     activity of renew
      ables specified per renewables grade
2353  * investment and capacity variables
2354      CAP_NEW(node,tec,year_all)       new capacity by year
2355      CAP(node,tec,vintage,year_all)   total installed capacity by year
2356      CAP_FIRM(node,tec,commodity,level,year_all) capacity counting towards 
      system reliability constraints
2357  * auxiliary variable for distributing total activity of a technology to a 
      number of "rating bins"
2358      ACT_RATING(node,tec,vintage,year_all,commodity,level,time,rating)
2359  * variables for soft relaxation of dynamic activity constraints
2360      CAP_NEW_UP(node,tec,year_all)    relaxation variable for dynamic const
      raints on new capacity (upwards)
2361      CAP_NEW_LO(node,tec,year_all)    relaxation variable for dynamic const
      raints on new capacity (downwards)
2362      ACT_UP(node,tec,year_all,time)   relaxation variable for dynamic const
      raints on activity (upwards)
2363      ACT_LO(node,tec,year_all,time)   relaxation variable for dynamic const
      raints on activity (downwards)
2364  * land-use model emulator
2365      LAND(node,land_scenario,year_all) relative share of land-use scenario
2366  * content of storage
2367      STORAGE(node,tec,level,commodity,year_all,time)       state of charge 
      (SoC) of storage at each sub-annual timestep (positive)
2368  *    EMISSV(node,emission,type_tec,year_all)       aggregate emissions by 
      technology type and land-use model emulator
2369  ;
2370   
2371  Variables
2372  * intertemporal stock variables (input or output quantity into the stock)
2373      STOCK_CHG(node,commodity,level,year_all,time) annual input into and ou
      tput from stocks of commodities
2374  * technology activity variables (can be negative for some technologies, up
      per and lower bounds stated explicitly)
2375      ACT(node,tec,vintage,year_all,mode,time)     activity of technology by
       mode-year-timeperiod
2376  * auxiliary variables for finrm-capacity formulation
2377      COMMODITY_USE(node,commodity,level,year_all) total amount of a commodi
      ty & level that was used or consumed
2378  * nodal system costs over time
2379      COST_NODAL(node, year_all)                   system costs at the node 
      level over time
2380  * auxiliary variable for aggregate emissions by technology type and land-u
      se model emulator
2381      EMISS(node,emission,type_tec,year_all)       aggregate emissions by te
      chnology type and land-use model emulator
2382  * auxiliary variable for left-hand side of relations (linear constraints)
2383      REL(relation,node,year_all)                  auxiliary variable for le
      ft-hand side of user-defined relations
2384      REL2(relation2,node,year_all)                  auxiliary variable for 
      left-hand side of user-defined relations
2385  * change in the content of storage device
2386      STORAGE_CHARGE(node,tec,level,commodity,year_all,time)    charging of 
      storage in each timestep (negative for discharge)
2387  ;
2388   
2389  ***
2390  * Auxiliary variables
2391  * ^^^^^^^^^^^^^^^^^^^
2392  * ==================================================================== ===
      ==========================================================================
      =========================
2393  * Variable                                                             Exp
      lanatory text
2394  * ==================================================================== ===
      ==========================================================================
      =========================
2395  * :math:`DEMAND_{n,c,l,y,h} \in \mathbb{R}`                            Dem
      and level (in equilibrium with MACRO integration)
2396  * :math:`PRICE\_COMMODITY_{n,c,l,y,h} \in \mathbb{R}`                  Com
      modity price (undiscounted marginals of :ref:`commodity_balance_gt` and :r
      ef:`commodity_balance_lt`)
2397  * :math:`PRICE\_EMISSION_{n,\widehat{e},\widehat{t},y} \in \mathbb{R}` Emi
      ssion price (undiscounted marginals of :ref:`emission_constraint`)
2398  * :math:`COST\_NODAL\_NET_{n,y} \in \mathbb{R}`                        Sys
      tem costs at the node level net of energy trade revenues/cost
2399  * :math:`GDP_{n,y} \in \mathbb{R}`                                     Gro
      ss domestic product (GDP) in market exchange rates for MACRO reporting
2400  * ==================================================================== ===
      ==========================================================================
      =========================
2401  *
2402  ***
2403   
2404  Variables
2405  * auxiliary variables for demand, prices, costs and GDP (for reporting whe
      n MESSAGE is run with MACRO)
2406      DEMAND(node,commodity,level,year_all,time) demand
2407      PRICE_COMMODITY(node,commodity,level,year_all,time)  commodity price (
      derived from marginals of COMMODITY_BALANCE constraint)
2408      PRICE_EMISSION(node,type_emission,type_tec,year_all) emission price (d
      erived from marginals of EMISSION_BOUND constraint)
2409      COST_NODAL_NET(node,year_all)              system costs at the node le
      vel over time including effects of energy trade
2410      GDP(node,year_all)                         gross domestic product (GDP
      ) in market exchange rates for MACRO reporting
2411  ;
2412   
2413  *-------------------------------------------------------------------------
      ---------------------------------------------*
2414  * auxiliary bounds on activity variables (debugging mode, avoid inter-vint
      age arbitrage, investment technology)                                     
                         *
2415  *-------------------------------------------------------------------------
      ---------------------------------------------*
2416   
2417  * include upper and lower bounds (to avoid unbounded models)
2418  * ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,te
      c,year_all,year_all2)
2419  *    AND map_tec_act(node,tec,year_all2,mode,time) ) = -1e9 ;
2420  * ACT.up(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,te
      c,year_all,year_all2)
2421  *    AND map_tec_act(node,tec,year_all2,mode,time) ) = 1e9 ;
2422   
2423  * to avoid "inter-vintage arbitrage" (across different vintages of technol
      ogies), all activities that
2424  * have positive lower bounds are assumed to be non-negative
2425  ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,
      year_all,year_all2)
2426      AND map_tec_act(node,tec,year_all2,mode,time) AND bound_activity_lo(no
      de,tec,year_all2,mode,time) >= 0 ) = 0 ;
2427  * previous implementation using upper bounds
2428  * ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,te
      c,year_all,year_all2)
2429  *    AND map_tec_act(node,tec,year_all2,mode,time)
2430  *    AND ( NOT bound_activity_up(node,tec,year_all2,mode,time)
2431  *        OR bound_activity_up(node,tec,year_all2,mode,time) >= 0 ) ) = 0 ;
2432   
2433  * assume that all "investment" technologies must have non-negative activit
      y levels
2434  ACT.lo(node,inv_tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,
      inv_tec,year_all,year_all2)
2435      AND map_tec_act(node,inv_tec,year_all2,mode,time) ) = 0 ;
2436   
2437  *-------------------------------------------------------------------------
      ---------------------------------------------*
2438  * fixing variables to pre-specified values                                
                                                   *
2439  *-------------------------------------------------------------------------
      ---------------------------------------------*
2440   
2441  EXT.fx(node,commodity,grade,year_all)$( is_fixed_extraction(node,commodity
      ,grade,year_all) ) =
2442      fixed_extraction(node,commodity,grade,year_all);
2443  STOCK.fx(node,commodity,level,year_all)$( is_fixed_stock(node,commodity,le
      vel,year_all) ) =
2444      fixed_stock(node,commodity,level,year_all) ;
2445  CAP_NEW.fx(node,tec,year_all)$( is_fixed_new_capacity(node,tec,year_all) )
       =
2446      fixed_new_capacity(node,tec,year_all) ;
2447  CAP.fx(node,tec,vintage,year_all)$( is_fixed_capacity(node,tec,vintage,yea
      r_all) ) =
2448      fixed_capacity(node,tec,vintage,year_all) ;
2449  ACT.fx(node,tec,vintage,year_all,mode,time)$( is_fixed_activity(node,tec,v
      intage,year_all,mode,time) ) =
2450      fixed_activity(node,tec,vintage,year_all,mode,time) ;
2451  LAND.fx(node,land_scenario,year_all)$( is_fixed_land(node,land_scenario,ye
      ar_all) ) =
2452      fixed_land(node,land_scenario,year_all) ;
2453   
2454  *-------------------------------------------------------------------------
      ---------------------------------------------*
2455  * auxiliary variables for debugging mode (identifying infeasibilities)    
                                                   *
2456  *-------------------------------------------------------------------------
      ---------------------------------------------*
2457   
2458  * report mapping for debugging
2459  Set
2460      AUX_ACT_BOUND_UP(node,tec,year_all,year_all2,mode,time) indicator whet
      her auxiliary upper bound on activity is binding
2461      AUX_ACT_BOUND_LO(node,tec,year_all,year_all2,mode,time) indicator whet
      her auxiliary upper bound on activity is binding
2462  ;
2463   
2464  * slack variables for debugging
2465  Positive variables
2466      SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year_all,time) sla
      ck variable for commodity balance (upwards)
2467      SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year_all,time) sla
      ck variable for commodity balance (downwards)
2468      SLACK_CAP_NEW_BOUND_UP (node,tec,year_all)        slack variable for b
      ound on new capacity (upwards)
2469      SLACK_CAP_NEW_BOUND_LO (node,tec,year_all)        slack variable for b
      ound on new capacity (downwards)
2470      SLACK_CAP_TOTAL_BOUND_UP (node,tec,year_all)      slack variable for u
      pper bound on total installed capacity
2471      SLACK_CAP_TOTAL_BOUND_LO (node,tec,year_all)      slack variable for l
      ower bound on total installed capacity
2472      SLACK_CAP_NEW_DYNAMIC_UP(node,tec,year_all)       slack variable for d
      ynamic new capacity constraint (upwards)
2473      SLACK_CAP_NEW_DYNAMIC_LO(node,tec,year_all)       slack variable for d
      ynamic new capacity constraint (downwards)
2474      SLACK_ACT_BOUND_UP(node,tec,year_all,mode,time)   slack variable for u
      pper bound on activity
2475      SLACK_ACT_BOUND_LO(node,tec,year_all,mode,time)   slack variable for l
      ower bound on activity
2476      SLACK_ACT_DYNAMIC_UP(node,tec,year_all,time)      slack variable for d
      ynamic activity constraint relaxation (upwards)
2477      SLACK_ACT_DYNAMIC_LO(node,tec,year_all,time)      slack variable for d
      ynamic activity constraint relaxation (downwards)
2478      SLACK_LAND_SCEN_UP(node,land_scenario,year_all)   slack variable for d
      ynamic land scenario constraint relaxation (upwards)
2479      SLACK_LAND_SCEN_LO(node,land_scenario,year_all)   slack variable for d
      ynamic land scenario constraint relaxation (downwards)
2480      SLACK_LAND_TYPE_UP(node,year_all,land_type)       slack variable for d
      ynamic land type constraint relaxation (upwards)
2481      SLACK_LAND_TYPE_LO(node,year_all,land_type)       slack variable for d
      ynamic land type constraint relaxation (downwards)
2482      SLACK_RELATION_BOUND_UP(relation,node,year_all)   slack variable for u
      pper bound of generic relation
2483      SLACK_RELATION_BOUND_LO(relation,node,year_all)   slack variable for l
      ower bound of generic relation
2484      SLACK_RELATION_BOUND_UP2(relation2,node,year_all)   slack variable for
       upper bound of generic relation
2485      SLACK_RELATION_BOUND_LO2(relation2,node,year_all)   slack variable for
       lower bound of generic relation
2486      SLACK_CAP_CON(node,tec,vintage,year_all,time)
2487      SLACK_MUF_TIME(node,tec,vintage,year_all,time)
2488      SLACK_MUF(node,tec,vintage,year_all)
2489      SLACK_CAP_LAND(node,tec,year_all,BLUES_type_land_tec)
2490      SLACK_EMISSION(node,type_emission,type_tec,type_year)
2491      SLACK_EXT_BOUND_UP(node,commodity,grade,year_all)
2492  ;
2493   
2494  *-------------------------------------------------------------------------
      ---------------------------------------------*
2495  * equation definitions                                                    
                                                   *
2496  *-------------------------------------------------------------------------
      ---------------------------------------------*
2497   
2498  Equations
2499      OBJECTIVE                       objective value of the optimisation pr
      oblem
2500      COST_ACCOUNTING_NODAL           cost accounting at node level over tim
      e
2501      EXTRACTION_EQUIVALENCE          auxiliary equation to simplify the res
      ource extraction formulation
2502      EXTRACTION_BOUND_UP             upper bound on extraction (by grade)
2503      RESOURCE_CONSTRAINT             constraint on resources remaining in e
      ach period (maximum extraction per period)
2504      RESOURCE_HORIZON                constraint on extraction over entire m
      odel horizon (resource volume in place)
2505      COMMODITY_BALANCE_GT            commodity supply greater than or equal
       demand
2506      COMMODITY_BALANCE_LT            commodity supply lower than or equal d
      emand
2507      STOCKS_BALANCE                  commodity inter-temporal balance of st
      ocks
2508      CAPACITY_CONSTRAINT             capacity constraint for technology (by
       sub-annual time slice)
2509      CAPACITY_MAINTENANCE_HIST       constraint for capacity maintenance  h
      istorical installation (built before start of model horizon)
2510      CAPACITY_MAINTENANCE_NEW        constraint for capacity maintenance of
       new capacity built in the current period (vintage == year)
2511      CAPACITY_MAINTENANCE            constraint for capacity maintenance ov
      er the technical lifetime
2512  *    CAPACITY_MAINTENANCE_NO_ER
2513      OPERATION_CONSTRAINT            constraint on maximum yearly operation
       (scheduled down-time for maintenance)
2514      MIN_UTILIZATION_CONSTRAINT      constraint for minimum yearly operatio
      n (aggregated over the course of a year)
2515      RENEWABLES_POTENTIAL_CONSTRAINT constraint on renewable resource poten
      tial
2516      RENEWABLES_CAPACITY_REQUIREMENT lower bound on required overcapacity w
      hen using lower grade potentials
2517      RENEWABLES_EQUIVALENCE          equation to define the renewables extr
      action
2518      ADDON_ACTIVITY_UP               addon-technology activity upper constr
      aint
2519      ADDON_ACTIVITY_LO               addon technology activity lower constr
      aint
2520      COMMODITY_USE_LEVEL             aggregate use of commodity by level as
       defined by total input into technologies
2521      ACTIVITY_BY_RATING              constraint on auxiliary rating-specifi
      c activity variable by rating bin
2522      ACTIVITY_RATING_TOTAL           equivalence of auxiliary rating-specif
      ic activity variables to actual activity
2523      FIRM_CAPACITY_PROVISION         contribution of dispatchable technolog
      ies to auxiliary firm-capacity variable
2524      SYSTEM_RELIABILITY_CONSTRAINT   constraint on total system reliability
       (firm capacity)
2525      SYSTEM_FLEXIBILITY_CONSTRAINT   constraint on total system flexibility
2526      NEW_CAPACITY_BOUND_UP           upper bound on technology capacity inv
      estment
2527      NEW_CAPACITY_BOUND_LO           lower bound on technology capacity inv
      estment
2528      TOTAL_CAPACITY_BOUND_UP         upper bound on total installed capacit
      y
2529      TOTAL_CAPACITY_BOUND_LO         lower bound on total installed capacit
      y
2530      NEW_CAPACITY_CONSTRAINT_UP      dynamic constraint for capacity invest
      ment (learning and spillovers upper bound)
2531      NEW_CAPACITY_SOFT_CONSTRAINT_UP bound on soft relaxation of dynamic ne
      w capacity constraints (upwards)
2532      NEW_CAPACITY_CONSTRAINT_LO      dynamic constraint on capacity investm
      ent (lower bound)
2533      NEW_CAPACITY_SOFT_CONSTRAINT_LO bound on soft relaxation of dynamic ne
      w capacity constraints (downwards)
2534      ACTIVITY_BOUND_UP               upper bound on activity summed over al
      l vintages
2535      ACTIVITY_BOUND_LO               lower bound on activity summed over al
      l vintages
2536      ACTIVITY_BOUND_ALL_MODES_UP     upper bound on activity summed over al
      l vintages and modes
2537      ACTIVITY_BOUND_ALL_MODES_LO     lower bound on activity summed over al
      l vintages and modes
2538      SHARE_CONSTRAINT_COMMODITY_UP   upper bounds on share constraints for 
      commodities
2539      SHARE_CONSTRAINT_COMMODITY_LO   lower bounds on share constraints for 
      commodities
2540      SHARE_CONSTRAINT_MODE_UP        upper bounds on share constraints for 
      modes of a given technology
2541      SHARE_CONSTRAINT_MODE_LO        lower bounds on share constraints for 
      modes of a given technology
2542      ACTIVITY_CONSTRAINT_UP          dynamic constraint on the market penet
      ration of a tgeneric_share_factor_upechnology activity (upper bound)
2543      ACTIVITY_SOFT_CONSTRAINT_UP     bound on relaxation of the dynamic con
      straint on market penetration (upper bound)
2544      ACTIVITY_CONSTRAINT_LO          dynamic constraint on the market penet
      ration of a technology activity (lower bound)
2545      ACTIVITY_SOFT_CONSTRAINT_LO     bound on relaxation of the dynamic con
      straint on market penetration (lower bound)
2546      EMISSION_EQUIVALENCE            auxiliary equation to simplify the not
      ation of emissions
2547  *    EMISSION_EQUIVALENCE2            auxiliary equation to simplify the n
      otation of emissions
2548      EMISSION_CONSTRAINT             nodal-regional-global constraints on e
      missions (by category)
2549      LAND_CONSTRAINT                 constraint on total land use (linear c
      ombination of land scenarios adds up to 1)
2550      DYNAMIC_LAND_SCEN_CONSTRAINT_UP dynamic constraint on land scenario ch
      ange (upper bound)
2551      DYNAMIC_LAND_SCEN_CONSTRAINT_LO dynamic constraint on land scenario ch
      ange (lower bound)
2552      DYNAMIC_LAND_TYPE_CONSTRAINT_UP dynamic constraint on land-use change 
      (upper bound)
2553      DYNAMIC_LAND_TYPE_CONSTRAINT_LO dynamic constraint on land-use change 
      (lower bound)
2554      RELATION_EQUIVALENCE            auxiliary equation to simplify the imp
      lementation of relations
2555      RELATION_CONSTRAINT_UP          upper bound of relations (linear const
      raints)
2556      RELATION_CONSTRAINT_LO          lower bound of relations (linear const
      raints)
2557      STORAGE_CHANGE                  change in the state of charge of stora
      ge
2558      STORAGE_BALANCE                 balance of the state of charge of stor
      age
2559      STORAGE_BALANCE_INIT            balance of the state of charge of stor
      age at sub-annual time steps with initial storage content
2560      STORAGE_EQUIVALENCE             mapping state of storage as activity o
      f storage technologies
2561      BLUES_LAND_BALANCE              testing constraint to guarantee the ba
      lance between the land use technologies
2562  ***    LDR_ADJ                         adding sub annual min utilization f
      actor to make LDR works
2563  **    BLUES_LAND_HIST_BAL
2564      RELATION_EQUIVALENCE2
2565      RELATION_CONSTRAINT_UP2
2566      RELATION_CONSTRAINT_LO2
2567      MIN_UTILIZATION_CONSTRAINT_TIME
2568  ;
2569  *-------------------------------------------------------------------------
      ---------------------------------------------*
2570  * equation statements                                                     
                                                   *
2571  *-------------------------------------------------------------------------
      ---------------------------------------------*
2572   
2573  ***
2574  * Objective function
2575  * ------------------
2576  *
2577  * The objective function of the |MESSAGEix| core model
2578  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2579  *
2580  * Equation OBJECTIVE
2581  * """"""""""""""""""
2582  *
2583  * The objective function (of the core model) minimizes total discounted sy
      stems costs including costs for emissions,
2584  * relaxations of dynamic constraints
2585  *
2586  * .. math::
2587  *    OBJ = \sum_{n,y \in Y^{M}} df\_year_{y} \cdot COST\_NODAL_{n,y}
2588  *
2589  ***
2590  OBJECTIVE..
2591      OBJ =E= SUM( (node,year), df_period(year) * COST_NODAL(node,year) ) ;
2592   
2593  ***
2594  * Regional system cost accounting function
2595  * ----------------------------------------
2596  *
2597  * Accounting of regional system costs over time
2598  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2599  *
2600  * Equation COST_ACCOUNTING_NODAL
2601  * """"""""""""""""""""""""""""""
2602  *
2603  * Accounting of regional systems costs over time as well as costs for emis
      sions (taxes),
2604  * land use (from the model land-use model emulator), relaxations of dynami
      c constraints,
2605  * and linear relations.
2606  *
2607  * .. math::
2608  *    COST\_NODAL_{n,y} & = \sum_{c,g} \ resource\_cost_{n,c,g,y} \cdot EXT
      _{n,c,g,y} \\
2609  *      & + \sum_{t} \
2610  *          \bigg( inv\_cost_{n,t,y} \cdot construction\_time\_factor_{n,t,
      y} \\
2611  *      & \quad \quad \quad \cdot end\_of\_horizon\_factor_{n,t,y} \cdot CA
      P\_NEW_{n,t,y} \\[4 pt]
2612  *      & \quad \quad + \sum_{y^V \leq y} \ fix\_cost_{n,t,y^V,y} \cdot CAP
      _{n,t,y^V,y} \\
2613  *      & \quad \quad + \sum_{\substack{y^V \leq y \\ m,h}} \ var\_cost_{n,
      t,y^V,y,m,h} \cdot ACT_{n,t,y^V,y,m,h} \\
2614  *      & \quad \quad + \Big( abs\_cost\_new\_capacity\_soft\_up_{n,t,y} \\
2615  *      & \quad \quad \quad
2616  *          + level\_cost\_new\_capacity\_soft\_up_{n,t,y} \cdot\ inv\_cost
      _{n,t,y}
2617  *          \Big) \cdot CAP\_NEW\_UP_{n,t,y} \\[4pt]
2618  *      & \quad \quad + \Big( abs\_cost\_new\_capacity\_soft\_lo_{n,t,y} \\
2619  *      & \quad \quad \quad
2620  *          + level\_cost\_new\_capacity\_soft\_lo_{n,t,y} \cdot\ inv\_cost
      _{n,t,y}
2621  *          \Big) \cdot CAP\_NEW\_LO_{n,t,y} \\[4pt]
2622  *      & \quad \quad + \sum_{m,h} \ \Big( abs\_cost\_activity\_soft\_up_{n
      ,t,y,m,h} \\
2623  *      & \quad \quad \quad
2624  *          + level\_cost\_activity\_soft\_up_{n,t,y,m,h} \cdot\ levelized\
      _cost_{n,t,y,m,h}
2625  *          \Big) \cdot ACT\_UP_{n,t,y,h} \\
2626  *      & \quad \quad + \sum_{m,h} \ \Big( abs\_cost\_activity\_soft\_lo_{n
      ,t,y,m,h} \\
2627  *      & \quad \quad \quad
2628  *          + level\_cost\_activity\_soft\_lo_{n,t,y,m,h} \cdot\ levelized\
      _cost_{n,t,y,m,h}
2629  *          \Big) \cdot ACT\_LO_{n,t,y,h} \bigg) \\
2630  *      & + \sum_{\substack{\widehat{e},\widehat{t} \\ e \in E(\widehat{e})
      }}
2631  *            emission\_scaling_{\widehat{e},e} \cdot \ emission\_tax_{n,\w
      idehat{e},\widehat{t},y}
2632  *            \cdot EMISS_{n,e,\widehat{t},y} \\
2633  *      & + \sum_{s} land\_cost_{n,s,y} \cdot LAND_{n,s,y} \\
2634  *      & + \sum_{r} relation\_cost_{r,n,y} \cdot REL_{r,n,y}
2635  ***
2636   
2637  COST_ACCOUNTING_NODAL(node, year)..
2638      COST_NODAL(node, year) =E=
2639  * resource extraction costs
2640      SUM((commodity,grade)$( map_resource(node,commodity,grade,year) ),
2641           resource_cost(node,commodity,grade,year) * EXT(node,commodity,gra
      de,year) )
2642  * technology capacity investment, maintainance, operational cost
2643      + SUM((tec)$( map_tec(node,tec,year) ),
2644              (
2645                  round(
2646                      inv_cost(node,tec,year) * construction_time_factor(nod
      e,tec,year)
2647                  * end_of_horizon_factor(node,tec,year)
2648                  , 6)
2649                  * CAP_NEW(node,tec,year)
2650              + SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ),
2651                  fix_cost(node,tec,vintage,year) * CAP(node,tec,vintage,yea
      r) ) )$( inv_tec(tec) )
2652              + SUM((vintage,mode,time)$( map_tec_lifetime(node,tec,vintage,
      year) AND map_tec_act(node,tec,year,mode,time) ),
2653                  ACT(node,tec,vintage,year,mode,time) *
2654                  round(
2655                      var_cost(node,tec,vintage,year,mode,time)
2656                  *  duration_time(time)
2657  *vom no BLUES is the value to produce the main output amount ?????????
2658                  *  main_output_val(node,tec,vintage,year,mode,time)
2659                  ,6)
2660  *            + SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year
      ) ),
2661  *                var_cost2(node,tec,vintage,year,mode) *
2662  *                SUM(time$(map_tec_act(node,tec,year,mode,time)),
2663  *                        ACT(node,tec,vintage,year,mode,time)
2664  *                *
2665  *                round(
2666  *                        (main_output_val(node,tec,vintage,year,mode,time)
2667  *                   *  duration_time(time)
2668  *                   ,6)     )
2669                  )
2670              )
2671  * additional cost terms (penalty) for relaxation of 'soft' dynamic new cap
      acity constraints
2672      + SUM((inv_tec)$( map_tec(node,inv_tec,year) ),
2673          SUM((mode,time)$map_tec_act(node,inv_tec,year,mode,time),
2674              ( ( abs_cost_new_capacity_soft_up(node,inv_tec,year)
2675                  + level_cost_new_capacity_soft_up(node,inv_tec,year) * inv
      _cost(node,inv_tec,year)
2676                  ) * CAP_NEW_UP(node,inv_tec,year) )$( soft_new_capacity_up
      (node,inv_tec,year) )
2677              + ( ( abs_cost_new_capacity_soft_lo(node,inv_tec,year)
2678                  + level_cost_new_capacity_soft_lo(node,inv_tec,year) * inv
      _cost(node,inv_tec,year)
2679                  ) * CAP_NEW_LO(node,inv_tec,year) )$( soft_new_capacity_lo
      (node,inv_tec,year) )
2680              )
2681          )
2682  * additional cost terms (penalty) for relaxation of 'soft' dynamic activit
      y constraints
2683      + SUM((tec)$( map_tec(node,tec,year) ),
2684          SUM(time$( map_tec_time(node,tec,year,time) ),
2685              ( ( abs_cost_activity_soft_up(node,tec,year,time)
2686                  + level_cost_activity_soft_up(node,tec,year,time) * leveli
      zed_cost(node,tec,year,time)
2687                  ) * ACT_UP(node,tec,year,time) )$( soft_activity_up(node,t
      ec,year,time) )
2688              + ( ( abs_cost_activity_soft_lo(node,tec,year,time)
2689                  + level_cost_activity_soft_lo(node,tec,year,time)  * level
      ized_cost(node,tec,year,time)
2690                  ) * ACT_LO(node,tec,year,time) )$( soft_activity_lo(node,t
      ec,year,time) )
2691              )
2692          )
2693  * emission taxes (by parent node, type of technology, type of year and typ
      e of emission)
2694      + SUM((type_emission,emission,type_tec,type_year)$( emission_scaling(t
      ype_emission,emission)
2695              AND cat_year(type_year,year) ),
2696          emission_scaling(type_emission,emission)
2697          * tax_emission(node,type_emission,type_tec,type_year)
2698          * EMISSV(node,emission,type_tec,year) )
2699  * cost terms from land-use model emulator (only includes valid node-land_s
      cenario-year combinations)
2700      + SUM(land_scenario$( land_cost(node,land_scenario,year) ),
2701          land_cost(node,land_scenario,year) * LAND(node,land_scenario,year)
       )
2702  * cost terms associated with linear relations
2703      + SUM(relation$( relation_cost(relation,node,year) ),
2704          relation_cost(relation,node,year) * REL(relation,node,year) )
2705  * cost terms associated with linear relations2
2706      + SUM(relation2$( relation_cost2(relation2,node,year) ),
2707          relation_cost2(relation2,node,year) * REL2(relation2,node,year) )
2708  * implementation of slack variables for constraints to aid in debugging
2709      + SUM((commodity,level,time)$( map_commodity(node,commodity,level,year
      ,time) ), ( 0
2710  *   + SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year,time)
2711  *   + SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year,time)
2712          ) * 1e7 )
2713      + SUM((tec)$( map_tec(node,tec,year) ), ( 0
2714  *    + 10 * SLACK_CAP_NEW_BOUND_UP(node,tec,year)
2715  *    + 10 * SLACK_CAP_NEW_BOUND_LO(node,tec,year)
2716  *  + 10 * SLACK_CAP_NEW_DYNAMIC_UP(node,tec,year)
2717  *  + 10 * SLACK_CAP_NEW_DYNAMIC_LO(node,tec,year)
2718  *  + 10 * SLACK_CAP_TOTAL_BOUND_UP(node,tec,year)
2719  *  + 10 * SLACK_CAP_TOTAL_BOUND_LO(node,tec,year)
2720          ) * ABS( 1e5 + inv_cost(node,tec,year) ) )
2721      + SUM((tec,time)$( map_tec_time(node,tec,year,time) ), ( 0
2722  *   + 10 * SUM(mode$( map_tec_act(node,tec,year,mode,time) ), SLACK_ACT_BO
      UND_UP(node,tec,year,mode,time) )
2723  *   + 10 * SUM(mode$( map_tec_act(node,tec,year,mode,time) ), SLACK_ACT_BO
      UND_LO(node,tec,year,mode,time) )
2724  * + 10 * SLACK_ACT_DYNAMIC_UP(node,tec,year,time)
2725  * + 10 * SLACK_ACT_DYNAMIC_LO(node,tec,year,time)
2726          ) * ( 1e5
2727              + ABS( SUM(mode$map_tec_act(node,tec,year,mode,time), var_cost
      (node,tec,year,year,mode,time) ) )
2728              + fix_cost(node,tec,year,year) ) )
2729      + SUM(land_scenario, 0
2730  * + 1e6 * SLACK_LAND_SCEN_UP(node,land_scenario,year)
2731  * + 1e6 * SLACK_LAND_SCEN_LO(node,land_scenario,year)
2732          )
2733      + SUM(land_type, 0
2734  * + 1e6 * SLACK_LAND_TYPE_UP(node,year,land_type)
2735  * + 1e6 * SLACK_LAND_TYPE_LO(node,year,land_type)
2736          )
2737      + SUM((relation), 0
2738  * + 1e6 * SLACK_RELATION_BOUND_UP(relation,node,year)$( is_relation_upper(
      relation,node,year) )
2739  * + 1e6 * SLACK_RELATION_BOUND_LO(relation,node,year)$( is_relation_lower(
      relation,node,year) )
2740          )
2741      + SUM((relation2), 0
2742  * + 1e6 * SLACK_RELATION_BOUND_UP2(relation2,node,year)$( is_relation_uppe
      r2(relation2,node,year) )
2743  * + 1e6 * SLACK_RELATION_BOUND_LO2(relation2,node,year)$( is_relation_lowe
      r2(relation2,node,year) )
2744          )
2745      + SUM((tec,vintage, mode, time)$( map_tec_time(node,tec,year,time) AND
2746      map_tec_lifetime(node,tec,vintage,year) AND
2747      map_tec_act(node,tec,year,mode,time)), ( 0
2748  * + 1e6 * SLACK_CAP_CON(node,tec,vintage,year,time)
2749  * + 1e6 * SLACK_MUF_TIME(node,tec,vintage,year,time)
2750                  )
2751              )
2752      + SUM((tec, vintage)$( map_tec(node,tec,year) AND  map_tec_lifetime(no
      de,tec,vintage,year) ), ( 0
2753  * + 1e6 * SLACK_MUF(node,tec,vintage,year)
2754                  )
2755              )
2756      + SUM((tec,BLUES_type_land_tec) $ ( map_BLUES_land_rel(node,tec, BLUES
      _type_land_tec) ) , (0
2757  * + 1e6 * SLACK_CAP_LAND(node,tec,year,BLUES_type_land_tec)
2758                  )
2759              )
2760      + SUM((type_emission,type_tec,type_year)$is_bound_emission(node,type_e
      mission,type_tec,type_year), (0
2761  * + 1e6   * SLACK_EMISSION(node,type_emission,type_tec,type_year)
2762                  )
2763              )
2764      + SUM((commodity,grade)$( map_resource(node,commodity,grade,year) ), (
      0
2765  * + 1e6   * SLACK_EXT_BOUND_UP(node,commodity,grade,year)
2766                  )
2767              )
2768  ;
2769   
2770  ***
2771  * Here, :math:`n^L \in N(n)` are all nodes :math:`n^L` that are sub-nodes 
      of node :math:`n`.
2772  * The subset of technologies :math:`t \in T(\widehat{t})` are all tecs tha
      t belong to category :math:`\widehat{t}`,
2773  * and similar notation is used for emissions :math:`e \in E`.
2774  ***
2775   
2776  *-------------------------------------------------------------------------
      ---------------------------------------------*
2777  ***
2778  * Resource and commodity section
2779  * ------------------------------
2780  *
2781  * Constraints on resource extraction
2782  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2783  *
2784  * .. _extraction_equivalence:
2785  *
2786  * Equation EXTRACTION_EQUIVALENCE
2787  * """""""""""""""""""""""""""""""
2788  *
2789  * This constraint translates the quantity of resources extracted (summed o
      ver all grades) to the input used by
2790  * all technologies (drawing from that node). It is introduced to simplify 
      subsequent notation in input/output relations
2791  * and nodal balance constraints.
2792  *
2793  *  .. math::
2794  *     \sum_{g} EXT_{n,c,g,y} =
2795  *     \sum_{\substack{n^L,t,m,h,h^{OD} \\ y^V \leq y  \\ \ l \in L^{RES} \
      subseteq L }}
2796  *         input_{n^L,t,y^V,y,m,n,c,l,h,h^{OD}} \cdot ACT_{n^L,t,m,y,h}
2797  *
2798  * The set :math:`L^{RES} \subseteq L` denotes all levels for which the det
      ailed representation of resources applies.
2799  ***
2800  EXTRACTION_EQUIVALENCE(node,commodity,year)..
2801      SUM(grade$( map_resource(node,commodity,grade,year) ), EXT(node,commod
      ity,grade,year) )
2802      =G= SUM((location,tec,vintage,mode,level_resource,time_act,time_od)$( 
      map_tec_act(node,tec,year,mode,time_act)
2803              AND map_tec_lifetime(node,tec,vintage,year) ),
2804          input(location,tec,vintage,year,mode,node,commodity,level_resource
      ,time_act,time_od)
2805          * ACT(location,tec,vintage,year,mode,time_act)
2806  *        *  duration_time(time_act)
2807          * duration_time_rel(time_od,time_act)
2808          ) ;
2809   
2810  ***
2811  * Equation EXTRACTION_BOUND_UP
2812  * """"""""""""""""""""""""""""
2813  *
2814  * This constraint specifies an upper bound on resource extraction by grade
      .
2815  *
2816  *  .. math::
2817  *     EXT_{n,c,g,y} \leq bound\_extraction\_up_{n,c,g,y}
2818  *
2819  ***
2820  EXTRACTION_BOUND_UP(node,commodity,grade,year)$( map_resource(node,commodi
      ty,grade,year)
2821          AND is_bound_extraction_up(node,commodity,grade,year) )..
2822      EXT(node,commodity,grade,year) =L= bound_extraction_up(node,commodity,
      grade,year) ;
2823   
2824  ***
2825  * Equation RESOURCE_CONSTRAINT
2826  * """"""""""""""""""""""""""""
2827  *
2828  * This constraint restricts that resource extraction in a year guarantees 
      the "remaining resources" constraint,
2829  * i.e., only a given fraction of remaining resources can be extracted per 
      year.
2830  *
2831  *  .. math::
2832  *     EXT_{n,c,g,y} \leq
2833  *     resource\_remaining_{n,c,g,y} \cdot
2834  *         \Big( & resource\_volume_{n,c,g} \\
2835  *               & - \sum_{y' < y} duration\_period_{y'} \cdot EXT_{n,c,g,y
      '} \Big)
2836  *
2837  ***
2838  RESOURCE_CONSTRAINT(node,commodity,grade,year)$( map_resource(node,commodi
      ty,grade,year)
2839          AND resource_remaining(node,commodity,grade,year) )..
2840  * extraction per year
2841      EXT(node,commodity,grade,year)
2842      =L=
2843  * remaining resources multiplied by remaining-resources-factor
2844      resource_remaining(node,commodity,grade,year)
2845      * ( resource_volume(node,commodity,grade)
2846          - SUM(year2$( year_order(year2) < year_order(year) ),
2847              duration_period2(year2) * EXT(node,commodity,grade,year2) ) ) 
      ;
2848   
2849  ***
2850  * Equation RESOURCE_HORIZON
2851  * """""""""""""""""""""""""
2852  * This constraint ensures that total resource extraction over the model ho
      rizon does not exceed the available resources.
2853  *
2854  *  .. math::
2855  *     \sum_{y} duration\_period_{y} \cdot EXT_{n,c,g,y} \leq  resource\_vo
      lume_{n,c,g}
2856  *
2857  ***
2858  RESOURCE_HORIZON(node,commodity,grade)$( SUM(year$map_resource(node,commod
      ity,grade,year), 1 ) )..
2859      SUM(year, duration_period2(year) * EXT(node,commodity,grade,year)
2860  * - SLACK_EXT_BOUND_UP(node,commodity,grade,year)
2861      )
2862          =L= resource_volume(node,commodity,grade) ;
2863   
2864  *-------------------------------------------------------------------------
      ---------------------------------------------*
2865  ***
2866  * Constraints on commodities and stocks
2867  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2868  *
2869  * .. _commodity_balance:
2870  *
2871  * Auxiliary COMMODITY_BALANCE
2872  * """""""""""""""""""""""""""
2873  * For the commodity balance constraints below, we introduce an auxiliary v
      ariable called :math:`COMMODITY\_BALANCE`. This is implemented
2874  * as a GAMS ``$macro`` function.
2875  *
2876  *  .. math::
2877  *     \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} output_{n^L,t,y^V,y,m,n,
      c,l,h^A,h}
2878  *         \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} 
      & \\
2879  *     - \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} input_{n^L,t,y^V,y,m,n
      ,c,l,h^A,h}
2880  *         \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,m,y,h^A} & \\
2881  *     + \ STOCK\_CHG_{n,c,l,y,h} + \ \sum_s \Big( land\_output_{n,s,y,c,l,
      h} - land\_input_{n,s,y,c,l,h} \Big) \cdot & LAND_{n,s,y} \\[4pt]
2882  *     - \ demand\_fixed_{n,c,l,y,h}
2883  *     = COMMODITY\_BALANCE_{n,c,l,y,h} \quad \forall \ l \notin (L^{RES}, 
      & L^{REN}, L^{STOR} \subseteq L)
2884  *
2885  * The commodity balance constraint at the resource level is included in th
      e `Equation RESOURCE_CONSTRAINT`_,
2886  * while at the renewable level, it is included in the `Equation RENEWABLES
      _EQUIVALENCE`_,
2887  * and at the storage level, it is included in the `Equation STORAGE_BALANC
      E`_.
2888  ***
2889  $macro COMMODITY_BALANCE(node,commodity,level,year,time) (                
                                                   \
2890      SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year
      ,mode,time2)                                 \
2891              AND map_tec_lifetime(location,tec,vintage,year) ),            
                                                   \
2892  * import into node and output by all technologies located at 'location' se
      nding to 'node' and 'time2' sending to 'time'
2893          output(location,tec,vintage,year,mode,node,commodity,level,time2,t
      ime)                                         \
2894          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mo
      de,time2)                                    \
2895  * export from node and input into technologies located at 'location' takin
      g from 'node' and 'time2' taking from 'time'
2896          - input(location,tec,vintage,year,mode,node,commodity,level,time2,
      time)                                        \
2897          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mo
      de,time2) )                                  \
2898  * quantity taken out from ( >0 ) or put into ( <0 ) inter-period stock (st
      orage)
2899      + STOCK_CHG(node,commodity,level,year,time)$( map_stocks(node,commodit
      y,level,year) )                              \
2900  * yield from land-use model emulator
2901      + SUM(land_scenario,                                                  
                                                   \
2902          ( land_output(node,land_scenario,year,commodity,level,time)       
                                                   \
2903            - land_input(node,land_scenario,year,commodity,level,time) ) * L
      AND(node,land_scenario,year) )               \
2904  * final demand (exogenous parameter to be satisfied by the commodity syste
      m)
2905      - demand_fixed(node,commodity,level,year,time)                        
                                                   \
2906      )$( map_commodity(node,commodity,level,year,time) AND NOT level_resour
      ce(level) AND NOT level_renewable(level) )
2907   
2908  ***
2909  * .. _commodity_balance_gt:
2910  *
2911  * Equation COMMODITY_BALANCE_GT
2912  * """""""""""""""""""""""""""""
2913  * This constraint ensures that supply is greater or equal than demand for 
      every commodity-level combination.
2914  *
2915  *  .. math::
2916  *     COMMODITY\_BALANCE_{n,c,l,y,h} \geq 0
2917  *
2918  ***
2919  COMMODITY_BALANCE_GT(node,commodity,level,year,time)$( map_commodity(node,
      commodity,level,year,time)
2920          AND NOT level_resource(level) AND NOT level_renewable(level) AND N
      OT level_storage(level) )..
2921      (SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,yea
      r,mode,time2)AND map_tec_lifetime(location,tec,vintage,year) ),output(loca
      tion,tec,vintage,year,mode,node,commodity,level,time2,time)* duration_time
      _rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)- input(locati
      on,tec,vintage,year,mode,node,commodity,level,time2,time)* duration_time_r
      el(time,time2) * ACT(location,tec,vintage,year,mode,time2) )+ STOCK_CHG(no
      de,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )+ S
      UM(land_scenario,( land_output(node,land_scenario,year,commodity,level,tim
      e)- land_input(node,land_scenario,year,commodity,level,time) ) * LAND(node
      ,land_scenario,year) )- demand_fixed(node,commodity,level,year,time))$( ma
      p_commodity(node,commodity,level,year,time) AND NOT level_resource(level) 
      AND NOT level_renewable(level) )
2922  * relaxation of constraints for debugging
2923  * + SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year,time)
2924       =G= 0 ;
2925   
2926  ***
2927  * .. _commodity_balance_lt:
2928  *
2929  * Equation COMMODITY_BALANCE_LT
2930  * """""""""""""""""""""""""""""
2931  * This constraint ensures that the supply is smaller than or equal to the 
      demand for all commodity-level combinations
2932  * given in the :math:`balance\_equality_{c,l}`. In combination with the co
      nstraint above, it ensures that supply
2933  * is (exactly) equal to demand.
2934  *
2935  *  .. math::
2936  *     COMMODITY\_BALANCE_{n,c,l,y,h} \leq 0
2937  *
2938  ***
2939  COMMODITY_BALANCE_LT(node,commodity,level,year,time)$( map_commodity(node,
      commodity,level,year,time)
2940          AND NOT level_resource(level) AND NOT level_renewable(level) AND N
      OT level_storage(level)
2941          AND balance_equality(commodity,level) )..
2942      (SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,yea
      r,mode,time2)AND map_tec_lifetime(location,tec,vintage,year) ),output(loca
      tion,tec,vintage,year,mode,node,commodity,level,time2,time)* duration_time
      _rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)- input(locati
      on,tec,vintage,year,mode,node,commodity,level,time2,time)* duration_time_r
      el(time,time2) * ACT(location,tec,vintage,year,mode,time2) )+ STOCK_CHG(no
      de,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )+ S
      UM(land_scenario,( land_output(node,land_scenario,year,commodity,level,tim
      e)- land_input(node,land_scenario,year,commodity,level,time) ) * LAND(node
      ,land_scenario,year) )- demand_fixed(node,commodity,level,year,time))$( ma
      p_commodity(node,commodity,level,year,time) AND NOT level_resource(level) 
      AND NOT level_renewable(level) )
2943  * relaxation of constraints for debugging
2944  * - SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year,time)
2945      =L= 0 ;
2946   
2947  ***
2948  * Equation STOCKS_BALANCE
2949  * """""""""""""""""""""""
2950  * This constraint ensures the inter-temporal balance of commodity stocks.
2951  * The parameter :math:`commodity\_stocks_{n,c,l}` can be used to model exo
      genous additions to the stock
2952  *
2953  *  .. math::
2954  *     STOCK_{n,c,l,y} + commodity\_stock_{n,c,l,y} =
2955  *         duration\_period_{y} \cdot & \sum_{h} STOCK\_CHG_{n,c,l,y,h} \\
2956  *                                    & + STOCK_{n,c,l,y+1}
2957  *
2958  ***
2959  STOCKS_BALANCE(node,commodity,level,year)$( map_stocks(node,commodity,leve
      l,year) )..
2960      STOCK(node,commodity,level,year)$( NOT first_period(year) )
2961      + commodity_stock(node,commodity,level,year) =E=
2962      duration_period2(year) * SUM(time$( map_commodity(node,commodity,level
      ,year,time) ),
2963           STOCK_CHG(node,commodity,level,year,time) )
2964      + SUM(year2$( seq_period(year,year2) ), STOCK(node,commodity,level,yea
      r2) ) ;
2965   
2966  *-------------------------------------------------------------------------
      ---------------------------------------------*
2967  ***
2968  * Technology section
2969  * ------------------
2970  *
2971  * Technical and engineering constraints
2972  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2973  * The first set of constraints concern technologies that have explicit inv
      estment decisions
2974  * and where installed/maintained capacity is relevant for operational deci
      sions.
2975  * The set where :math:`T^{INV} \subseteq T` is the set of all these techno
      logies.
2976   
2977  *
2978  * Equation CAPACITY_CONSTRAINT
2979  * """"""""""""""""""""""""""""
2980  * This constraint ensures that the actual activity of a technology at a no
      de cannot exceed available (maintained)
2981  * capacity summed over all vintages, including the technology capacity fac
      tor :math:`capacity\_factor_{n,t,y,t}`.
2982  *
2983  *  .. math::
2984  *     \sum_{m} ACT_{n,t,y^V,y,m,h}
2985  *         \leq duration\_time_{h} \cdot capacity\_factor_{n,t,y^V,y,h} \cd
      ot CAP_{n,t,y^V,y}
2986  *         \quad \forall \ t \ \in \ T^{INV}
2987  *
2988  *ORINGAL EQUATION:
2989  *CAPACITY_CONSTRAINT(node,inv_tec,vintage,year,time)$( map_tec_time(node,i
      nv_tec,year,time)
2990  *        AND map_tec_lifetime(node,inv_tec,vintage,year) )..
2991  *    SUM(mode$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_t
      ec,vintage,year,mode,time))
2992  *        =L= duration_time(time) * capacity_factor(node,inv_tec,vintage,ye
      ar,time) * CAP(node,inv_tec,vintage,year) ;
2993  *
2994  ***
2995  CAPACITY_CONSTRAINT(node,inv_tec,vintage,year,time)$( map_tec_time(node,in
      v_tec,year,time)
2996          AND map_tec_lifetime(node,inv_tec,vintage,year) )..
2997      SUM(mode$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_te
      c,vintage,year,mode,time) *
2998                                                  main_output_val(node,inv_t
      ec,vintage,year,mode,time)
2999                                                  )
3000  * - SLACK_CAP_CON(node,inv_tec,vintage,year,time)
3001          =L=
3002  *        duration_time(time) *
3003          capacity_factor(node,inv_tec,vintage,year,time) * CAP(node,inv_tec
      ,vintage,year) ;
3004  ***
3005  * Equation CAPACITY_MAINTENANCE_HIST
3006  * """"""""""""""""""""""""""""""""""
3007  * The following three constraints implement technology capacity maintenanc
      e over time to allow early retirment.
3008  * The optimization problem determines the optimal timing of retirement, wh
      en fixed operation-and-maintenance costs
3009  * exceed the benefit in the objective function.
3010  *
3011  * The first constraint ensures that historical capacity (built prior to th
      e model horizon) is available
3012  * as installed capacity in the first model period.
3013  *
3014  *   .. math::
3015  *      CAP_{n,t,y^V,'first\_period'} & \leq
3016  *          remaining\_capacity_{n,t,y^V,'first\_period'} \cdot
3017  *          duration\_period_{y^V} \cdot
3018  *          historical\_new\_capacity_{n,t,y^V} \\
3019  *      & \text{if } y^V  < 'first\_period' \text{ and } |y| - |y^V| < tech
      nical\_lifetime_{n,t,y^V}
3020  *      \quad \forall \ t \in T^{INV}
3021  *
3022  ***
3023  CAPACITY_MAINTENANCE_HIST(node,inv_tec,vintage,first_period)$( map_tec_lif
      etime(node,inv_tec,vintage,first_period)
3024          AND historical(vintage))..
3025      CAP(node,inv_tec,vintage,first_period)
3026      =L= remaining_capacity(node,inv_tec,vintage,first_period) *
3027          duration_period2(vintage) * historical_new_capacity(node,inv_tec,v
      intage) ;
3028   
3029  ***
3030  * Equation CAPACITY_MAINTENANCE_NEW
3031  * """""""""""""""""""""""""""""""""
3032  * The second constraint ensures that capacity is fully maintained througho
      ut the model period
3033  * in which it was constructed (no early retirement in the period of constr
      uction).
3034  *
3035  *   .. math::
3036  *      CAP_{n,t,y^V,y^V} =
3037  *          remaining\_capacity_{n,t,y^V,y^V} \cdot
3038  *          duration\_period_{y^V} \cdot
3039  *          CAP\_NEW_{n,t,y^V}
3040  *      \quad \forall \ t \in T^{INV}
3041  *
3042  * The current formulation does not account for construction time in the co
      nstraints, but only adds a mark-up
3043  * to the investment costs in the objective function.
3044  ***
3045  CAPACITY_MAINTENANCE_NEW(node,inv_tec,vintage,vintage)$( map_tec_lifetime(
      node,inv_tec,vintage,vintage) )..
3046      CAP(node,inv_tec,vintage,vintage)
3047      =E= remaining_capacity(node,inv_tec,vintage,vintage)
3048          * duration_period2(vintage) * CAP_NEW(node,inv_tec,vintage) ;
3049   
3050  ***
3051  * Equation CAPACITY_MAINTENANCE
3052  * """""""""""""""""""""""""""""
3053  * The third constraint implements the dynamics of capacity maintenance thr
      oughout the model horizon.
3054  * Installed capacity can be maintained over time until decommissioning, wh
      ich is irreversible.
3055  *
3056  *   .. math::
3057  *      CAP_{n,t,y^V,y} & \leq
3058  *          remaining\_capacity_{n,t,y^V,y} \cdot
3059  *          CAP_{n,t,y^V,y-1} \\
3060  *      \quad & \text{if } y > y^V \text{ and } y^V  > 'first\_period' \tex
      t{ and } |y| - |y^V| < technical\_lifetime_{n,t,y^V}
3061  *      \quad \forall \ t \in T^{INV}
3062  *
3063  ***
3064  CAPACITY_MAINTENANCE(node,inv_tec,vintage,year)$( map_tec_lifetime(node,in
      v_tec,vintage,year)
3065          AND NOT first_period(year) AND year_order(vintage) < year_order(ye
      ar))..
3066      CAP(node,inv_tec,vintage,year)
3067      =L= remaining_capacity(node,inv_tec,vintage,year) *
3068          ( SUM(year2$( seq_period(year2,year) ),
3069                CAP(node,inv_tec,vintage,year2) ) ) ;
3070  ***
3071  * Equation CAPACITY_MAINTENANCE NO EARLY RETIREMENT
3072  * """""""""""""""""""""""""""""
3073  * The third constraint implements the dynamics of capacity maintenance thr
      oughout the model horizon.
3074  * Installed capacity must be maintained over time until decommissioning, w
      hich is irreversible.
3075  *
3076  *   .. math::
3077  *      CAP_{n,t,y^V,y} & \leq
3078  *          remaining\_capacity_{n,t,y^V,y} \cdot
3079  *          CAP_{n,t,y^V,y-1} \\
3080  *      \quad & \text{if } y > y^V \text{ and } y^V  > 'first\_period' \tex
      t{ and } |y| - |y^V| < technical\_lifetime_{n,t,y^V}
3081  *      \quad \forall \ t \in T^{INV}
3082  *
3083  ***
3084  *CAPACITY_MAINTENANCE_NO_ER(node,no_er_tec,vintage,year)$( map_tec_lifetim
      e(node,no_er_tec,vintage,year)
3085  *        AND NOT first_period(year) AND year_order(vintage) < year_order(y
      ear))..
3086  *    CAP(node,no_er_tec,vintage,year)
3087  *    =G= remaining_capacity(node,no_er_tec,vintage,year) *
3088  *        ( SUM(year2$( seq_period(year2,year) ),
3089  *              CAP(node,no_er_tec,vintage,year2) ) ) ;
3090  ***
3091  * Equation OPERATION_CONSTRAINT
3092  * """""""""""""""""""""""""""""
3093  * This constraint provides an upper bound on the total operation of instal
      led capacity over a year.
3094  * It can be used to represent reuqired scheduled unavailability of install
      ed capacity.
3095  *
3096  *   .. math::
3097  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h}
3098  *          \leq operation\_factor_{n,t,y^V,y} \cdot capacity\_factor_{n,t,
      y^V,y,m,\text{'year'}} \cdot CAP_{n,t,y^V,y}
3099  *      \quad \forall \ t \in T^{INV}
3100  *
3101  * This constraint is only active if :math:`operation\_factor_{n,t,y^V,y} <
       1`.
3102  ***
3103  OPERATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(node,in
      v_tec,vintage,year)
3104          AND operation_factor(node,inv_tec,vintage,year) < 1 )..
3105      SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node
      ,inv_tec,vintage,year,mode,time) ) =L=
3106          operation_factor(node,inv_tec,vintage,year) * capacity_factor(node
      ,inv_tec,vintage,year,'year')
3107          * CAP(node,inv_tec,vintage,year) ;
3108   
3109  ***
3110  * Equation MIN_UTILIZATION_CONSTRAINT
3111  * """""""""""""""""""""""""""""""""""
3112  * This constraint provides a lower bound on the total utilization of insta
      lled capacity over a year.
3113  *
3114  *   .. math::
3115  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h} \geq min\_utilization\_factor_{n,t,y
      ^V,y} \cdot CAP_{n,t,y^V,y}
3116  *      \quad \forall \ t \in T^{INV}
3117  *
3118  * This constraint is only active if :math:`min\_utilization\_factor_{n,t,y
      ^V,y}` is defined.
3119  *ORIGINAL EQUATION:
3120  *MIN_UTILIZATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(
      node,inv_tec,vintage,year)
3121  *        AND min_utilization_factor(node,inv_tec,vintage,year) )..
3122  *    SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(nod
      e,inv_tec,vintage,year,mode,time) ) =G=
3123  *        min_utilization_factor(node,inv_tec,vintage,year) * CAP(node,inv_
      tec,vintage,year) ;
3124  *
3125  ***
3126  MIN_UTILIZATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(n
      ode,inv_tec,vintage,year)
3127          AND min_utilization_factor(node,inv_tec,vintage,year) )..
3128      SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ),
3129                                              duration_time(time) *
3130                                              ACT(node,inv_tec,vintage,year,
      mode,time) *
3131                                              main_output_val(node,inv_tec,v
      intage,year,mode,time))
3132  * + SLACK_MUF(node,inv_tec,vintage,year)
3133                              =G=
3134          min_utilization_factor(node,inv_tec,vintage,year) * CAP(node,inv_t
      ec,vintage,year) ;
3135   
3136  *-------------------------------------------------------------------------
      ---------------------------------------------*
3137  ***
3138  * Equation MIN_UTILIZATION_CONSTRAINT BY TIME
3139  * """""""""""""""""""""""""""""""""""
3140  * This constraint provides a lower bound on the total utilization of insta
      lled capacity over a year.
3141  *
3142  *   .. math::
3143  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h} \geq min\_utilization\_factor_{n,t,y
      ^V,y} \cdot CAP_{n,t,y^V,y}
3144  *      \quad \forall \ t \in T^{INV}
3145  *
3146  * This constraint is only active if :math:`min\_utilization\_factor_{n,t,y
      ^V,y}` is defined.
3147  *ORIGINAL EQUATION:
3148  *MIN_UTILIZATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(
      node,inv_tec,vintage,year)
3149  *        AND min_utilization_factor(node,inv_tec,vintage,year) )..
3150  *    SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(nod
      e,inv_tec,vintage,year,mode,time) ) =G=
3151  *        min_utilization_factor(node,inv_tec,vintage,year) * CAP(node,inv_
      tec,vintage,year) ;
3152  *
3153  ***
3154  MIN_UTILIZATION_CONSTRAINT_TIME(node,inv_tec,vintage,year,time)$( map_tec_
      lifetime(node,inv_tec,vintage,year)
3155          AND min_utilization_time_factor(node,inv_tec,vintage,year,time) ).
      .
3156      SUM(mode$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_te
      c,vintage,year,mode,time) *
3157                                                  main_output_val(node,inv_t
      ec,vintage,year,mode,time)
3158                                                  )
3159  * + SLACK_MUF_TIME(node,inv_tec,vintage,year,time)
3160          =G=
3161  *        duration_time(time) *
3162          min_utilization_time_factor(node,inv_tec,vintage,year,time) * CAP(
      node,inv_tec,vintage,year) ;
3163   
3164  *-------------------------------------------------------------------------
      ---------------------------------------------*
3165   
3166  ***
3167  * Constraints representing renewable integration
3168  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3169  *
3170  * Equation RENEWABLES_EQUIVALENCE
3171  * """""""""""""""""""""""""""""""
3172  * This constraint defines the auxiliary variables :math:`REN`
3173  * to be equal to the output of renewable technologies (summed over grades)
      .
3174  *
3175  *  .. math::
3176  *     \sum_{g} REN_{n,t,c,g,y,h} \leq
3177  *     \sum_{\substack{n,t,m,l,h,h^{OD} \\ y^V \leq y  \\ \ l \in L^{REN} \
      subseteq L }}
3178  *         input_{n^L,t,y^V,y,m,n,c,l,h,h^{OD}} \cdot ACT_{n^L,t,m,y,h}
3179  *
3180  * The set :math:`L^{REN} \subseteq L` denotes all levels for which the det
      ailed representation of renewables applies.
3181  ***
3182  RENEWABLES_EQUIVALENCE(node,renewable_tec,commodity,year,time)$(
3183          map_tec(node,renewable_tec,year) AND map_ren_com(node,renewable_te
      c,commodity,year) )..
3184      SUM(grade$( map_ren_grade(node,commodity,grade,year) ), REN(node,renew
      able_tec,commodity,grade,year,time) )
3185      =E= SUM((location,vintage,mode,level_renewable,time_act)$(
3186                   map_tec_act(node,renewable_tec,year,mode,time)
3187                   AND map_tec_lifetime(node,renewable_tec,vintage,year) ),
3188          input(location,renewable_tec,vintage,year,mode,node,commodity,leve
      l_renewable,time_act,time)
3189          * ACT(location,renewable_tec,vintage,year,mode,time) ) ;
3190   
3191  ***
3192  * Equation RENEWABLES_POTENTIAL_CONSTRAINT
3193  * """"""""""""""""""""""""""""""""""""""""
3194  * This constraint sets the potential potential by grade as the upper bound
       for the auxiliary variable :math:`REN`.
3195  *
3196  *  .. math::
3197  *     \sum_{\substack{t,h \\ \ t \in T^{R} \subseteq t }} REN_{n,t,c,g,y,h
      }
3198  *         \leq \sum_{\substack{l \\ l \in L^{R} \subseteq L }} renewable\_
      potential_{n,c,g,l,y}
3199  *
3200  ***
3201  RENEWABLES_POTENTIAL_CONSTRAINT(node,commodity,grade,year)$( map_ren_grade
      (node,commodity,grade,year) )..
3202      SUM((renewable_tec,time)$( map_ren_com(node,renewable_tec,commodity,ye
      ar) ),
3203          REN(node,renewable_tec,commodity,grade,year,time) )
3204      =L= SUM(level_renewable, renewable_potential(node,commodity,grade,leve
      l_renewable,year) ) ;
3205   
3206  ***
3207  * Equation RENEWABLES_CAPACITY_REQUIREMENT
3208  * """"""""""""""""""""""""""""""""""""""""
3209  * This constraint connects the capacity factor of a renewable grade to the
3210  * installed capacity of a technology. It sets the lower limit for the capa
      city
3211  * of a renewable technology to the summed activity over all grades (REN) d
      evided
3212  * by the capactiy factor of this grade.
3213  * It represents the fact that different renewable grades require different
       installed
3214  * capacities to provide their full potential.
3215  *
3216  *  .. math::
3217  *     \sum_{y^V, h} & CAP_{n,t,y^V,y} \cdot operation\_factor_{n,t,y^V,y} 
      \cdot capacity\_factor_{n,t,y^V,y,h} \\
3218  *        & \quad \geq \sum_{g,h,l} \frac{1}{renewable\_capacity\_factor_{n
      ,c,g,l,y}} \cdot REN_{n,t,c,g,y,h}
3219  *
3220  * This constraint is only active if :math:`renewable\_capacity\_factor_{n,
      c,g,l,y}` is defined.
3221  ***
3222  RENEWABLES_CAPACITY_REQUIREMENT(node,inv_tec,commodity,year)$(
3223          SUM( (vintage,mode,time,grade,level_renewable),
3224              map_tec_lifetime(node,inv_tec,vintage,year) AND map_tec_act(no
      de,inv_tec,year,mode,time)
3225              AND map_ren_com(node,inv_tec,commodity,year)
3226              AND renewable_capacity_factor(node,commodity,grade,level_renew
      able,year) > 0 ) )..
3227      SUM( (vintage,time)$map_ren_com(node,inv_tec,commodity,year),
3228          CAP(node,inv_tec,vintage,year)
3229          * operation_factor(node,inv_tec,vintage,year)
3230          * capacity_factor(node,inv_tec,vintage,year,time) )
3231      =G= SUM((grade,time,level_renewable)$(renewable_capacity_factor(node,c
      ommodity,grade,level_renewable,year) > 0),
3232              REN(node,inv_tec,commodity,grade,year,time)
3233                   / renewable_capacity_factor(node,commodity,grade,level_re
      newable,year)) ;
3234   
3235  *-------------------------------------------------------------------------
      ---------------------------------------------*
3236  ***
3237  * Constraints for addon technologies
3238  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3239  *
3240  * Equation ADDON_ACTIVITY_UP
3241  * """"""""""""""""""""""""""
3242  * This constraint provides an upper bound on the activity of an addon tech
      nology that can only be operated
3243  * jointly with a parent technology (e.g., abatement option, SO2 scrubber, 
      power plant cooling technology).
3244  *
3245  *   .. math::
3246  *      \sum_{\substack{t^a, y^V \leq y}} ACT_{n,t^a,y^V,y,m,h}
3247  *      \leq
3248  *      \sum_{\substack{t, y^V \leq y}}
3249  *          & addon\_up_{n,t,y,m,h,\widehat{t^a}} \cdot
3250  *          addon\_conversion_{n,t,y^V,y,m,h,\widehat{t^a}} \\
3251  *          & \cdot ACT_{n,t,y^V,y,m,h} \quad \forall \ t^a \in T^{A}
3252  *
3253  ***
3254  ADDON_ACTIVITY_UP(node,type_addon,year,mode,time)..
3255  * activity of addon technology
3256      sum( (addon,vintage)$(
3257              cat_addon(type_addon,addon) AND
3258              map_tec_act(node,addon,year,mode,time) AND
3259              map_tec_lifetime(node,addon,vintage,year) ),
3260          ACT(node,addon,vintage,year,mode,time) )
3261      =L=
3262  * activity of corresponding parent-technology multiplied by upper bound of
       share
3263        sum((tec,vintage)$(
3264            map_tec_addon(tec,type_addon) AND
3265            map_tec_act(node,tec,year,mode,time) AND
3266            map_tec_lifetime(node,tec,vintage,year)
3267        ),
3268            addon_up(node,tec,year,mode,time,type_addon)
3269            * addon_conversion(node,tec,vintage,year,mode,time,type_addon)
3270            * ACT(node,tec,vintage,year,mode,time) )
3271  ;
3272   
3273  ***
3274  * Equation ADDON_ACTIVITY_LO
3275  * """"""""""""""""""""""""""
3276  * This constraint provides a lower bound on the activity of an addon techn
      ology that has to be operated
3277  * jointly with a parent technology (e.g., power plant cooling technology).
       The parameter `addon_lo` allows to define
3278  * a minimum level of operation of addon technologies relative to the activ
      ity of the parent technology.
3279  * If `addon_lo = 1`, this means that it is mandatory to operate the addon 
      technology at the same level as the
3280  * parent technology (i.e., full mitigation).
3281  *
3282  *   .. math::
3283  *      \sum_{\substack{t^a, y^V \leq y}} ACT_{n,t^a,y^V,y,m,h}
3284  *      \geq
3285  *      \sum_{\substack{t, y^V \leq y}}
3286  *          & addon\_lo_{n,t,y,m,h,\widehat{t^a}} \cdot
3287  *          addon\_conversion_{n,t,y^V,y,m,h,\widehat{t^a}} \\
3288  *          & \cdot ACT_{n,t,y^V,y,m,h} \quad \forall \ t^a \in T^{A}
3289  *
3290  ***
3291  ADDON_ACTIVITY_LO(node,type_addon,year,mode,time)..
3292  * activity of addon technology
3293      sum( (addon,vintage)$(
3294              cat_addon(type_addon,addon) AND
3295              map_tec_act(node,addon,year,mode,time) AND
3296              map_tec_lifetime(node,addon,vintage,year) ),
3297          ACT(node,addon,vintage,year,mode,time) )
3298      =G=
3299  * activity of corresponding parent-technology times lower bound of share
3300        sum((tec,vintage)$(
3301            map_tec_addon(tec,type_addon) AND
3302            map_tec_act(node,tec,year,mode,time) AND
3303            map_tec_lifetime(node,tec,vintage,year)
3304        ),
3305            addon_lo(node,tec,year,mode,time,type_addon)
3306            * addon_conversion(node,tec,vintage,year,mode,time,type_addon)
3307            * ACT(node,tec,vintage,year,mode,time) ) ;
3308   
3309  *-------------------------------------------------------------------------
      ---------------------------------------------*
3310  ***
3311  * System reliability and flexibility requirements
3312  * -----------------------------------------------
3313  * This section followi allows to include system-wide reliability and flexi
      lity considerations.
3314  * The current formulation is based on Sullivan et al., 2013 :cite:`sulliva
      n_VRE_2013`.
3315  *
3316  * Aggregate use of a commodity
3317  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3318  * The system reliability and flexibility constraints are implemented using
       an auxiliary variable representing
3319  * the total use (i.e., input of each commodity per level).
3320  *
3321  * Equation COMMODITY_USE_LEVEL
3322  * """"""""""""""""""""""""""""
3323  * This constraint defines the auxiliary variable :math:`COMMODITY\_USE_{n,
      c,l,y}`, which is used to define
3324  * the rating bins and the peak-load that needs to be offset with firm (dis
      patchable) capacity.
3325  *
3326  *   .. math::
3327  *      COMMODITY\_USE_{n,c,l,y}
3328  *      = & \sum_{n^L,t,y^V,m,h} input_{n^L,t,y^V,y,m,n,c,l,h,h} \\
3329  *        & \quad    \cdot duration\_time\_rel_{h,h} \cdot ACT_{n^L,t,y^V,y
      ,m,h}
3330  *
3331  * This constraint and the auxiliary variable is only active if :math:`peak
      \_load\_factor_{n,c,l,y,h}` or
3332  * :math:`flexibility\_factor_{n,t,y^V,y,m,c,l,h,r}` is defined.
3333  ***
3334  COMMODITY_USE_LEVEL(node,commodity,level,year,time)$(
3335           peak_load_factor(node,commodity,level,year,time) OR
3336           SUM( (tec,vintage,mode,rating), flexibility_factor(node,tec,vinta
      ge,year,mode,commodity,level,time,rating) ) )..
3337      COMMODITY_USE(node,commodity,level,year)
3338      =E=
3339      SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year
      ,mode,time2)
3340                                               AND map_tec_lifetime(location
      ,tec,vintage,year) ),
3341          input(location,tec,vintage,year,mode,node,commodity,level,time2,ti
      me)
3342          * duration_time_rel(time,time2)
3343          * ACT(location,tec,vintage,year,mode,time2) ) ;
3344   
3345  ***
3346  * .. _rating_bin:
3347  *
3348  * Auxilary variables for technology activity by "rating bins"
3349  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3350  * The capacity and activity of certain (usually non-dispatchable) technolo
      gies
3351  * can be assumed to only partially contribute to the system reliability an
      d flexibility requirements.
3352  *
3353  * Equation ACTIVITY_RATING_BIN
3354  * """"""""""""""""""""""""""""
3355  * The auxiliary variable for rating-specific activity of each technology c
      annot exceed
3356  * the share of the rating bin in relation to the total commodity use.
3357  *
3358  * .. math::
3359  *    ACT\_RATING_{n,t,y^V,y,c,l,h,q}
3360  *    \leq rating\_bin_{n,t,y,c,l,h,q} \cdot COMMODITY\_USE_{n,c,l,y}
3361  *
3362  ***
3363  ACTIVITY_BY_RATING(node,tec,year,commodity,level,time,rating)$(
3364           rating_bin(node,tec,year,commodity,level,time,rating) )..
3365     sum(vintage$( sum(mode,map_tec_act(node,tec,year,mode,time) ) AND map_t
      ec_lifetime(node,tec,vintage,year) ),
3366              ACT_RATING(node,tec,vintage,year,commodity,level,time,rating) 
      )
3367      =L= rating_bin(node,tec,year,commodity,level,time,rating) * COMMODITY_
      USE(node,commodity,level,year)
3368  ;
3369   
3370  ***
3371  * Equation ACTIVITY_SHARE_TOTAL
3372  * """""""""""""""""""""""""""""
3373  * The sum of the auxiliary rating-specific activity variables need to equa
      l the total input and/or output
3374  * of the technology.
3375  *
3376  * .. math::
3377  *    \sum_q ACT\_RATING_{n,t,y^V,y,c,l,h,q}
3378  *    = \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} &
3379  *         ( input_{n^L,t,y^V,y,m,n,c,l,h^A,h} + output_{n^L,t,y^V,y,m,n,c,
      l,h^A,h} ) \\
3380  *      & \quad    \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y
      ,m,h^A} \\
3381  *
3382  ***
3383  ACTIVITY_RATING_TOTAL(node,tec,vintage,year,commodity,level,time)$(
3384          sum(rating$( rating_bin(node,tec,year,commodity,level,time,rating)
       ), 1 )
3385          AND sum(mode, map_tec_act(node,tec,year,mode,time))
3386          AND map_tec_lifetime(node,tec,vintage,year) )..
3387      sum(rating$( rating_bin(node,tec,year,commodity,level,time,rating) ),
3388          ACT_RATING(node,tec,vintage,year,commodity,level,time,rating) )
3389      =E=
3390          SUM((location,mode,time2)$(
3391                map_tec_act(location,tec,year,mode,time2)
3392                AND map_tec_lifetime(location,tec,vintage,year) ),
3393              ( output(location,tec,vintage,year,mode,node,commodity,level,t
      ime2,time)
3394                + input(location,tec,vintage,year,mode,node,commodity,level,
      time2,time) )
3395                  * duration_time_rel(time,time2)
3396                  * ACT(location,tec,vintage,year,mode,time2) ) ;
3397   
3398  ***
3399  * .. _reliability_constraint:
3400  *
3401  * Reliability of installed capacity
3402  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3403  * The "firm capacity" that a technology can contribute to system reliabili
      ty depends on its dispatch characteristics.
3404  * For dispatchable technologies, the total installed capacity counts towar
      d the firm capacity constraint.
3405  * This is active if the parameter is defined over :math:`reliability\_fact
      or_{n,t,y,c,l,h,'firm'}`.
3406  * For non-dispatchable technologies, or those that do not have explicit in
      vestment decisions,
3407  * the contribution to system reliability is calculated
3408  * by using the auxiliary variable :math:`ACT\_RATING_{n,t,y^V,y,c,l,h,q}` 
      as a proxy,
3409  * with the :math:`reliability\_factor_{n,t,y,c,l,h,q}` defined per rating 
      bin :math:`q`.
3410  *
3411  * Equation FIRM_CAPACITY_PROVISION
3412  * """"""""""""""""""""""""""""""""
3413  * Technologies where the reliability factor is defined with the rating `fi
      rm`
3414  * have an auxiliary variable :math:`CAP\_FIRM_{n,t,c,l,y}`, defined in ter
      ms of output.
3415  *
3416  *   .. math::
3417  *      CAP\_FIRM_{n,t,c,l,y}
3418  *      = \sum_{y^V \leq y} & output_{n^L,t,y^V,y,m,n,c,l,h^A,h} \cdot dura
      tion\_time_h \\
3419  *        & \quad    \cdot capacity\_factor_{n,t,y^V,y,h} \cdot CAP_{n,t,y^
      Y,y}
3420  *      \quad \forall \ t \in T^{INV}
3421  *
3422  ***
3423  FIRM_CAPACITY_PROVISION(node,inv_tec,year,commodity,level,time)$(
3424          reliability_factor(node,inv_tec,year,commodity,level,time,'firm') 
      )..
3425      CAP_FIRM(node,inv_tec,commodity,level,year) =E=
3426      SUM( (location,vintage,mode,time2)$(
3427             map_tec_act(location,inv_tec,year,mode,time2)
3428             AND map_tec_lifetime(location,inv_tec,vintage,year) ),
3429          output(location,inv_tec,vintage,year,mode,node,commodity,level,tim
      e2,time)
3430          * duration_time(time)
3431          * capacity_factor(node,inv_tec,vintage,year,time)
3432          * CAP(node,inv_tec,vintage,year) ) ;
3433   
3434  ***
3435  * Equation SYSTEM_RELIABILITY_CONSTRAINT
3436  * """"""""""""""""""""""""""""""""""""""
3437  * This constraint ensures that there is sufficient firm (dispatchable) cap
      acity in each period.
3438  * The formulation is based on Sullivan et al., 2013 :cite:`sullivan_VRE_20
      13`.
3439  *
3440  *   .. math::
3441  *      \sum_{t, q \substack{t \in T^{INV} \\ y^V \leq y} } &
3442  *          reliability\_factor_{n,t,y,c,l,h,'firm'}
3443  *          \cdot CAP\_FIRM_{n,t,c,l,y} \\
3444  *      + \sum_{t,q,y^V \leq y} &
3445  *          reliability\_factor_{n,t,y,c,l,h,q}
3446  *         \cdot ACT\_RATING_{n,t,y^V,y,c,l,h,q} \\
3447  *         & \quad \geq peak\_load\_factor_{n,c,l,y,h} \cdot COMMODITY\_USE
      _{n,c,l,y}
3448  *
3449  * This constraint is only active if :math:`peak\_load\_factor_{n,c,l,y,h}`
       is defined.
3450  ***
3451  SYSTEM_RELIABILITY_CONSTRAINT(node,commodity,level,year,time)$( peak_load_
      factor(node,commodity,level,year,time) )..
3452      SUM(inv_tec$( reliability_factor(node,inv_tec,year,commodity,level,tim
      e,'firm') ),
3453          reliability_factor(node,inv_tec,year,commodity,level,time,'firm')
3454          * CAP_FIRM(node,inv_tec,commodity,level,year) )
3455      + SUM((tec, mode, vintage, rating_unfirm)$(
3456          reliability_factor(node,tec,year,commodity,level,time,rating_unfir
      m)
3457              AND map_tec_act(node,tec,year,mode,time)
3458              AND map_tec_lifetime(node,tec,vintage,year) ),
3459          reliability_factor(node,tec,year,commodity,level,time,rating_unfir
      m)
3460          * ACT_RATING(node,tec,vintage,year,commodity,level,time,rating_unf
      irm) )
3461      =G= peak_load_factor(node,commodity,level,year,time) * COMMODITY_USE(n
      ode,commodity,level,year) ;
3462   
3463  ***
3464  * .. _flexibility_constraint:
3465  *
3466  * Equation SYSTEM_FLEXIBILITY_CONSTRAINT
3467  * """"""""""""""""""""""""""""""""""""""
3468  * This constraint ensures that, in each sub-annual time slice, there is a 
      sufficient
3469  * contribution from flexible technologies to ensure smooth system operatio
      n.
3470  *
3471  *   .. math::
3472  *      \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} &
3473  *          flexibility\_factor_{n^L,t,y^V,y,m,c,l,h,'unrated'} \\
3474  *      & \quad   \cdot ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t
      ,y^V,y,m,n,c,l,h^A,h} ) \\
3475  *      & \quad   \cdot duration\_time\_rel_{h,h^A}
3476  *                \cdot ACT_{n,t,y^V,y,m,h} \\
3477  *      + \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} &
3478  *         flexibility\_factor_{n^L,t,y^V,y,m,c,l,h,1} \\
3479  *      & \quad   \cdot ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t
      ,y^V,y,m,n,c,l,h^A,h} ) \\
3480  *      & \quad   \cdot duration\_time\_rel_{h,h^A}
3481  *                \cdot ACT\_RATING_{n,t,y^V,y,c,l,h,q}
3482  *      \geq 0
3483  *
3484  ***
3485  SYSTEM_FLEXIBILITY_CONSTRAINT(node,commodity,level,year,time)$(
3486          SUM( (tec, vintage, mode, rating),
3487                  flexibility_factor(node,tec,vintage,year,mode,commodity,le
      vel,time,rating) ) )..
3488      SUM( (tec, vintage, mode)$( flexibility_factor(node,tec,vintage,year,m
      ode,commodity,level,time,'unrated') ),
3489          flexibility_factor(node,tec,vintage,year,mode,commodity,level,time
      ,'unrated')
3490          * SUM((location,time2)$(
3491                map_tec_act(location,tec,year,mode,time2)
3492                AND map_tec_lifetime(location,tec,vintage,year) ),
3493              ( output(location,tec,vintage,year,mode,node,commodity,level,t
      ime2,time)
3494                + input(location,tec,vintage,year,mode,node,commodity,level,
      time2,time) )
3495                  * duration_time_rel(time,time2)
3496                  * ACT(location,tec,vintage,year,mode,time2) ) )
3497      + SUM((tec, vintage, mode, rating_unrated)$(
3498              flexibility_factor(node,tec,vintage,year,mode,commodity,level,
      time,rating_unrated)
3499              AND map_tec_act(node,tec,year,mode,time)
3500              AND map_tec_lifetime(node,tec,vintage,year)),
3501          flexibility_factor(node,tec,vintage,year,mode,commodity,level,time
      ,rating_unrated)
3502          * ACT_RATING(node,tec,vintage,year,commodity,level,time,rating_unr
      ated) )
3503      =G= 0 ;
3504   
3505  ACT.LO(node,tec,vintage,year,mode,time)$sum(
3506      (commodity,level,rating), flexibility_factor(node,tec,vintage,year,mod
      e,commodity,level,time,rating) ) = 0 ;
3507   
3508  ***
3509  * Bounds on capacity and activity
3510  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3511  *
3512  * Equation NEW_CAPACITY_BOUND_UP
3513  * """"""""""""""""""""""""""""""
3514  * This constraint provides upper bounds on new capacity installation.
3515  *
3516  *   .. math::
3517  *      CAP\_NEW_{n,t,y} \leq bound\_new\_capacity\_up_{n,t,y} \quad \foral
      l \ t \ \in \ T^{INV}
3518  *
3519  ***
3520  NEW_CAPACITY_BOUND_UP(node,inv_tec,year)$( is_bound_new_capacity_up(node,i
      nv_tec,year) )..
3521      CAP_NEW(node,inv_tec,year) =L= bound_new_capacity_up(node,inv_tec,year
      )
3522  * + SLACK_CAP_NEW_BOUND_UP(node,inv_tec,year)
3523  ;
3524   
3525  ***
3526  * Equation NEW_CAPACITY_BOUND_LO
3527  * """"""""""""""""""""""""""""""
3528  * This constraint provides lower bounds on new capacity installation.
3529  *
3530  *   .. math::
3531  *      CAP\_NEW_{n,t,y} \geq bound\_new\_capacity\_lo_{n,t,y} \quad \foral
      l \ t \ \in \ T^{INV}
3532  *
3533  ***
3534  NEW_CAPACITY_BOUND_LO(node,inv_tec,year)$( is_bound_new_capacity_lo(node,i
      nv_tec,year) )..
3535      CAP_NEW(node,inv_tec,year) =G= bound_new_capacity_lo(node,inv_tec,year
      )
3536  * - SLACK_CAP_NEW_BOUND_LO(node,inv_tec,year)
3537  ;
3538   
3539  ***
3540  * Equation TOTAL_CAPACITY_BOUND_UP
3541  * """"""""""""""""""""""""""""""""
3542  * This constraint gives upper bounds on the total installed capacity of a 
      technology in a specific year of operation
3543  * summed over all vintages.
3544  *
3545  *   .. math::
3546  *      \sum_{y^V \leq y} CAP_{n,t,y,y^V} \leq bound\_total\_capacity\_up_{
      n,t,y} \quad \forall \ t \ \in \ T^{INV}
3547  *
3548  ***
3549  TOTAL_CAPACITY_BOUND_UP(node,inv_tec,year)$( is_bound_total_capacity_up(no
      de,inv_tec,year) )..
3550      SUM(vintage$( map_period(vintage,year) AND map_tec_lifetime(node,inv_t
      ec,vintage,year) ),
3551          CAP(node,inv_tec,vintage,year) )
3552      =L= bound_total_capacity_up(node,inv_tec,year)
3553  * + SLACK_CAP_TOTAL_BOUND_UP(node,inv_tec,year)
3554  ;
3555   
3556  ***
3557  * Equation TOTAL_CAPACITY_BOUND_LO
3558  * """"""""""""""""""""""""""""""""
3559  * This constraint gives lower bounds on the total installed capacity of a 
      technology.
3560  *
3561  *   .. math::
3562  *      \sum_{y^V \leq y} CAP_{n,t,y,y^V} \geq bound\_total\_capacity\_lo_{
      n,t,y} \quad \forall \ t \ \in \ T^{INV}
3563  *
3564  ***
3565  TOTAL_CAPACITY_BOUND_LO(node,inv_tec,year)$( is_bound_total_capacity_lo(no
      de,inv_tec,year) )..
3566      SUM(vintage$( map_period(vintage,year) AND map_tec_lifetime(node,inv_t
      ec,vintage,year) ),
3567          CAP(node,inv_tec,vintage,year) )
3568       =G= bound_total_capacity_lo(node,inv_tec,year)
3569  * - SLACK_CAP_TOTAL_BOUND_LO(node,inv_tec,year)
3570  ;
3571   
3572  ***
3573  * .. _activity_bound_up:
3574  *
3575  * Equation ACTIVITY_BOUND_UP
3576  * """"""""""""""""""""""""""
3577  * This constraint provides upper bounds by mode of a technology activity, 
      summed over all vintages.
3578  *
3579  *   .. math::
3580  *      \sum_{y^V \leq y} ACT_{n,t,y^V,y,m,h} \leq bound\_activity\_up_{n,t
      ,m,y,h}
3581  *
3582  *ORIGINAL EQUATION DOES NOT INCLUDE: "* main_output_val(node,tec,vintage,y
      ear,mode,time)"
3583  *
3584  ***
3585  ACTIVITY_BOUND_UP(node,tec,year,mode,time)$(
3586      is_bound_activity_up(node,tec,year,mode,time) AND map_tec_act(node,tec
      ,year,mode,time)
3587  )..
3588      SUM(
3589          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3590          ACT(node,tec,vintage,year,mode,time)
3591             * main_output_val(node,tec,vintage,year,mode,time)
3592                  )
3593      =L=
3594      bound_activity_up(node,tec,year,mode,time)
3595  * + SLACK_ACT_BOUND_UP(node,tec,year,mode,time)
3596  ;
3597   
3598  ***
3599  * Equation ACTIVITY_BOUND_ALL_MODES_UP
3600  * """"""""""""""""""""""""""""""""""""
3601  * This constraint provides upper bounds of a technology activity across al
      l modes and vintages.
3602  *
3603  *   .. math::
3604  *      \sum_{y^V \leq y, m} ACT_{n,t,y^V,y,m,h} \leq bound\_activity\_up_{
      n,t,y,'all',h}
3605  *
3606  ***
3607  ACTIVITY_BOUND_ALL_MODES_UP(node,tec,year,time)$( is_bound_activity_up(nod
      e,tec,year,'all',time) )..
3608      SUM(
3609          (vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_t
      ec_mode(node,tec,year,mode) ),
3610          ACT(node,tec,vintage,year,mode,time)
3611      )
3612      =L=
3613      bound_activity_up(node,tec,year,'all',time)
3614  * + SLACK_ACT_BOUND_UP(node,tec,year,'all',time)
3615  ;
3616   
3617  ***
3618  * .. _activity_bound_lo:
3619  *
3620  * Equation ACTIVITY_BOUND_LO
3621  * """"""""""""""""""""""""""
3622  * This constraint provides lower bounds by mode of a technology activity, 
      summed over
3623  * all vintages.
3624  *
3625  *   .. math::
3626  *      \sum_{y^V \leq y} ACT_{n,t,y^V,y,m,h} \geq bound\_activity\_lo_{n,t
      ,y,m,h}
3627  *
3628  * We assume that :math:`bound\_activity\_lo_{n,t,y,m,h} = 0`
3629  * unless explicitly stated otherwise.
3630  *ORIGINAL EQUATION DOES NOT INCLUDE: "* main_output_val(node,tec,vintage,y
      ear,mode,time)"
3631  *
3632  ***
3633  ACTIVITY_BOUND_LO(node,tec,year,mode,time)$( map_tec_act(node,tec,year,mod
      e,time) )..
3634      SUM(
3635          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3636          ACT(node,tec,vintage,year,mode,time)
3637             * main_output_val(node,tec,vintage,year,mode,time)
3638               )
3639      =G=
3640      bound_activity_lo(node,tec,year,mode,time)
3641  * - SLACK_ACT_BOUND_LO(node,tec,year,mode,time)
3642  ;
3643   
3644  ***
3645  * Equation ACTIVITY_BOUND_ALL_MODES_LO
3646  * """"""""""""""""""""""""""""""""""""
3647  * This constraint provides lower bounds of a technology activity across al
      l modes and vintages.
3648  *
3649  *   .. math::
3650  *      \sum_{y^V \leq y, m} ACT_{n,t,y^V,y,m,h} \geq bound\_activity\_lo_{
      n,t,y,'all',h}
3651  *
3652  * We assume that :math:`bound\_activity\_lo_{n,t,y,'all',h} = 0`
3653  * unless explicitly stated otherwise.
3654  ***
3655  ACTIVITY_BOUND_ALL_MODES_LO(node,tec,year,time)$( bound_activity_lo(node,t
      ec,year,'all',time) )..
3656      SUM(
3657          (vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_t
      ec_mode(node,tec,year,mode) ),
3658          ACT(node,tec,vintage,year,mode,time)
3659      )
3660      =G=
3661      bound_activity_lo(node,tec,year,'all',time)
3662  * - SLACK_ACT_BOUND_LO(node,tec,year,'all',time)
3663  ;
3664   
3665  *-------------------------------------------------------------------------
      ---------------------------------------------*
3666  ***
3667  * .. _share_constraints:
3668  *
3669  * Constraints on shares of technologies and commodities
3670  * -----------------------------------------------------
3671  * This section allows to include upper and lower bounds on the shares of m
      odes used by a technology
3672  * or the shares of commodities produced or consumed by groups of technolog
      ies.
3673  *
3674  * Share constraints on activity by mode
3675  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3676  * Equation SHARES_MODE_UP
3677  * """""""""""""""""""""""
3678  * This constraint provides upper bounds of the share of the activity of on
      e mode
3679  * of a technology. For example, it could limit the share of heat that can 
      be produced
3680  * in a combined heat and electricity power plant.
3681  *
3682  *   .. math::
3683  *     ACT_{n^L,t,y^V,y,m,h^A}
3684  *     \leq share\_mode\_up_{p,n,t,y,m,h} \cdot
3685  *     \sum_{m'} ACT_{n^L,t,y^V,y,m',h^A}
3686  *
3687  ***
3688  SHARE_CONSTRAINT_MODE_UP(shares,node,tec,mode,year,time)$(
3689      map_tec_act(node,tec,year,mode,time) AND
3690      share_mode_up(shares,node,tec,mode,year,time)
3691  )..
3692  * activity of mode to be constrained
3693      SUM(
3694          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3695          ACT(node,tec,vintage,year,mode,time)
3696      )
3697      =L=
3698      share_mode_up(shares,node,tec,mode,year,time) *
3699  * activity aggregated over all modes
3700      SUM(
3701          (vintage,mode2)$( map_tec_lifetime(node,tec,vintage,year) AND map_
      tec_mode(node,tec,year,mode2) ),
3702          ACT(node,tec,vintage,year,mode2,time)
3703      ) ;
3704   
3705  ***
3706  * Equation SHARES_MODE_LO
3707  * """""""""""""""""""""""
3708  * This constraint provides lower bounds of the share of the activity of on
      e mode of a technology.
3709  *
3710  *   .. math::
3711  *     ACT_{n^L,t,y^V,y,m,h^A}
3712  *     \geq share\_mode\_lo_{p,n,t,y,m,h} \cdot
3713  *     \sum_{m'} ACT_{n^L,t,y^V,y,m',h^A}
3714  *
3715  ***
3716  SHARE_CONSTRAINT_MODE_LO(shares,node,tec,mode,year,time)$(
3717      map_tec_act(node,tec,year,mode,time) AND
3718      share_mode_lo(shares,node,tec,mode,year,time)
3719  )..
3720  * activity of mode to be constrained
3721      SUM(
3722          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3723          ACT(node,tec,vintage,year,mode,time)
3724      )
3725      =G=
3726      share_mode_lo(shares,node,tec,mode,year,time) *
3727  * activity aggregated over all modes
3728      SUM(
3729          (vintage,mode2)$( map_tec_lifetime(node,tec,vintage,year) AND map_
      tec_mode(node,tec,year,mode2) ),
3730          ACT(node,tec,vintage,year,mode2,time)
3731      ) ;
3732   
3733  ***
3734  * Share constraints on commodities
3735  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3736  * These constraints allow to set upper and lower bound on the quantity of 
      commodities produced or consumed by a group
3737  * of technologies relative to the commodities produced or consumed by anot
      her group.
3738  *
3739  * The implementation is generic and flexible, so that any combination of c
      ommodities, levels, technologies and nodes
3740  * can be put in relation to any other combination.
3741  *
3742  * The notation :math:`P^{share}` represents the mapping set `map_shares_co
      mmodity_share` denoting all technology types,
3743  * nodes, commodities and levels to be included in the numerator, and :math
      :`P^{total}` is
3744  * the equivalent mapping set `map_shares_commodity_total` for the denomina
      tor.
3745  *
3746  * Equation SHARE_CONSTRAINT_COMMODITY_UP
3747  * """"""""""""""""""""""""""""""""""""""
3748  *   .. math::
3749  *      & \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) 
      \sim P^{share}}}
3750  *         ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,
      l,h^A,h} ) \\
3751  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,
      h^A} \\
3752  *      & \geq
3753  *        share\_commodity\_up_{p,n,y,h} \cdot
3754  *        \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) 
      \sim P^{total}}}
3755  *            ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n
      ,c,l,h^A,h} ) \\
3756  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,
      h^A}
3757  *
3758  * This constraint is only active if :math:`share\_commodity\_up_{p,n,y,h}`
       is defined.
3759  ***
3760  SHARE_CONSTRAINT_COMMODITY_UP(shares,node_share,year,time)$( share_commodi
      ty_up(shares,node_share,year,time) )..
3761  * activity by type_tec_share technologies with map_shares_generic_share en
      tries and a specific mode
3762      SUM( (node,location,type_tec_share,tec,vintage,mode,commodity,level,ti
      me2)$(
3763          ( map_shares_commodity_share(shares,node_share,node,type_tec_share
      ,mode,commodity,level) OR
3764            map_shares_commodity_share(shares,node_share,node,type_tec_share
      ,'all',commodity,level) ) AND
3765          cat_tec(type_tec_share,tec) AND
3766          map_tec_act(location,tec,year,mode,time2) AND
3767          map_tec_lifetime(location,tec,vintage,year)
3768      ),
3769          (
3770              output(location,tec,vintage,year,mode,node,commodity,level,tim
      e2,time) +
3771              input(location,tec,vintage,year,mode,node,commodity,level,time
      2,time)
3772          ) *
3773          duration_time_rel(time,time2) *
3774          ACT(location,tec,vintage,year,mode,time2)
3775      )
3776      =L=
3777      share_commodity_up(shares,node_share,year,time) * (
3778  * total input and output by `type_tec_total` technologies mapped to respec
      tive commodity, level and node
3779      SUM( (node,location,type_tec_total,tec,vintage,mode,commodity,level,ti
      me2)$(
3780          ( map_shares_commodity_total(shares,node_share,node,type_tec_total
      ,mode,commodity,level) OR
3781             map_shares_commodity_total(shares,node_share,node,type_tec_tota
      l,'all',commodity,level) ) AND
3782          cat_tec(type_tec_total,tec) AND
3783          map_tec_act(location,tec,year,mode,time2) AND
3784          map_tec_lifetime(location,tec,vintage,year)
3785      ),
3786          (
3787              output(location,tec,vintage,year,mode,node,commodity,level,tim
      e2,time) +
3788              input(location,tec,vintage,year,mode,node,commodity,level,time
      2,time)
3789          ) *
3790          duration_time_rel(time,time2) *
3791          ACT(location,tec,vintage,year,mode,time2)
3792      ) ) ;
3793   
3794  ***
3795  * Equation SHARE_CONSTRAINT_COMMODITY_LO
3796  * """"""""""""""""""""""""""""""""""""""
3797  *   .. math::
3798  *      & \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) 
      \sim P^{share}}}
3799  *         ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,
      l,h^A,h} ) \\
3800  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,
      h^A} \\
3801  *      & \leq
3802  *        share\_commodity\_lo_{p,n,y,h} \cdot
3803  *        \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) 
      \sim P^{total}}}
3804  *            ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n
      ,c,l,h^A,h} ) \\
3805  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,
      h^A}
3806  *
3807  * This constraint is only active if :math:`share\_commodity\_lo_{p,n,y,h}`
       is defined.
3808  ***
3809  SHARE_CONSTRAINT_COMMODITY_LO(shares,node_share,year,time)$( share_commodi
      ty_lo(shares,node_share,year,time) )..
3810  * total input and output by `type_tec_share` technologies mapped to respec
      tive commodity, level and node
3811      SUM( (node,location,type_tec_share,tec,vintage,mode,commodity,level,ti
      me2)$(
3812          ( map_shares_commodity_share(shares,node_share,node,type_tec_share
      ,mode,commodity,level) OR
3813             map_shares_commodity_share(shares,node_share,node,type_tec_shar
      e,'all',commodity,level) ) AND
3814          cat_tec(type_tec_share,tec) AND
3815          map_tec_act(location,tec,year,mode,time2) AND
3816          map_tec_lifetime(location,tec,vintage,year)
3817      ),
3818          (
3819              output(location,tec,vintage,year,mode,node,commodity,level,tim
      e2,time) +
3820              input(location,tec,vintage,year,mode,node,commodity,level,time
      2,time)
3821          ) *
3822          duration_time_rel(time,time2) *
3823          ACT(location,tec,vintage,year,mode,time2)
3824      )
3825      =G=
3826      share_commodity_lo(shares,node_share,year,time) * (
3827  * total input and output by `type_tec_total` technologies mapped to respec
      tive commodity, level and node
3828      SUM( (node,location,type_tec_total,tec,vintage,mode,commodity,level,ti
      me2)$(
3829          ( map_shares_commodity_total(shares,node_share,node,type_tec_total
      ,mode,commodity,level) OR
3830             map_shares_commodity_total(shares,node_share,node,type_tec_tota
      l,'all',commodity,level) ) AND
3831          cat_tec(type_tec_total,tec) AND
3832          map_tec_act(location,tec,year,mode,time2) AND
3833          map_tec_lifetime(location,tec,vintage,year)
3834      ),
3835          (
3836              output(location,tec,vintage,year,mode,node,commodity,level,tim
      e2,time) +
3837              input(location,tec,vintage,year,mode,node,commodity,level,time
      2,time)
3838          ) *
3839          duration_time_rel(time,time2) *
3840          ACT(location,tec,vintage,year,mode,time2)
3841      ) ) ;
3842   
3843  ***
3844  * .. _dynamic_constraints:
3845  *
3846  * Dynamic constraints on market penetration
3847  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3848  * The constraints in this section specify dynamic upper and lower bounds o
      n new capacity and activity,
3849  * i.e., constraints on market penetration and rate of expansion or phase-o
      ut of a technology.
3850  *
3851  * The formulation directly includes the option for 'soft' relaxations of d
      ynamic constraints
3852  * (cf. Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
3853  *
3854  * Equation NEW_CAPACITY_CONSTRAINT_UP
3855  * """""""""""""""""""""""""""""""""""
3856  * The level of new capacity additions cannot be greater than an initial va
      lue (compounded over the period duration),
3857  * annual growth of the existing 'capital stock', and a "soft" relaxation o
      f the upper bound.
3858  *
3859  *  .. math::
3860  *     CAP\_NEW_{n,t,y}
3861  *         \leq & ~ initial\_new\_capacity\_up_{n,t,y}
3862  *             \cdot \frac{ \Big( 1 + growth\_new\_capacity\_up_{n,t,y} \Bi
      g)^{|y|} - 1 }
3863  *                        { growth\_new\_capacity\_up_{n,t,y} } \\
3864  *              & + \Big( CAP\_NEW_{n,t,y-1} + historical\_new\_capacity_{n
      ,t,y-1} \Big) \\
3865  *              & \hspace{2 cm} \cdot \Big( 1 + growth\_new\_capacity\_up_{
      n,t,y} \Big)^{|y|} \\
3866  *              & + CAP\_NEW\_UP_{n,t,y} \cdot \Bigg( \Big( 1 + soft\_new\_
      capacity\_up_{n,t,y}\Big)^{|y|} - 1 \Bigg) \\
3867  *         & \quad \forall \ t \ \in \ T^{INV}
3868  *
3869  * Here, :math:`|y|` is the number of years in period :math:`y`, i.e., :mat
      h:`duration\_period_{y}`.
3870  ***
3871  NEW_CAPACITY_CONSTRAINT_UP(node,inv_tec,year)$( map_tec(node,inv_tec,year)
3872          AND is_dynamic_new_capacity_up(node,inv_tec,year) )..
3873  * actual new capacity
3874      CAP_NEW(node,inv_tec,year) =L=
3875  * initial new capacity (compounded over the duration of the period)
3876          initial_new_capacity_up(node,inv_tec,year) * (
3877              ( ( POWER( 1 + growth_new_capacity_up(node,inv_tec,year) , dur
      ation_period(year) ) - 1 )
3878                  / growth_new_capacity_up(node,inv_tec,year) )$( growth_new
      _capacity_up(node,inv_tec,year) )
3879                + ( duration_period(year) )$( NOT growth_new_capacity_up(nod
      e,inv_tec,year) )
3880              )
3881  * growth of 'capital stock' from previous period
3882          + SUM(year_all2$( seq_period(year_all2,year) ),
3883              CAP_NEW(node,inv_tec,year_all2)$( map_tec(node,inv_tec,year_al
      l2) AND model_horizon(year_all2) )
3884                + historical_new_capacity(node,inv_tec,year_all2) )
3885                # placeholder for spillover across nodes, technologies, peri
      ods (other than immediate predecessor)
3886              * POWER( 1 + growth_new_capacity_up(node,inv_tec,year) , durat
      ion_period(year) )
3887  * 'soft' relaxation of dynamic constraints
3888          + ( CAP_NEW_UP(node,inv_tec,year)
3889              * ( POWER( 1 + soft_new_capacity_up(node,inv_tec,year) , durat
      ion_period(year) ) - 1 )
3890             )$( soft_new_capacity_up(node,inv_tec,year) )
3891  * optional relaxation for calibration and debugging
3892  * + SLACK_CAP_NEW_DYNAMIC_UP(node,inv_tec,year)
3893  ;
3894   
3895  * GAMS implementation comment:
3896  * The sums in the constraint have to be over `year_all2` (not `year2`) to 
      also get the dynamic effect from historical
3897  * new capacity. If one would sum over `year2`, periods prior to the first 
      model year would be ignored.
3898   
3899  ***
3900  * Equation NEW_CAPACITY_SOFT_CONSTRAINT_UP
3901  * """"""""""""""""""""""""""""""""""""""""
3902  * This constraint ensures that the relaxation of the dynamic constraint on
       new capacity (investment) does not exceed
3903  * the level of the investment in the same period (cf. Keppo and Strubegger
      , 2010 :cite:`keppo_short_2010`).
3904  *
3905  *  .. math::
3906  *     CAP\_NEW\_UP_{n,t,y} \leq CAP\_NEW_{n,t,y} \quad \forall \ t \ \in \
       T^{INV}
3907  *
3908  ***
3909  NEW_CAPACITY_SOFT_CONSTRAINT_UP(node,inv_tec,year)$( soft_new_capacity_up(
      node,inv_tec,year) )..
3910      CAP_NEW_UP(node,inv_tec,year) =L= CAP_NEW(node,inv_tec,year) ;
3911   
3912  ***
3913  * Equation NEW_CAPACITY_CONSTRAINT_LO
3914  * """""""""""""""""""""""""""""""""""
3915  * This constraint gives dynamic lower bounds on new capacity.
3916  *
3917  *  .. math::
3918  *     CAP\_NEW_{n,t,y}
3919  *         \geq & - initial\_new\_capacity\_lo_{n,t,y}
3920  *             \cdot \frac{ \Big( 1 + growth\_new\_capacity\_lo_{n,t,y} \Bi
      g)^{|y|} }
3921  *                        { growth\_new\_capacity\_lo_{n,t,y} } \\
3922  *              & + \Big( CAP\_NEW_{n,t,y-1} + historical\_new\_capacity_{n
      ,t,y-1} \Big) \\
3923  *              & \hspace{2 cm} \cdot \Big( 1 + growth\_new\_capacity\_lo_{
      n,t,y} \Big)^{|y|} \\
3924  *              & - CAP\_NEW\_LO_{n,t,y} \cdot \Bigg( \Big( 1 + soft\_new\_
      capacity\_lo_{n,t,y}\Big)^{|y|} - 1 \Bigg) \\
3925  *         & \quad \forall \ t \ \in \ T^{INV}
3926  *
3927  ***
3928  NEW_CAPACITY_CONSTRAINT_LO(node,inv_tec,year)$( map_tec(node,inv_tec,year)
3929          AND is_dynamic_new_capacity_lo(node,inv_tec,year) )..
3930  * actual new capacity
3931      CAP_NEW(node,inv_tec,year) =G=
3932  * initial new capacity (compounded over the duration of the period)
3933          - initial_new_capacity_lo(node,inv_tec,year) * (
3934              ( ( POWER( 1 + growth_new_capacity_lo(node,inv_tec,year) , dur
      ation_period(year) ) - 1 )
3935                  / growth_new_capacity_lo(node,inv_tec,year) )$( growth_new
      _capacity_lo(node,inv_tec,year) )
3936                + ( duration_period(year) )$( NOT growth_new_capacity_lo(nod
      e,inv_tec,year) )
3937              )
3938  * growth of 'capital stock' from previous period
3939          + SUM(year_all2$( seq_period(year_all2,year) ),
3940                  CAP_NEW(node,inv_tec,year_all2)$( map_tec(node,inv_tec,yea
      r_all2) AND model_horizon(year_all2) )
3941                  + historical_new_capacity(node,inv_tec,year_all2)
3942                  # placeholder for spillover across nodes, technologies, pe
      riods (other than immediate predecessor)
3943              ) * POWER( 1 + growth_new_capacity_lo(node,inv_tec,year) , dur
      ation_period(year) )
3944  * 'soft' relaxation of dynamic constraints
3945          - ( CAP_NEW_LO(node,inv_tec,year)
3946              * ( POWER( 1 + soft_new_capacity_lo(node,inv_tec,year) , durat
      ion_period(year) ) - 1 )
3947             )$( soft_new_capacity_lo(node,inv_tec,year) )
3948  * optional relaxation for calibration and debugging
3949  * - SLACK_CAP_NEW_DYNAMIC_LO(node,inv_tec,year)
3950  ;
3951   
3952  ***
3953  * Equation NEW_CAPACITY_SOFT_CONSTRAINT_LO
3954  * """"""""""""""""""""""""""""""""""""""""
3955  * This constraint ensures that the relaxation of the dynamic constraint on
       new capacity does not exceed
3956  * level of the investment in the same year.
3957  *
3958  *   .. math::
3959  *      CAP\_NEW\_LO_{n,t,y} \leq CAP\_NEW_{n,t,y} \quad \forall \ t \ \in 
      \ T^{INV}
3960  *
3961  ***
3962  NEW_CAPACITY_SOFT_CONSTRAINT_LO(node,inv_tec,year)$( soft_new_capacity_lo(
      node,inv_tec,year) )..
3963      CAP_NEW_LO(node,inv_tec,year) =L= CAP_NEW(node,inv_tec,year) ;
3964   
3965  ***
3966  * Equation ACTIVITY_CONSTRAINT_UP
3967  * """""""""""""""""""""""""""""""
3968  * This constraint gives dynamic upper bounds on the market penetration of 
      a technology activity.
3969  *
3970  *  .. math::
3971  *     \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
3972  *         \leq & ~ initial\_activity\_up_{n,t,y,h}
3973  *             \cdot \frac{ \Big( 1 + growth\_activity\_up_{n,t,y,h} \Big)^
      {|y|} - 1 }
3974  *                        { growth\_activity\_up_{n,t,y,h} } \\
3975  *             & + \bigg( \sum_{y^V \leq y-1,m} ACT_{n,t,y^V,y-1,m,h}
3976  *                         + \sum_{m} historical\_activity_{n,t,y-1,m,h} \b
      igg) \\
3977  *             & \hspace{2 cm} \cdot \Big( 1 + growth\_activity\_up_{n,t,y,
      h} \Big)^{|y|} \\
3978  *             & + ACT\_UP_{n,t,y,h} \cdot \Bigg( \Big( 1 + soft\_activity\
      _up_{n,t,y,h} \Big)^{|y|} - 1 \Bigg)
3979  *
3980  ***
3981  ACTIVITY_CONSTRAINT_UP(node,tec,year,time)$( map_tec_time(node,tec,year,ti
      me)
3982          AND is_dynamic_activity_up(node,tec,year,time) )..
3983  * actual activity (summed over modes)
3984      SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_t
      ec_mode(node,tec,year,mode) ),
3985              ACT(node,tec,vintage,year,mode,time) ) =L=
3986  * initial activity (compounded over the duration of the period)
3987          initial_activity_up(node,tec,year,time) * (
3988              ( ( POWER( 1 + growth_activity_up(node,tec,year,time) , durati
      on_period(year) ) - 1 )
3989                  / growth_activity_up(node,tec,year,time) )$( growth_activi
      ty_up(node,tec,year,time) )
3990                + ( duration_period(year) )$( NOT growth_activity_up(node,te
      c,year,time) )
3991              )
3992  * growth of 'capital stock' from previous period
3993          + SUM((year_all2)$( seq_period(year_all2,year) ),
3994              SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year_al
      l2) AND map_tec_mode(node,tec,year_all2,mode)
3995                                   AND model_horizon(year_all2) ),
3996                          ACT(node,tec,vintage,year_all2,mode,time) )
3997                  + SUM(mode, historical_activity(node,tec,year_all2,mode,ti
      me) )
3998                  # placeholder for spillover across nodes, technologies, pe
      riods (other than immediate predecessor)
3999                  )
4000              * POWER( 1 + growth_activity_up(node,tec,year,time) , duration
      _period(year) )
4001  * 'soft' relaxation of dynamic constraints
4002          + ( ACT_UP(node,tec,year,time)
4003                  * ( POWER( 1 + soft_activity_up(node,tec,year,time) , dura
      tion_period(year) ) - 1 )
4004              )$( soft_activity_up(node,tec,year,time) )
4005  * optional relaxation for calibration and debugging
4006  * + SLACK_ACT_DYNAMIC_UP(node,tec,year,time)
4007  ;
4008   
4009  ***
4010  * Equation ACTIVITY_SOFT_CONSTRAINT_UP
4011  * """"""""""""""""""""""""""""""""""""
4012  * This constraint ensures that the relaxation of the dynamic activity cons
      traint does not exceed the
4013  * level of the activity.
4014  *
4015  *   .. math::
4016  *      ACT\_UP_{n,t,y,h} \leq \sum_{y^V \leq y,m} ACT_{n^L,t,y^V,y,m,h}
4017  *
4018  ***
4019  ACTIVITY_SOFT_CONSTRAINT_UP(node,tec,year,time)$( soft_activity_up(node,te
      c,year,time) )..
4020      ACT_UP(node,tec,year,time) =L=
4021          SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND m
      ap_tec_act(node,tec,year,mode,time) ),
4022              ACT(node,tec,vintage,year,mode,time) ) ;
4023   
4024  ***
4025  * Equation ACTIVITY_CONSTRAINT_LO
4026  * """""""""""""""""""""""""""""""
4027  * This constraint gives dynamic lower bounds on the market penetration of 
      a technology activity.
4028  *
4029  *  .. math::
4030  *     \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
4031  *         \geq & - initial\_activity\_lo_{n,t,y,h}
4032  *             \cdot \frac{ \Big( 1 + growth\_activity\_lo_{n,t,y,h} \Big)^
      {|y|} - 1 }
4033  *                        { growth\_activity\_lo_{n,t,y,h} } \\
4034  *             & + \bigg( \sum_{y^V \leq y-1,m} ACT_{n,t,y^V,y-1,m,h}
4035  *                         + \sum_{m} historical\_activity_{n,t,y-1,m,h} \b
      igg) \\
4036  *             & \hspace{2 cm} \cdot \Big( 1 + growth\_activity\_lo_{n,t,y,
      h} \Big)^{|y|} \\
4037  *             & - ACT\_LO_{n,t,y,h} \cdot \Bigg( \Big( 1 + soft\_activity\
      _lo_{n,t,y,h} \Big)^{|y|} - 1 \Bigg)
4038  *
4039  ***
4040  ACTIVITY_CONSTRAINT_LO(node,tec,year,time)$( map_tec_time(node,tec,year,ti
      me)
4041          AND is_dynamic_activity_lo(node,tec,year,time) )..
4042  * actual activity (summed over modes)
4043      SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_t
      ec_mode(node,tec,year,mode) ),
4044              ACT(node,tec,vintage,year,mode,time) ) =G=
4045  * initial activity (compounded over the duration of the period)
4046          - initial_activity_lo(node,tec,year,time) * (
4047              ( ( POWER( 1 + growth_activity_lo(node,tec,year,time) , durati
      on_period(year) ) - 1 )
4048                  / growth_activity_lo(node,tec,year,time) )$( growth_activi
      ty_lo(node,tec,year,time) )
4049                + ( duration_period(year) )$( NOT growth_activity_lo(node,te
      c,year,time) )
4050              )
4051  * growth of 'capital stock' from previous period
4052          + SUM((year_all2)$( seq_period(year_all2,year) ),
4053              SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year_al
      l2) AND map_tec_mode(node,tec,year_all2,mode)
4054                                   AND model_horizon(year_all2)),
4055                          ACT(node,tec,vintage,year_all2,mode,time) )
4056                  + SUM(mode, historical_activity(node,tec,year_all2,mode,ti
      me) )
4057                  # placeholder for spillover across nodes, technologies, pe
      riods (other than immediate predecessor)
4058                  )
4059              * POWER( 1 + growth_activity_lo(node,tec,year,time) , duration
      _period(year) )
4060  * 'soft' relaxation of dynamic constraints
4061          - ( ACT_LO(node,tec,year,time)
4062              * ( POWER( 1 + soft_activity_lo(node,tec,year,time) , duration
      _period(year) ) - 1 )
4063              )$( soft_activity_lo(node,tec,year,time) )
4064  * optional relaxation for calibration and debugging
4065  * - SLACK_ACT_DYNAMIC_LO(node,tec,year,time)
4066  ;
4067   
4068  ***
4069  * Equation ACTIVITY_SOFT_CONSTRAINT_LO
4070  * """"""""""""""""""""""""""""""""""""
4071  * This constraint ensures that the relaxation of the dynamic activity cons
      traint does not exceed the
4072  * level of the activity.
4073  *
4074  *   .. math::
4075  *      ACT\_LO_{n,t,y,h} \leq \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
4076  *
4077  ***
4078  ACTIVITY_SOFT_CONSTRAINT_LO(node,tec,year,time)$( soft_activity_lo(node,te
      c,year,time) )..
4079      ACT_LO(node,tec,year,time) =L=
4080          SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND m
      ap_tec_act(node,tec,year,mode,time) ),
4081              ACT(node,tec,vintage,year,mode,time) ) ;
4082   
4083  *-------------------------------------------------------------------------
      ---------------------------------------------*
4084  ***
4085  * Emission section
4086  * ----------------
4087  *
4088  * Auxiliary variable for aggregate emissions
4089  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4090  *
4091  * Equation EMISSION_EQUIVALENCE
4092  * """""""""""""""""""""""""""""
4093  * This constraint simplifies the notation of emissions aggregated over dif
      ferent technology types
4094  * and the land-use model emulator. The formulation includes emissions from
       all sub-nodes :math:`n^L` of :math:`n`.
4095  *
4096  *   .. math::
4097  *      EMISS_{n,e,\widehat{t},y} =
4098  *          \sum_{n^L \in N(n)} \Bigg(
4099  *              \sum_{t \in T(\widehat{t}),y^V \leq y,m,h }
4100  *                  emission\_factor_{n^L,t,y^V,y,m,e} \cdot ACT_{n^L,t,y^V
      ,y,m,h} \\
4101  *              + \sum_{s} \ land\_emission_{n^L,s,y,e} \cdot LAND_{n^L,s,y
      }
4102  *                   \text{ if } \widehat{t} \in \widehat{T}^{LAND} \Bigg)
4103  *
4104  ***
4105  EMISSION_EQUIVALENCE(node,emission,type_tec,year)..
4106      EMISS(node,emission,type_tec,year)
4107      =E=
4108      SUM(location$( map_node(node,location) ),
4109  * emissions from technology activity
4110          SUM((tec,vintage,mode,time)$( cat_tec(type_tec,tec)
4111              AND map_tec_act(location,tec,year,mode,time) AND map_tec_lifet
      ime(location,tec,vintage,year) ),
4112          emission_factor(location,tec,vintage,year,mode,emission) * ACT(loc
      ation,tec,vintage,year,mode,time)
4113                    *  main_output_val(location,tec,vintage,year,mode,time)
4114          * duration_time(time)
4115          )
4116  * emissions from land use if 'type_tec' is included in the dynamic set 'ty
      pe_tec_land'
4117          + SUM(land_scenario$( type_tec_land(type_tec) ),
4118              land_emission(location,land_scenario,year,emission) * LAND(loc
      ation,land_scenario,year) )
4119        ) ;
4120   
4121  ***
4122   
4123  if (EMISS(node,emission,type_tec,year) > 0,
****          $143,141,149   $149     $149 $149
**** LINE   1856 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_core.gms
**** LINE     86 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_setup.gms
**** LINE     65 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
**** 143  A suffix is missing
**** 149  Uncontrolled set entered as constant
4124      EMISSV(node,emission,type_tec,year) = EMISS(node,emission,type_tec,yea
****                                                $143
      r);
**** LINE   1857 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_core.gms
**** LINE     86 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_setup.gms
**** LINE     65 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 143  A suffix is missing
4125  else
4126      EMISSV(node,emission,type_tec,year) = 0;
4127  );
4128   
4129   
4130   
4131  * Bound on emissions
4132  * ^^^^^^^^^^^^^^^^^^
4133  *
4134  * .. _emission_constraint:
4135  *
4136  * Equation EMISSION_CONSTRAINT
4137  * """"""""""""""""""""""""""""
4138  * This constraint enforces upper bounds on emissions (by emission type). F
      or all bounds that include multiple periods,
4139  * the parameter :math:`bound\_emission_{n,\widehat{e},\widehat{t},\widehat
      {y}}` is scaled to represent average annual
4140  * emissions over all years included in the year-set :math:`\widehat{y}`.
4141  *
4142  * The formulation includes historical emissions and allows to model constr
      aints ranging over both the model horizon
4143  * and historical periods.
4144  *
4145  *   .. math::
4146  *      \frac{
4147  *          \sum_{y' \in Y(\widehat{y}), e \in E(\widehat{e})}
4148  *              \begin{array}{l}
4149  *                  duration\_period_{y'} \cdot emission\_scaling_{\widehat
      {e},e} \cdot \\
4150  *                  \Big( EMISS_{n,e,\widehat{t},y'} + \sum_{m} historical\
      _emission_{n,e,\widehat{t},y'} \Big)
4151  *              \end{array}
4152  *          }
4153  *        { \sum_{y' \in Y(\widehat{y})} duration\_period_{y'} }
4154  *      \leq bound\_emission_{n,\widehat{e},\widehat{t},\widehat{y}}
4155  *
4156  ***
4157  EMISSION_CONSTRAINT(node,type_emission,type_tec,type_year)$is_bound_emissi
      on(node,type_emission,type_tec,type_year)..
4158      SUM( (year_all2,emission)$( cat_year(type_year,year_all2) AND cat_emis
      sion(type_emission,emission) ),
4159          emission_duration_period(year_all2) * emission_scaling(type_emissi
      on,emission) *
4160              ( EMISS(node,emission,type_tec,year_all2)$( year(year_all2) )
4161                  + historical_emission(node,emission,type_tec,year_all2) )
4162        )
4163  *    / SUM(year_all2$( cat_year(type_year,year_all2) ), duration_period(ye
      ar_all2) )
4164  * - SLACK_EMISSION(node,type_emission,type_tec,type_year)
4165      =L= bound_emission(node,type_emission,type_tec,type_year) ;
4166   
4167  *-------------------------------------------------------------------------
      ---------------------------------------------*
4168  ***
4169  * Land-use model emulator section
4170  * -------------------------------
4171  *
4172  * Bounds on total land use
4173  * ^^^^^^^^^^^^^^^^^^^^^^^^
4174  *
4175  * Equation LAND_CONSTRAINT
4176  * """"""""""""""""""""""""
4177  * This constraint enforces a meaningful result of the land-use model emula
      tor,
4178  * in particular a bound on the total land used in |MESSAGEix|.
4179  * The linear combination of land scenarios must be equal to 1.
4180  *
4181  *  .. math::
4182  *     \sum_{s \in S} LAND_{n,s,y} = 1
4183  *
4184  ***
4185  LAND_CONSTRAINT(node,year)$( SUM(land_scenario$( map_land(node,land_scenar
      io,year) ), 1 ) ) ..
4186      SUM(land_scenario$( map_land(node,land_scenario,year) ), LAND(node,lan
      d_scenario,year) ) =E= 1 ;
4187   
4188  ***
4189  * Dynamic constraints on land use
4190  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4191  * These constraints enforces upper and lower bounds on the change rate per
       land scenario.
4192  *
4193  * Equation DYNAMIC_LAND_SCEN_CONSTRAINT_UP
4194  * """"""""""""""""""""""""""""""""""""""""
4195  *
4196  *  .. math::
4197  *     LAND_{n,s,y}
4198  *         \leq & initial\_land\_scen\_up_{n,s,y}
4199  *             \cdot \frac{ \Big( 1 + growth\_land\_scen\_up_{n,s,y} \Big)^
      {|y|} - 1 }
4200  *                        { growth\_land\_scen\_up_{n,s,y} } \\
4201  *              & + \big( LAND_{n,s,y-1} + historical\_land_{n,s,y-1} \big)
4202  *                  \cdot \Big( 1 + growth\_land\_scen\_up_{n,s,y} \Big)^{|
      y|}
4203  *
4204  ***
4205  DYNAMIC_LAND_SCEN_CONSTRAINT_UP(node,land_scenario,year)$( map_land(node,l
      and_scenario,year)
4206          AND is_dynamic_land_scen_up(node,land_scenario,year) )..
4207  * share of land scenario in
4208      LAND(node,land_scenario,year) =L=
4209  * initial 'new' land used for that type (compounded over the duration of t
      he period)
4210          initial_land_scen_up(node,land_scenario,year) * (
4211              ( ( POWER( 1 + growth_land_scen_up(node,land_scenario,year) , 
      duration_period(year) ) - 1 )
4212                  / growth_land_scen_up(node,land_scenario,year) )$( growth_
      land_scen_up(node,land_scenario,year) )
4213                + ( duration_period(year) )$( NOT growth_land_scen_up(node,l
      and_scenario,year) )
4214              )
4215  * expansion of land scenario from previous period
4216          + SUM((year_all2)$( seq_period(year_all2,year) ),
4217                  ( LAND(node,land_scenario,year_all2)$( model_horizon(year_
      all2) )
4218                    + historical_land(node,land_scenario,year_all2) )
4219                  * POWER( 1 + growth_land_scen_up(node,land_scenario,year) 
      , duration_period(year) )
4220              )
4221  * optional relaxation for calibration and debugging
4222  * + SLACK_LAND_SCEN_UP(node,land_scenario,year)
4223  ;
4224   
4225  ***
4226  * Equation DYNAMIC_LAND_SCEN_CONSTRAINT_LO
4227  * """"""""""""""""""""""""""""""""""""""""
4228  *
4229  *  .. math::
4230  *     LAND_{n,s,y}
4231  *         \geq & - initial\_land\_scen\_lo_{n,s,y}
4232  *             \cdot \frac{ \Big( 1 + growth\_land\_scen\_lo_{n,s,y} \Big)^
      {|y|} - 1 }
4233  *                        { growth\_land\_scen\_lo_{n,s,y} } \\
4234  *              & + \big( LAND_{n,s,y-1} + historical\_land_{n,s,y-1} \big)
4235  *                  \cdot \Big( 1 + growth\_land\_scen\_lo_{n,s,y} \Big)^{|
      y|}
4236  *
4237  ***
4238  DYNAMIC_LAND_SCEN_CONSTRAINT_LO(node,land_scenario,year)$( map_land(node,l
      and_scenario,year)
4239          AND is_dynamic_land_scen_lo(node,land_scenario,year) )..
4240  * share of land scenario in
4241      LAND(node,land_scenario,year) =G=
4242  * initial 'new' land used for that type (compounded over the duration of t
      he period)
4243          - initial_land_scen_lo(node,land_scenario,year) * (
4244              ( ( POWER( 1 + growth_land_scen_lo(node,land_scenario,year) , 
      duration_period(year) ) - 1 )
4245                  / growth_land_scen_lo(node,land_scenario,year) )$( growth_
      land_scen_lo(node,land_scenario,year) )
4246                + ( duration_period(year) )$( NOT growth_land_scen_lo(node,l
      and_scenario,year) )
4247              )
4248  * reduction of land scenario from previous period
4249          + SUM((year_all2)$( seq_period(year_all2,year) ),
4250                  ( LAND(node,land_scenario,year_all2)$( model_horizon(year_
      all2) )
4251                    + historical_land(node,land_scenario,year_all2) )
4252                  * POWER( 1 + growth_land_scen_lo(node,land_scenario,year) 
      , duration_period(year) )
4253              )
4254  * optional relaxation for calibration and debugging
4255  * - SLACK_LAND_SCEN_LO(node,land_scenario,year)
4256  ;
4257   
4258  ***
4259  * These constraints enforces upper and lower bounds on the change rate per
       land type
4260  * determined as a linear combination of land use scenarios.
4261  *
4262  * Equation DYNAMIC_LAND_TYPE_CONSTRAINT_UP
4263  * """"""""""""""""""""""""""""""""""""""""
4264  *
4265  *  .. math::
4266  *     \sum_{s \in S} land\_use_{n,s,y,u} &\cdot LAND_{n,s,y}
4267  *         \leq initial\_land\_up_{n,y,u}
4268  *             \cdot \frac{ \Big( 1 + growth\_land\_up_{n,y,u} \Big)^{|y|} 
      - 1 }
4269  *                        { growth\_land\_up_{n,y,u} } \\
4270  *              & + \Big( \sum_{s \in S} \big( land\_use_{n,s,y-1,u}
4271  *                          + dynamic\_land\_up_{n,s,y-1,u} \big) \\
4272  *                            & \quad \quad \cdot \big( LAND_{n,s,y-1} + hi
      storical\_land_{n,s,y-1} \big) \Big) \\
4273  *                            & \quad \cdot \Big( 1 + growth\_land\_up_{n,y
      ,u} \Big)^{|y|}
4274  *
4275  ***
4276  DYNAMIC_LAND_TYPE_CONSTRAINT_UP(node,year,land_type)$( is_dynamic_land_up(
      node,year,land_type) )..
4277  * amount of land assigned to specific type in current period
4278      SUM(land_scenario$( map_land(node,land_scenario,year) ),
4279          land_use(node,land_scenario,year,land_type) * LAND(node,land_scena
      rio,year) ) =L=
4280  * initial 'new' land used for that type (compounded over the duration of t
      he period)
4281          initial_land_up(node,year,land_type) * (
4282              ( ( POWER( 1 + growth_land_up(node,year,land_type) , duration_
      period(year) ) - 1 )
4283                  / growth_land_up(node,year,land_type) )$( growth_land_up(n
      ode,year,land_type) )
4284                + ( duration_period(year) )$( NOT growth_land_up(node,year,l
      and_type) )
4285              )
4286  * expansion of previously used land of this type from previous period and 
      upper bound on land use transformation
4287          + SUM((year_all2)$( seq_period(year_all2,year) ),
4288              SUM(land_scenario$( map_land(node,land_scenario,year) ),
4289                  ( land_use(node,land_scenario,year_all2,land_type)
4290                    + dynamic_land_up(node,land_scenario,year_all2,land_type
      ) )
4291                  * ( LAND(node,land_scenario,year_all2)$( model_horizon(yea
      r_all2) )
4292                      + historical_land(node,land_scenario,year_all2) )
4293                  * POWER( 1 + growth_land_up(node,year,land_type) , duratio
      n_period(year) )
4294                )
4295            )
4296  * optional relaxation for calibration and debugging
4297  * + SLACK_LAND_TYPE_UP(node,year,land_type)
4298  ;
4299   
4300  ***
4301  * Equation DYNAMIC_LAND_TYPE_CONSTRAINT_LO
4302  * """"""""""""""""""""""""""""""""""""""""
4303  *
4304  *  .. math::
4305  *     \sum_{s \in S} land\_use_{n,s,y,u} &\cdot LAND_{n,s,y}
4306  *         \geq - initial\_land\_lo_{n,y,u}
4307  *             \cdot \frac{ \Big( 1 + growth\_land\_lo_{n,y,u} \Big)^{|y|} 
      - 1 }
4308  *                        { growth\_land\_lo_{n,y,u} } \\
4309  *              & + \Big( \sum_{s \in S} \big( land\_use_{n,s,y-1,u}
4310  *                          + dynamic\_land\_lo_{n,s,y-1,u} \big) \\
4311  *                            & \quad \quad \cdot \big( LAND_{n,s,y-1} + hi
      storical\_land_{n,s,y-1} \big) \Big) \\
4312  *                            & \quad \cdot \Big( 1 + growth\_land\_lo_{n,y
      ,u} \Big)^{|y|}
4313  *
4314  ***
4315  DYNAMIC_LAND_TYPE_CONSTRAINT_LO(node,year,land_type)$( is_dynamic_land_lo(
      node,year,land_type) )..
4316  * amount of land assigned to specific type in current period
4317      SUM(land_scenario$( map_land(node,land_scenario,year) ),
4318          land_use(node,land_scenario,year,land_type) * LAND(node,land_scena
      rio,year) ) =G=
4319  * initial 'new' land used for that type (compounded over the duration of t
      he period)
4320          - initial_land_lo(node,year,land_type) * (
4321              ( ( POWER( 1 + growth_land_up(node,year,land_type) , duration_
      period(year) ) - 1 )
4322                  / growth_land_lo(node,year,land_type) )$( growth_land_lo(n
      ode,year,land_type) )
4323                + ( duration_period(year) )$( NOT growth_land_lo(node,year,l
      and_type) )
4324              )
4325  * expansion of previously used land of this type from previous period and 
      lower bound on land use transformation
4326          + SUM((year_all2)$( seq_period(year_all2,year) ),
4327              SUM(land_scenario$( map_land(node,land_scenario,year) ),
4328                  ( land_use(node,land_scenario,year_all2,land_type)
4329                    + dynamic_land_lo(node,land_scenario,year_all2,land_type
      ) )
4330                  * ( LAND(node,land_scenario,year_all2)$( model_horizon(yea
      r_all2) )
4331                      + historical_land(node,land_scenario,year_all2) )
4332                  * POWER( 1 + growth_land_lo(node,year,land_type) , duratio
      n_period(year) )
4333                )
4334            )
4335  * optional relaxation for calibration and debugging
4336  * - SLACK_LAND_TYPE_LO(node,year,land_type)
4337  ;
4338   
4339  *-------------------------------------------------------------------------
      ---------------------------------------------*
4340  ***
4341  * .. _section_of_generic_relations:
4342  *
4343  * Section of generic relations (linear constraints)
4344  * -------------------------------------------------
4345  *
4346  * This feature is intended for development and testing only - all new feat
      ures should be implemented
4347  * as specific new mathematical formulations and associated sets & paramete
      rs!
4348  *
4349  * Auxiliary variable for left-hand side
4350  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4351  *
4352  * Equation RELATION_EQUIVALENCE
4353  * """""""""""""""""""""""""""""
4354  *   .. math::
4355  *      REL_{r,n,y} = \sum_{t} \Bigg(
4356  *          & \ relation\_new\_capacity_{r,n,y,t} \cdot CAP\_NEW_{n,t,y} \\
      [4 pt]
4357  *          & + relation\_total\_capacity_{r,n,y,t} \cdot \sum_{y^V \leq y}
       \ CAP_{n,t,y^V,y} \\
4358  *          & + \sum_{n^L,y',m,h} \ relation\_activity_{r,n,y,n^L,t,y',m} \
      \
4359  *          & \quad \quad \cdot \Big( \sum_{y^V \leq y'} ACT_{n^L,t,y^V,y',
      m,h}
4360  *                              + historical\_activity_{n^L,t,y',m,h} \Big)
       \Bigg)
4361  *
4362  * The parameter :math:`historical\_new\_capacity_{r,n,y}` is not included 
      here, because relations can only be active
4363  * in periods included in the model horizon and there is no "writing" of ca
      pacity relation factors across periods.
4364  ***
4365   
4366  RELATION_EQUIVALENCE(relation,node,year)..
4367      REL(relation,node,year)
4368          =E=
4369      SUM(tec,
4370          ( relation_new_capacity(relation,node,year,tec) * CAP_NEW(node,tec
      ,year)
4371            + relation_total_capacity(relation,node,year,tec)
4372              * SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ), CAP
      (node,tec,vintage,year) )
4373            )$( inv_tec(tec) )
4374          + SUM((location,year_all2,mode,time)$( map_tec_act(location,tec,ye
      ar_all2,mode,time) ),
4375              relation_activity(relation,node,year,location,tec,year_all2,mo
      de)
4376              * ( SUM(vintage$( map_tec_lifetime(location,tec,vintage,year_a
      ll2) ),
4377                    ACT(location,tec,vintage,year_all2,mode,time) )
4378                    + historical_activity(location,tec,year_all2,mode,time) 
      )
4379            )
4380        ) ;
4381   
4382  ***
4383  * Upper and lower bounds on user-defined relations
4384  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4385  *
4386  * Equation RELATION_CONSTRAINT_UP
4387  * """""""""""""""""""""""""""""""
4388  *   .. math::
4389  *      REL_{r,n,y} \leq relation\_upper_{r,n,y}
4390  ***
4391  RELATION_CONSTRAINT_UP(relation,node,year)$( is_relation_upper(relation,no
      de,year) )..
4392      REL(relation,node,year)
4393  * - SLACK_RELATION_BOUND_UP(relation,node,year)
4394      =L= relation_upper(relation,node,year) ;
4395   
4396  ***
4397  * Equation RELATION_CONSTRAINT_LO
4398  * """""""""""""""""""""""""""""""
4399  *   .. math::
4400  *      REL_{r,n,y} \geq relation\_lower_{r,n,y}
4401  ***
4402  RELATION_CONSTRAINT_LO(relation,node,year)$( is_relation_lower(relation,no
      de,year) )..
4403      REL(relation,node,year)
4404  * + SLACK_RELATION_BOUND_LO(relation,node,year)
4405      =G= relation_lower(relation,node,year) ;
4406   
4407  *-------------------------------------------------------------------------
      ---------------------------------------------*
4408  ***
4409  * .. _gams-storage:
4410  *
4411  * Storage section
4412  * ---------------
4413  *
4414  * Storage technologies can be used to store a commodity (e.g., water, heat
      , electricity, etc.)
4415  * and shift it over sub-annual time slices. The storage solution presented
       here has three
4416  * distinctive parts: (i) Charger: a technology for charging a commodity to
       the storage container,
4417  * for example, a pump in a pumped hydropower storage (PHS) plant. (ii) Dis
      charger: a technology
4418  * to convert the stored commodity to the output commodity, e.g., a turbine
       in PHS.
4419  * (iii) Storage container: a device for storing a commodity over time, suc
      h as a water reservoir in PHS.
4420  *
4421  * .. figure:: ../../_static/storage.png
4422  *
4423  * Storage equations
4424  * ^^^^^^^^^^^^^^^^^
4425  * The content of storage device depends on three factors: charge or discha
      rge in
4426  * one time step (represented by `Equation STORAGE_CHANGE`_), the state of 
      charge in the previous
4427  * time step, and storage losses between two consecutive time steps.
4428  *
4429  * Equation STORAGE_CHANGE
4430  * """""""""""""""""""""""
4431  * This equation shows the change in the content of the storage container i
      n each
4432  * sub-annual timestep. This change is based on the activity of charger and
       discharger
4433  * technologies connected to that storage container. The notation :math:`S^
      {storage}`
4434  * represents the mapping set `map_tec_storage` denoting charger-discharger
4435  * technologies connected to a specific storage container in a specific nod
      e and
4436  * storage level. Where:
4437  *
4438  * - :math:`t^{C}` is a charging technology and :math:`t^{D}` is the corres
      ponding discharger.
4439  * - :math:`h-1` is the time step prior to :math:`h`.
4440  *
4441  *   .. math::
4442  *      STORAGE\_CHARGE_{n,t,l,c,y,h} =
4443  *          \sum_{\substack{n^L,m,h-1 \\ y^V \leq y, (n,t^C,t,l,y) \sim S^{
      storage}}} output_{n^L,t^C,y^V,y,m,n,c,l,h-1,h}
4444  *             \cdot & ACT_{n^L,t^C,y^V,y,m,h-1} \\
4445  *          - \sum_{\substack{n^L,m,c,h-1 \\ y^V \leq y, (n,t^D,t,l,y) \sim
       S^{storage}}} input_{n^L,t^D,y^V,y,m,n,c,l,h-1,h}
4446  *              \cdot ACT_{n^L,t^D,y^V,y,m,h-1} \quad \forall \ t \in T^{ST
      OR}, & \forall \ l \in L^{STOR}
4447  ***
4448  STORAGE_CHANGE(node,storage_tec,level_storage,commodity,year,time) ..
4449  * change in the content of storage in the examined timestep
4450      STORAGE_CHARGE(node,storage_tec,level_storage,commodity,year,time) =E=
4451  * increase in the content of storage due to the activity of charging techn
      ologies
4452          SUM( (location,vintage,mode,tec,time2)$(
4453          map_tec_lifetime(node,tec,vintage,year)
4454          AND map_tec_storage(node,tec,storage_tec,level_storage,commodity) 
      ),
4455              output(location,tec,vintage,year,mode,node,commodity,level_sto
      rage,time2,time)
4456              * duration_time_rel(time,time2) * ACT(location,tec,vintage,yea
      r,mode,time) )
4457  * decrease in the content of storage due to the activity of discharging te
      chnologies
4458          - SUM( (location,vintage,mode,tec,time2)$(
4459          map_tec_lifetime(node,tec,vintage,year)
4460          AND map_tec_storage(node,tec,storage_tec,level_storage,commodity) 
      ),
4461              input(location,tec,vintage,year,mode,node,commodity,level_stor
      age,time2,time)
4462              * duration_time_rel(time,time2) * ACT(location,tec,vintage,yea
      r,mode,time) );
4463   
4464  ***
4465  * Equation STORAGE_BALANCE
4466  * """"""""""""""""""""""""
4467  *
4468  * This equation ensures the commodity balance of storage technologies,
4469  * where the commodity is shifted between sub-annual timesteps within a mod
      el period.
4470  * If the state of charge of storage is set exogenously in one timestep thr
      ough :math:`storage\_initial_{n,t,l,y,h}` parameter,
4471  * the content from the previous timestep is not carried over to this times
      tep.
4472  *
4473  *   .. math::
4474  *      STORAGE_{n,t,l,y,h} \ = storage\_initial_{n,t,l,y,h} + STORAGE\_CHA
      RGE_{n,t,l,y,h} + \\
4475  *      STORAGE_{n,t,l,y,h-1} \cdot (1 - storage\_self\_discharge_{n,t,l,y,
      h-1}) \quad \forall \ t \in T^{STOR}, & \forall \ l \in L^{STOR}
4476  ***
4477  STORAGE_BALANCE(node,storage_tec,level,commodity,year,time2)$ (
4478      SUM(tec, map_tec_storage(node,tec,storage_tec,level,commodity) )
4479      AND NOT storage_initial(node,storage_tec,level,commodity,year,time2) )
      ..
4480  * Showing the the state of charge of storage at each timestep
4481      STORAGE(node,storage_tec,level,commodity,year,time2) =E=
4482  * change in the content of storage in the examined timestep
4483      + STORAGE_CHARGE(node,storage_tec,level,commodity,year,time2)
4484  * storage content in the previous subannual timestep
4485      + SUM((lvl_temporal,time)$map_time_period(year,lvl_temporal,time,time2
      ),
4486          STORAGE(node,storage_tec,level,commodity,year,time)
4487  * considering storage self-discharge losses due to keeping the storage med
      ia between two subannual timesteps
4488          * (1 - storage_self_discharge(node,storage_tec,level,commodity,yea
      r,time) ) ) ;
4489   
4490  STORAGE_BALANCE_INIT(node,storage_tec,level,commodity,year,time)$ (
4491      SUM(tec, map_tec_storage(node,tec,storage_tec,level,commodity) )
4492      AND storage_initial(node,storage_tec,level,commodity,year,time) )..
4493  * Showing the state of charge of storage at a timestep with an initial sto
      rage content
4494      STORAGE(node,storage_tec,level,commodity,year,time) =E=
4495  * initial content of storage and change in the content of storage in the e
      xamined timestep
4496  * (here the content from the previous time step is not carried over)
4497      storage_initial(node,storage_tec,level,commodity,year,time)
4498      + STORAGE_CHARGE(node,storage_tec,level,commodity,year,time) ;
4499   
4500  * Connecting an input commodity to maintain the operation of storage conta
      iner over time (optional)
4501  STORAGE_EQUIVALENCE(node,storage_tec,level,commodity,level_storage,commodi
      ty2,mode,year,time)$
4502      ( map_time_commodity_storage(node,storage_tec,level,commodity,mode,yea
      r,time) AND
4503        SUM( tec, map_tec_storage(node,tec,storage_tec,level_storage,commodi
      ty2) ) )..
4504   
4505           STORAGE(node,storage_tec,level_storage,commodity2,year,time) =E=
4506          SUM( (location,vintage,time2)$(map_tec_lifetime(node,storage_tec,v
      intage,year)$(
4507                input(location,storage_tec,vintage,year,mode,node,commodity,
      level,time2,time) ) ),
4508                duration_time_rel(time,time2) * ACT(location,storage_tec,vin
      tage,year,mode,time) );
4509   
4510  ***
4511  * Equation BLUES_LAND_BALANCE
4512  * """""""""""""""""""""""""""""""""""
4513  * This constraint provides land capacity balance over years.
4514  *
4515  *   .. math::
4516  *
4517  *
4518  *
4519  * This constraint is only active if : is defined.
4520  ***
4521  BLUES_LAND_BALANCE(node,tec,year,BLUES_type_land_tec) $ ( map_BLUES_land_r
      el(node,tec, BLUES_type_land_tec)
4522           AND NOT historical(year)
4523           AND NOT first_period(year)
4524                   ) ..
4525  * capacity of land primary tec in y+1
4526          (SUM(vintage $ (year_order(vintage) <= year_order(year)
4527                           AND map_tec_lifetime(node,tec,vintage,year)), CAP
      (node,tec,vintage,year)   ) )
4528          =E=
4529          ( SUM((vintage, year_all2, BLUES_sec_land_tec) $( seq_period(year_
      all2,year)
4530           AND BLUES_cat_land_tec(BLUES_type_land_tec, BLUES_sec_land_tec) A
      ND year_order(vintage) < year_order(year)),
4531                  remaining_capacity(node,BLUES_sec_land_tec,vintage,year_al
      l2) * CAP(node,BLUES_sec_land_tec,vintage,year_all2) ))
4532  * + SLACK_CAP_LAND(node,tec,year,BLUES_type_land_tec)
4533                  ;
4534  ***
4535  * Equation LAND CAPACITY MAINTENANCE HIST
4536  * """""""""""""""""""""""""""""""""""
4537  * This constraint provides land capacity balance in the first year
4538  *
4539  *   .. math::
4540  *
4541  *
4542  *
4543  * This constraint is only active if : is defined.
4544  ***
4545  *BLUES_LAND_HIST_BAL(node,tec,vintage,first_period)$( map_tec_lifetime(nod
      e,tec,vintage,first_period)
4546  *        AND historical(vintage) AND BLUES_land_tec(tec) AND seq_period(vi
      ntage,first_period))..
4547  *    CAP(node,tec,vintage,first_period) + CAP(node,tec,first_period,first_
      period)
4548  *    =E=
4549  *         remaining_capacity(node,tec,vintage,first_period) *
4550  *        duration_period(vintage) * historical_new_capacity(node,tec,vinta
      ge) ;
4551   
4552   
4553   
4554  *-------------------------------------------------------------------------
      ---------------------------------------------*
4555  ***
4556  * .. _section_of_generic_relations:
4557  *
4558  * Section of generic relations (linear constraints)
4559  * -------------------------------------------------
4560  *
4561  * This feature is intended for development and testing only - all new feat
      ures should be implemented
4562  * as specific new mathematical formulations and associated sets & paramete
      rs!
4563  *
4564  * Auxiliary variable for left-hand side
4565  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4566  *
4567  * Equation RELATION_EQUIVALENCE
4568  * """""""""""""""""""""""""""""
4569  *   .. math::
4570  *      REL_{r,n,y} = \sum_{t} \Bigg(
4571  *          & \ relation\_new\_capacity_{r,n,y,t} \cdot CAP\_NEW_{n,t,y} \\
      [4 pt]
4572  *          & + relation\_total\_capacity_{r,n,y,t} \cdot \sum_{y^V \leq y}
       \ CAP_{n,t,y^V,y} \\
4573  *          & + \sum_{n^L,y',m,h} \ relation\_activity_{r,n,y,n^L,t,y',m} \
      \
4574  *          & \quad \quad \cdot \Big( \sum_{y^V \leq y'} ACT_{n^L,t,y^V,y',
      m,h}
4575  *                              + historical\_activity_{n^L,t,y',m,h} \Big)
       \Bigg)
4576  *
4577  * The parameter :math:`historical\_new\_capacity_{r,n,y}` is not included 
      here, because relations can only be active
4578  * in periods included in the model horizon and there is no "writing" of ca
      pacity relation factors across periods.
4579  ***
4580   
4581  RELATION_EQUIVALENCE2(relation2,node,year)..
4582      REL2(relation2,node,year)
4583          =E=
4584      SUM(tec,
4585          ( relation_new_capacity2(relation2,node,year,tec) * CAP_NEW(node,t
      ec,year)
4586            + relation_total_capacity2(relation2,node,year,tec)
4587              * SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ), CAP
      (node,tec,vintage,year) )
4588            )$( inv_tec(tec) )
4589          + SUM((location,year_all2,mode,time)$( map_tec_act(location,tec,ye
      ar_all2,mode,time) ),
4590              relation_activity2(relation2,node,year,location,tec,year_all2,
      mode)
4591  *            *  main_rel_val(relation2, location,tec,year_all2,mode,time)
4592              * ( SUM(vintage$( map_tec_lifetime(location,tec,vintage,year_a
      ll2) ),
4593                    duration_time(time) * ACT(location,tec,vintage,year_all2
      ,mode,time)
4594  *                  *  main_output_val(node,tec,vintage,year,mode,time)
4595                    )
4596                    + historical_activity(location,tec,year_all2,mode,time) 
      )
4597            )
4598        ) ;
4599   
4600  ***
4601  * Upper and lower bounds on user-defined relations
4602  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4603  *
4604  * Equation RELATION_CONSTRAINT_UP
4605  * """""""""""""""""""""""""""""""
4606  *   .. math::
4607  *      REL_{r,n,y} \leq relation\_upper_{r,n,y}
4608  ***
4609  RELATION_CONSTRAINT_UP2(relation2,node,year)$( is_relation_upper2(relation
      2,node,year) )..
4610      REL2(relation2,node,year)
4611  * - SLACK_RELATION_BOUND_UP2(relation2,node,year)
4612      =L= relation_upper2(relation2,node,year) ;
4613   
4614  ***
4615  * Equation RELATION_CONSTRAINT_LO
4616  * """""""""""""""""""""""""""""""
4617  *   .. math::
4618  *      REL_{r,n,y} \geq relation\_lower_{r,n,y}
4619  ***
4620  RELATION_CONSTRAINT_LO2(relation2,node,year)$( is_relation_lower2(relation
      2,node,year) )..
4621      REL2(relation2,node,year)
4622  * + SLACK_RELATION_BOUND_LO2(relation2,node,year)
4623      =G= relation_lower2(relation2,node,year) ;
4624  *-------------------------------------------------------------------------
      ---------------------------------------------*
4625  * model statements                                                        
                                                   *
4626  *-------------------------------------------------------------------------
      ---------------------------------------------*
4627   
4628  Model MESSAGE_LP / all / ;
4629   
4630  MESSAGE_LP.holdfixed = 1 ;
4631  MESSAGE_LP.optfile = 1 ;
4632  MESSAGE_LP.optcr = 0 ;
4633   
4634  *-------------------------------------------------------------------------
      ---------------------------------------------*
4635  * solve statements (including the loop for myopic or rolling-horizon optim
      ization)                                     *
4636  *-------------------------------------------------------------------------
      ---------------------------------------------*
4637   
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE/model_so
           lve.gms
4638  $INCLUDE MESSAGE/model_solve.gms
4639  ***
4640  * Solve statement workflow
4641  * ========================
4642  *
4643  * This part of the code includes the perfect-foresight, myopic and rolling
      -horizon model solve statements
4644  * including the required accounting of investment costs beyond the model h
      orizon.
4645  ***
4646   
4647  if (0 = 0,
4648  ***
4649  * Perfect-foresight model
4650  * ~~~~~~~~~~~~~~~~~~~~~~~
4651  * For the perfect foresight version of |MESSAGEix|, include all years in t
      he model horizon and solve the entire model.
4652  * This is the standard option; the GAMS global variable ``%foresight%=0`` 
      by default.
4653  *
4654  * .. math::
4655  *    \min_x OBJ = \sum_{y \in Y} OBJ_y(x_y)
4656  ***
4657   
4658  * reset year in case it was set by MACRO to include the base year before
4659      year(year_all) = no ;
4660  * include all model periods in the optimization horizon (excluding histori
      cal periods prior to 'first_period')
4661      year(year_all)$( model_horizon(year_all) ) = yes ;
4662   
4663  * write a status update to the log file, solve the model
4664      put_utility 'log' /'+++ Solve the perfect-foresight version of MESSAGE
      ix +++ ' ;
4665      Solve MESSAGE_LP using LP minimizing OBJ ;
****                                               $257
**** LINE     27 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_solve.gms
**** LINE     71 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 257  Solve statement not checked because of previous errors
4666   
4667  * write model status summary
4668      status('perfect_foresight','modelstat') = MESSAGE_LP.modelstat ;
4669      status('perfect_foresight','solvestat') = MESSAGE_LP.solvestat ;
4670      status('perfect_foresight','resUsd')    = MESSAGE_LP.resUsd ;
4671      status('perfect_foresight','objEst')    = MESSAGE_LP.objEst ;
4672      status('perfect_foresight','objVal')    = MESSAGE_LP.objVal ;
4673   
4674  * write an error message if model did not solve to optimality
4675      IF( NOT ( MESSAGE_LP.modelstat = 1 OR MESSAGE_LP.modelstat = 8 ),
4676          put_utility 'log' /'+++ MESSAGEix did not solve to optimality - ru
      n is aborted, no output produced! +++ ' ;
4677          ABORT "MESSAGEix did not solve to optimality!"
4678      ) ;
4679   
4680  * rescale the dual of the emission constraint to account that the constrai
      nt is defined on the average year, not total
4681  EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year)$(
4682          EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year) ) =
****                              $141
**** LINE     44 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_solve.gms
**** LINE     71 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
4683      EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year)
4684          / SUM(year$( cat_year(type_year,year) ), duration_period(year) )
4685          * SUM(year$( map_first_period(type_year,year) ), duration_period(y
      ear) / df_period(year) * df_year(year) );
4686   
4687   
4688  * assign auxiliary variables DEMAND, PRICE_COMMODITY and PRICE_EMISSION fo
      r integration with MACRO and reporting
4689      DEMAND.l(node,commodity,level,year,time) = demand_fixed(node,commodity
      ,level,year,time) ;
4690      PRICE_COMMODITY.l(node,commodity,level,year,time) =
4691          ( COMMODITY_BALANCE_GT.m(node,commodity,level,year,time) + COMMODI
****                                 $141                                       
      TY_BALANCE_LT.m(node,commodity,level,year,time) )
                    $141
**** LINE     53 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_solve.gms
**** LINE     71 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
4692              / df_period(year) ;
4693      PRICE_EMISSION.l(node,type_emission,type_tec,year)$( SUM(type_year$( c
      at_year(type_year,year) ), 1 ) ) =
4694          SMAX(type_year$( cat_year(type_year,year) ),
4695                 - EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_ye
      ar) )
4696              / df_year(year) ;
4697      PRICE_EMISSION.l(node,type_emission,type_tec,year)$(
4698          PRICE_EMISSION.l(node,type_emission,type_tec,year) = - inf ) = 0 ;
4699   
4700  * AUX_ACT_BOUND_LO(node,tec,year_all,year_all2,mode,time)$( ACT.l(node,tec
      ,year_all,year_all2,mode,time) < 0 AND
4701  *    ACT.l(node,tec,year_all,year_all2,mode,time) = -1e9 ) = yes ;
4702  * AUX_ACT_BOUND_UP(node,tec,year_all,year_all2,mode,time)$( ACT.l(node,tec
      ,year_all,year_all2,mode,time) > 0 AND
4703  *    ACT.l(node,tec,year_all,year_all2,mode,time) = 1e9 ) = yes ;
4704   
4705  else
4706  ***
4707  * Recursive-dynamic and myopic model
4708  * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4709  * For the myopic and rolling-horizon models, loop over horizons and iterat
      ively solve the model, keeping the decision
4710  * variables from prior periods fixed.
4711  * This option is selected by setting the GAMS global variable ``%foresight
      %`` to a value greater than 0,
4712  * where the value represents the number of years that the model instance i
      s considering when iterating over the periods
4713  * of the optimization horizon.
4714  *
4715  * Loop over :math:`\hat{y} \in Y`, solving
4716  *
4717  * .. math::
4718  *     \min_x \ OBJ = \sum_{y \in \hat{Y}(\hat{y})} OBJ_y(x_y) \\
4719  *     \text{s.t. } x_{y'} = x_{y'}^* \quad \forall \ y' < y
4720  *
4721  * where :math:`\hat{Y}(\hat{y}) = \{y \in Y | \ |\hat{y}| - |y| < optimiza
      tion\_horizon \}` and
4722  * :math:`x_{y'}^*` is the optimal value of :math:`x_{y'}` in iteration :ma
      th:`|y'|` of the iterative loop.
4723  *
4724  * The advantage of this implementation is that there is no need to 'store'
       the optimal values of all decision
4725  * variables in additional reporting parameters - the last model solve auto
      matically includes the results over the
4726  * entire model horizon and can be imported via the ixmp interface.
4727  ***
4728   
4729      year(year_all) = no ;
4730   
4731      LOOP(year_all$( model_horizon(year_all) ),
4732   
4733  * include all past periods and future periods including the period where t
      he %foresight% is reached
4734          year(year_all) = yes ;
4735   
4736  * reset the investment cost scaling parameter
4737          year(year_all2)$( ORD(year_all2) > ORD(year_all)
4738              AND duration_period_sum(year_all,year_all2) < 0 ) = yes ;
4739   
4740  * write a status update and time elapsed to the log file, solve the model
4741          put_utility 'log' /'+++ Solve the recursive-dynamic version of MES
      SAGEix - iteration ' year_all.tl:0 '  +++ ' ;
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\includes/aux_com
           putation_time.gms
4742          $$INCLUDE includes/aux_computation_time.gms
4743  * elegant reporting of GAMS computing time
4744  * requires aux_computation_time_init.gms
4745   
4746  if ( timeElapsed > 7200 ,
4747      put_utility 'log' / '    Time since GAMS start: ' floor( timeElapsed /
       3600 ):0:0 ' hours, ' ( mod( timeElapsed, 3600 ) / 60 ):0:0 ' minutes' ;
4748  elseif timeElapsed > 3720 ,
4749      put_utility 'log' / '    Time since GAMS start: 1 hour, ' ( timeElapse
      d / 60 - 60 ):0:0 ' minutes' ;
4750  elseif timeElapsed > 3660 ,
4751      put_utility 'log' / '    Time since GAMS start: 1 hour, 1 minute' ;
4752  elseif timeElapsed > 120 ,
4753      put_utility 'log' / '    Time since GAMS start: ' ( timeElapsed / 60 )
      :0:0 ' minutes' ;
4754  else
4755      put_utility 'log' / '    Give it a bit more time, not even two minutes
       yet... ' ;
4756  ) ;
4757          Solve MESSAGE_LP using LP minimizing OBJ ;
****                                                   $257
**** LINE    105 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_solve.gms
**** LINE     71 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 257  Solve statement not checked because of previous errors
4758   
4759  * write model status summary
4760          status(year_all,'modelstat') = MESSAGE_LP.modelstat ;
4761          status(year_all,'solvestat') = MESSAGE_LP.solvestat ;
4762          status(year_all,'resUsd')    = MESSAGE_LP.resUsd ;
4763          status(year_all,'objEst')    = MESSAGE_LP.objEst ;
4764          status(year_all,'objVal')    = MESSAGE_LP.objVal ;
4765   
4766  * write an error message AND ABORT THE SOLVE LOOP if model did not solve t
      o optimality
4767          IF( NOT ( MESSAGE_LP.modelstat = 1 OR MESSAGE_LP.modelstat = 8 ),
4768              put_utility 'log' /'+++ MESSAGEix did not solve to optimality 
      - run is aborted, no output produced! +++ ' ;
4769              ABORT "MESSAGEix did not solve to optimality!"
4770          ) ;
4771   
4772  * fix all variables of the current iteration period 'year_all' to the opti
      mal levels
4773          EXT.fx(node,commodity,grade,year_all) =  EXT.l(node,commodity,grad
      e,year_all) ;
4774          CAP_NEW.fx(node,tec,year_all) = CAP_NEW.l(node,tec,year_all) ;
4775          CAP.fx(node,tec,year_all2,year_all)$( map_period(year_all2,year_al
      l) ) = CAP.l(node,tec,year_all,year_all2) ;
4776          ACT.fx(node,tec,year_all2,year_all,mode,time)$( map_period(year_al
      l2,year_all) )
4777              = ACT.l(node,tec,year_all2,year_all,mode,time) ;
4778          CAP_NEW_UP.fx(node,tec,year_all) = CAP_NEW_UP.l(node,tec,year_all)
****                                                        $141
       ;
**** LINE    126 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_solve.gms
**** LINE     71 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
4779          CAP_NEW_LO.fx(node,tec,year_all) = CAP_NEW_LO.l(node,tec,year_all)
****                                                        $141
       ;
**** LINE    127 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_solve.gms
**** LINE     71 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
4780          ACT_UP.fx(node,tec,year_all,time) = ACT_UP.l(node,tec,year_all,tim
****                                                     $141
      e) ;
**** LINE    128 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_solve.gms
**** LINE     71 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
4781          ACT_LO.fx(node,tec,year_all,time) = ACT_LO.l(node,tec,year_all,tim
****                                                     $141
      e) ;
**** LINE    129 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_solve.gms
**** LINE     71 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
4782   
4783      ) ; # end of the recursive-dynamic loop
4784   
4785  ) ; # end of if statement for the selection betwen perfect-foresight or re
      cursive-dynamic model
4786   
4787  *-------------------------------------------------------------------------
      ---------------------------------------------*
4788  * post-processing of trade costs and total costs                          
                                                   *
4789  *-------------------------------------------------------------------------
      ---------------------------------------------*
4790   
4791  * calculation of commodity import costs by node, commodity and year
4792  import_cost(node2, commodity, year) =
4793            SUM( (node,tec,vintage,mode,level,time,time2)$( (NOT sameas(node
      ,node2)) AND map_tec_act(node2,tec,year,mode,time2)
4794              AND map_tec_lifetime(node2,tec,vintage,year) AND map_commodity
      (node,commodity,level,year,time) ),
4795  * import into node2 from other nodes
4796      input(node2,tec,vintage,year,mode,node,commodity,level,time2,time)
4797      * duration_time_rel(time,time2) * ACT.L(node2,tec,vintage,year,mode,ti
      me2)
4798      * PRICE_COMMODITY.l(node,commodity,level,year,time) )
4799  ;
4800   
4801  * calculation of commodity export costs by node, commodity and year
4802  export_cost(node2, commodity, year) =
4803            SUM( (node,tec,vintage,mode,level,time,time2)$( (NOT sameas(node
      ,node2)) AND map_tec_act(node2,tec,year,mode,time2)
4804              AND map_tec_lifetime(node2,tec,vintage,year) AND map_commodity
      (node,commodity,level,year,time) ),
4805  * export from node2 to other market
4806      output(node2,tec,vintage,year,mode,node,commodity,level,time2,time)
4807      * duration_time_rel(time,time2) * ACT.L(node2,tec,vintage,year,mode,ti
      me2)
4808      * PRICE_COMMODITY.l(node,commodity,level,year,time) )
4809  ;
4810   
4811  * net commodity trade costs by node and year
4812  trade_cost(node2, year) = SUM(commodity, import_cost(node2, commodity, yea
      r) - export_cost(node2, commodity, year)) ;
4813   
4814  * total energy system costs excluding taxes by node and time (CAVEAT: lack
      ing regional corrections due to emission trading)
4815  COST_NODAL_NET.L(node, year)$(NOT macro_base_period(year)) = (
4816      COST_NODAL.L(node, year) + trade_cost(node, year)
****                 $141
**** LINE    164 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE/model_solve.gms
**** LINE     71 INCLUDE     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_run.gms
**** LINE    123 INPUT       D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\mode
                             l\MESSAGE_master.gms
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
4817  * subtract emission taxes applied at any higher nodal level (via map_node 
      set)
4818      - sum((type_emission,emission,type_tec,type_year,node2)$( emission_sca
      ling(type_emission,emission)
4819              AND map_node(node2,node) AND cat_year(type_year,year) ),
4820          emission_scaling(type_emission,emission) * tax_emission(node2,type
      _emission,type_tec,type_year)
4821          * EMISS.L(node,emission,type_tec,year) )
4822  ) / 1000 ;
4823   
4824  *-------------------------------------------------------------------------
      ---------------------------------------------*
4825  * post-processing and export to gdx                                       
                                                   *
4826  *-------------------------------------------------------------------------
      ---------------------------------------------*
4827   
4828  * include MESSAGE GAMS-internal reporting
INCLUDE    D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE/reportin
           g.gms
4829  $INCLUDE MESSAGE/reporting.gms
4830  ***
4831  * Standard output reports
4832  * =======================
4833  *
4834  * This part of the code contains the definitions and scripts for a number 
      of standard output reports.
4835  * These default reports will be created after every MESSAGE run.
4836  ***
4837   
4838  *-------------------------------------------------------------------------
      ---------------------------------------------*
4839  * The following parts are quick-and-dirty reporting 'flags'
4840  *-------------------------------------------------------------------------
      ---------------------------------------------*
4841   
4842  Set
4843      report_aux_bounds_up(node,tec,year_all,year_all2,mode,time)
4844      report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time)
4845  ;
4846   
4847  report_aux_bounds_up(node,tec,year_all,year_all2,mode,time) = no ;
4848  report_aux_bounds_up(node,tec,year_all,year_all2,mode,time)$(
4849      map_tec_lifetime(node,tec,year_all,year_all2) AND map_tec_act(node,tec
      ,year_all2,mode,time)
4850      AND ( ACT.l(node,tec,year_all,year_all2,mode,time) = 1e9) ) = yes ;
4851   
4852  report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time) = no ;
4853  report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time)$(
4854      map_tec_lifetime(node,tec,year_all,year_all2) AND map_tec_act(node,tec
      ,year_all2,mode,time)
4855      AND ( ACT.l(node,tec,year_all,year_all2,mode,time) = -1e9 ) ) = yes ;
4856   
4857  * dump all input data, processed data and results to a gdx file
4858  execute_unload "output/MsgOutput_MsgData_BLUES_Brasil_1.99_IX_79_15C_wCost
      .gdx"
4859   
4860  put_utility 'log' / /"+++ End of MESSAGEix (stand-alone) run - have a nice
       day! +++ " ;
4861   
4862  *-------------------------------------------------------------------------
      ---------------------------------------------*
4863  * end of file - have a nice day!                                          
                                                   *
4864  *-------------------------------------------------------------------------
      ---------------------------------------------*
4865  $ENDIF
4866   
4867  *-------------------------------------------------------------------------
      ---------------------------------------------*
4868  * end of file - have a nice day!                                          
                                                   *
4869  *-------------------------------------------------------------------------
      ---------------------------------------------*

**** 17 ERROR(S)   0 WARNING(S)
GAMS 24.7.4  r58773 Released Sep 19, 2016 WEX-WEI x86 64bit/MS Windows 10/25/21 16:21:21 Page 2
The MESSAGEix Integrated Assessment Model
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  D:\Fabio\Diuana_Pdrive_IIASA\Models\NE
                                          ST-BLUES\model\MESSAGE_master.gms
     2      120 INCLUDE        1     123  .D:\Fabio\Diuana_Pdrive_IIASA\Models\N
                                           EST-BLUES\model\MESSAGE_run.gms
     3      185 INCLUDE        2      65  ..D:\Fabio\Diuana_Pdrive_IIASA\Models\
                                            NEST-BLUES\model\MESSAGE/model_setup
                                            .gms
     4      199 IF EXIST       3      14  ..D:\Fabio\Diuana_Pdrive_IIASA\Models\
                                            NEST-BLUES\model\data/MsgData_BLUES_
                                            Brasil_1.99_IX_79_15C_wCost.gdx
     5      251 INCLUDE        3      66  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\MESSAGE/auxiliary
                                             _settings.gms
     6      291 INCLUDE        3      69  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\version.gms
     7      315 INCLUDE        3      70  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\MESSAGE/version_c
                                             heck.gms
     8      322 GDXIN          7       7  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\data/MsgData_BLUE
                                             S_Brasil_1.99_IX_79_15C_wCost.gdx
     9      342 INCLUDE        3      73  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\MESSAGE/sets_maps
                                             _def.gms
    10      820 INCLUDE        3      74  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\MESSAGE/parameter
                                             _def.gms
    11     1657 INCLUDE        3      77  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\MESSAGE/data_load
                                             .gms
    12     1666 GDXIN         11       9  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\data/MsgData_BLUE
                                             S_Brasil_1.99_IX_79_15C_wCost.gdx
    13     1773 INCLUDE       11     116  ....D:\Fabio\Diuana_Pdrive_IIASA\Model
                                              s\NEST-BLUES\model\includes/period
                                              _parameter_assignment.gms
    14     2075 INCLUDE        3      80  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\MESSAGE/scaling_i
                                             nvestment_costs.gms
    15     2267 INCLUDE        3      86  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\MESSAGE/model_cor
                                             e.gms
    16     4638 INCLUDE        2      71  ..D:\Fabio\Diuana_Pdrive_IIASA\Models\
                                            NEST-BLUES\model\MESSAGE/model_solve
                                            .gms
    17     4742 INCLUDE       16     104  ...D:\Fabio\Diuana_Pdrive_IIASA\Models
                                             \NEST-BLUES\model\includes/aux_comp
                                             utation_time.gms
    18     4829 INCLUDE        2      78  ..D:\Fabio\Diuana_Pdrive_IIASA\Models\
                                            NEST-BLUES\model\MESSAGE/reporting.g
                                            ms


COMPILATION TIME     =        0.250 SECONDS     24 MB  24.7.4 r58773 WEX-WEI


USER: Energy Planning Program                        W150420:1241AO-WIN
      COPPE-UFRJ                                                DC11728
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE_master.g
           ms
Output     D:\Fabio\Diuana_Pdrive_IIASA\Models\NEST-BLUES\model\MESSAGE_master.l
           st

**** USER ERROR(S) ENCOUNTERED
